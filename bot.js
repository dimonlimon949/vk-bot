// npm install -g pm2
const { VK } = require('vk-io');
let vk = require('./vk-api.js'); 
const fs = require('fs');
const path = require('path');


// –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–º—è—Ç–∏
if (process.env.NODE_ENV === 'production') {
    require('v8').setFlagsFromString('--max-old-space-size=14096');
}


const tokensFilePath = path.join(__dirname, './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
function getTokens() {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∏ —Ñ–∞–π–ª, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!fs.existsSync(path.dirname(tokensFilePath))) {
      fs.mkdirSync(path.dirname(tokensFilePath), { recursive: true });
    }
    
    if (!fs.existsSync(tokensFilePath)) {
      fs.writeFileSync(tokensFilePath, JSON.stringify({ 
        token: "–í–ê–®_–û–°–ù–û–í–ù–û–ô_–¢–û–ö–ï–ù",
        token2: "–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô_–¢–û–ö–ï–ù"
      }, null, 2));
      console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º');
    }

    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã
const tokenData = getTokens();
console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:", tokenData);



let user = new VK({
  token: tokenData.token,
});

if (!tokenData) {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
  process.exit(1);
}





let messageSentFiveSeconds = false;

let messageSentThreeSeconds = false;

let config = require('./database/settings.json');

const crypto = require('crypto'); 

let farms = require('./spisok/—Ñ–µ—Ä–º—ã.js')

const { performance } = require('perf_hooks');

const commands = [];

let utils = require('./utils.js') 

const { stringify } = require("querystring");



let chats = require('./database/chats.json');

let log = require('./database/log.json');

let double = require('./database/users.json');

let bossinfo = require('./database/bossinfo.json')

let botinfo = require("./database/botinfo.json");




const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';


function calculateBonus(user, winnings, gameResult) {
  let bonusPercentage = 0;

  switch (gameResult) {
    case 2:
      bonusPercentage = 0.10;
      break;
    case 3:
      bonusPercentage = 0.05; 
      break;
    case 5:
      bonusPercentage = 0.03;
      break;
    case 50:
      bonusPercentage = 0.02; 
      break;
    default:
      bonusPercentage = 0;
      break;
  }

  let bonus = winnings * bonusPercentage;
  return bonus;
}
 


function getToken2() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath2, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken3() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function addZero(i) {
  return i < 10 ? "0" + i : i;
}





const tokenData2 = getToken2(); 
const tokenData3 = getToken3(); 

const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData4 = getToken4();

const spoler = tokenData4 ? Object.values(tokenData4)
    .map(id => Number(id))
    .filter(id => Number.isInteger(id) && id > 0) : [];

const chatlogi = tokenData2.chatlogi;

const coaf = tokenData2.coaf
let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

const tokenu = tokenData.user

const usert = new VK({
  token: tokenu
});


const fss = require('fs').promises; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π API


 const loadCommands = async () => {
  const cmdDirs = [
    path.join(__dirname, '–∫–æ–º–∞–Ω–¥—ã'),
    path.join(__dirname, '–∞–Ω–∏–º–µ –∫–æ–º–∞–Ω–¥—ã'),
    path.join(__dirname, '—Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã'),
    path.join(__dirname, '–≥–ø—Ç'),
  ];

  try {
    for (const cmdDir of cmdDirs) {
      // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      const files = await fss.readdir(cmdDir);

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
      await Promise.all(files.map(async (file) => {
        if (file.endsWith('.js')) {
          const command = require(path.join(cmdDir, file));
          
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã (–±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏)
          if (!Array.isArray(command)) {
            console.warn(`[WARN] –ö–æ–º–∞–Ω–¥–∞ –≤ —Ñ–∞–π–ª–µ ${file} –¥–æ–ª–∂–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤`);
            return;
          }

          commands.push(...command); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        }
      }));
    }
    
    console.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${commands.length} –∫–æ–º–∞–Ω–¥`);
  } catch (error) {
    console.error('[ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥:', error);
    throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ
  }
};



 





function generateRandomString(length) {
  const englishCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const russianCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  const characters = englishCharacters + russianCharacters;
  let result = '';
  const charactersLength = characters.length;
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * charactersLength));
  }
  return result;
}

function generateCustomHash(proverka) {
  // –°–æ–∑–¥–∞–µ–º —Ö–µ—à SHA-256
  const hash = crypto.createHash('sha256').update(proverka).digest('hex');
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∫–∏—Ç–∞–π—Å–∫–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã
  const replacementMap = {
    '0': '',
    '1': '',
    '2': '',
    '3': '',
    '4': '',
    '5': '',
    '6': '',
    '7': '',
    '8': '',
    '9': '',
    'a': '',
    'b': '',
    'c': '',
    'd': '',
    'e': '',
    'f': '',
    'g': '',
    'h': '',
    'i': '',
    'j': '',
    'k': '',
    'l': '',
    'm': '',
    'n': '',
    'o': '',
    'p': '',
    'q': '',
    'r': '',
    's': '',
    't': '',
    'u': '',
    'v': '',
    'w': '',
    'x': '',
    'y': '',
    'z': ''
  };

  let chineseHash = '';
  for (let char of hash) {
    chineseHash += replacementMap[char.toLowerCase()] || char;
  }

  return chineseHash;
}

const spolerList = Object.values(spoler).map(Number);

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
const randomGenerators = {
  System: {
    name: '–°–∏—Å—Ç–µ–º–Ω—ã–π',
    icon: 'üñ•Ô∏è',
    getRandom: () => Math.random()
  },
  Crypto: {
    name: '–ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π',
    icon: 'üîê',
    getRandom: () => {
      const buf = new Uint32Array(1);
      crypto.getRandomValues(buf);
      return buf[0] / 2**32;
    }
  },
  TimeBased: {
    name: '–í—Ä–µ–º–µ–Ω–Ω–æ–π',
    icon: '‚è±Ô∏è',
    getRandom: () => {
      const perf = performance.now();
      return (perf % 1000) / 1000;
    }
  },
  Hybrid: {
    name: '–ì–∏–±—Ä–∏–¥–Ω—ã–π',
    icon: '‚ö°',
    getRandom: () => {
      const rand1 = randomGenerators.Crypto.getRandom();
      const rand2 = randomGenerators.TimeBased.getRandom();
      const rand3 = Math.random();
      return (rand1 + rand2 + rand3) % 1;
    }
  },
  Weather: {
    name: '–ü–æ–≥–æ–¥–Ω—ã–π',
    icon: 'üåßÔ∏è',
    getRandom: async () => {
      try {
        const mockWeather = {
          humidity: Math.random() * 100,
          pressure: 950 + Math.random() * 100,
          timestamp: Date.now()
        };
        return (mockWeather.humidity + mockWeather.pressure + mockWeather.timestamp) % 1;
      } catch {
        return Math.random();
      }
    }
  }
};

setInterval(async () => {
  timerUpdated = false;
  const chat = chats.find(chat => chat.type === 2);
  if (chat) {
    for (const chat of chats) {
      if (chat.id >= 0 && chat.type == 2) {
        updateGameTime(chat);

        if (!chat.game) {
          startNewGame(chat);
        }
        const lastGame = chat.games[chat.games.length - 1];
        if (chat.gametime <= 5 && chat.games[chat.games.length - 1].stavki.length > 0 && !messageSentFiveSeconds) {
          chat.games[chat.games.length - 1].stavka = false;
          vk.api.messages.send({
            chat_id: chat.id,
            message: '‚è≥ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ –ø—è—Ç–∏ —Å–µ–∫—É–Ω–¥, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è! üö´üí∞',
            random_id: 0
          });
          messageSentFiveSeconds = true;
        }

        if (chat.gametime <= 2 && chat.games[chat.games.length - 1].stavki.length > 0 && !messageSentThreeSeconds) {
          vk.api.messages.send({
            chat_id: chat.id,
            message: '–ò—Ç–∞–∫, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞... üéâ‚ú®',
            random_id: 0
          });
          messageSentThreeSeconds = true;
        }
        
        if (chat.gametime <= 0 && !timerUpdated && chat.games[chat.games.length - 1].stavki.length > 0) {
          messageSentFiveSeconds = false;
          messageSentThreeSeconds = false;
          let win = [];

          chat.games[chat.games.length - 1].stavki.forEach(stavka => {
            win.push({ id: stavka.id, type: stavka.type, amount: stavka.amount });
          });

          win.sort((a, b) => a.type - b.type);

          let text = '';

          for (let i = 0; i < win.length; i++) {
            let user = win[i];
            let gameResult = chat.games[chat.games.length - 1].result;
            let userId = user.id;

            let dbUser = double.find(u => u.id === userId);

            if (dbUser) {
              let userWon = user.type === gameResult;
              let winnings = 0;

              if (userWon) {
                winnings = user.amount * user.type;
                let roundedWinnings = Math.round(winnings);

                if (dbUser.reshim == 1) {
                  text += `‚úÖ [id${user.id}|${dbUser.tag}] —Å—Ç–∞–≤–∫–∞ ${utils.sp(user.amount)} –Ω–∞ x${user.type} –≤—ã–∏–≥—Ä–∞–ª–∞! üèÜ (–ø—Ä–∏–∑ ${utils.sp(roundedWinnings)} ${val4}) üí∞üéâ\n`;
                  dbUser.balance2 += roundedWinnings;

                  if (dbUser.settings.topdon && (user.amount >= 10000)) {
                    dbUser.winStreaks = (dbUser.winStreaks || 0) + 1;
                    const bonus = calculateBonus(dbUser, roundedWinnings, lastGame.result); 
                    const roundedBonus = Math.round(bonus);
                    dbUser.balance2 += roundedBonus;
                    text += `üí• –ë–æ–Ω—É—Å : ${utils.sp(roundedBonus)} ${val4}\n`;
                  }
                } else if (dbUser.reshim == 2) {
                  text += `‚úÖ [id${user.id}|${dbUser.tag}] —Å—Ç–∞–≤–∫–∞ ${utils.sp(user.amount)} –Ω–∞ x${user.type} –≤—ã–∏–≥—Ä–∞–ª–∞! üèÜ (–ø—Ä–∏–∑ ${utils.sp(roundedWinnings)} ${val1}) üí∞üéâ\n`;
                  dbUser.balance += roundedWinnings;

                  if (dbUser.settings.topdon && (user.amount >= 10000)) {
                    dbUser.winStreaks = (dbUser.winStreaks || 0) + 1;
                    const bonus = calculateBonus(dbUser, roundedWinnings, lastGame.result); 
                    const roundedBonus = Math.round(bonus);
                    dbUser.balance += roundedBonus;
                    text += `üí• –ë–æ–Ω—É—Å : ${utils.sp(roundedBonus)} ${val1}\n`;
                  }
                }
              } else {
text += `‚ùå [id${user.id}|${dbUser.tag}] —Å—Ç–∞–≤–∫–∞ ${utils.sp(user.amount)} ${dbUser.reshim == 1 ? val4 : val1} –Ω–∞ x${user.type} –ø—Ä–æ–∏–≥—Ä–∞–ª–∞\n`;                dbUser.winStreaks = 0;
              }
            } else {
              console.error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${user.id2} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ double`);
            }
          }

          let attachment;
          switch (chat.games[chat.games.length - 1].result) {
            case 2: attachment = 'photo-171493284_457790008'; break;
            case 3: attachment = 'photo-171493284_457790009'; break;
            case 5: attachment = 'photo-171493284_457790010'; break;
            case 50: attachment = 'photo-171493284_457790007'; break;
          }

          vk.api.messages.send({
            chat_id: chat.id,
            message: `üé≤‚ú® –í—ã–ø–∞–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å —Ö${chat.games[chat.games.length - 1].result} 

${text}

üîë –•–µ—à –∏–≥—Ä—ã: 
${chat.games[chat.games.length - 1].hash}
‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏: ${chat.games[chat.games.length - 1].proverka}
`,
            attachment: attachment,
            keyboard: JSON.stringify({}),
            random_id: 0
          }); 
        }
      }
    }
    timerUpdated = true;
  }
}, 1000);


async function testDistribution(runs = 1000) {
  const prizes = [
    {value: 2, prob: 0.54, name: "–û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑", color: "\x1b[37m"},
    {value: 3, prob: 0.23, name: "–ù–µ–æ–±—ã—á–Ω—ã–π –ø—Ä–∏–∑", color: "\x1b[36m"},
    {value: 5, prob: 0.20, name: "–†–µ–¥–∫–∏–π –ø—Ä–∏–∑", color: "\x1b[32m"},
    {value: 50, prob: 0.03, name: "–£–ª—å—Ç—Ä–∞-—Ä–µ–¥–∫–∏–π", color: "\x1b[35m"}
  ];

  console.log(`üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (${runs.toLocaleString()} –∏—Ç–µ—Ä–∞—Ü–∏–π)`);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const stats = {
    prizes: {},
    generators: {},
    startTime: Date.now()
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  prizes.forEach(p => {
    stats.prizes[p.value] = {
      count: 0,
      name: p.name,
      color: p.color,
      expectedBar: '‚ñá'.repeat(Math.round(p.prob * 50))
    };
  });

  Object.keys(randomGenerators).forEach(key => {
    stats.generators[key] = 0;
  });

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
  const chat = {games: [], game: false};
  for (let i = 0; i < runs; i++) {
    const result = await startNewGame(chat);
    stats.prizes[result].count++;
    stats.generators[chat.games[0].randomSource]++;
  }

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–æ–≤:');
  prizes.forEach(p => {
    const stat = stats.prizes[p.value];
    const actual = stat.count / runs;
    const actualBar = '‚ñá'.repeat(Math.round(actual * 50));
    
    console.log(
      `${p.value} (${p.color}${p.name}\x1b[0m):\n` +
      `  –û–∂–∏–¥–∞–µ–º–æ: ${(p.prob * 100).toFixed(2).padStart(6)}% | ${stat.expectedBar}\n` +
      `  –ü–æ–ª—É—á–µ–Ω–æ: ${(actual * 100).toFixed(2).padStart(6)}% | ${p.color}${actualBar}\x1b[0m\n` +
      `  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${stat.count.toLocaleString()}`
    );
  });

  console.log('\nüé≤ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã:');
  Object.entries(stats.generators)
    .sort((a, b) => b[1] - a[1])
    .forEach(([key, count]) => {
      const gen = randomGenerators[key];
      const percent = (count / runs * 100).toFixed(1);
      const bar = '‚ñá'.repeat(Math.round(count / runs * 30));
      
      console.log(
        `${gen.icon} ${gen.name.padEnd(16)}: ` +
        `${percent}%`.padStart(6) +
        ` | ${bar} ${count.toLocaleString()}`.padStart(15)
      );
    });

  console.log(`\n‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è: ${Date.now() - stats.startTime} –º—Å`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
let isFirstRun = true;
const interval = setInterval(() => {
  const now = new Date();
  console.log('\n' + '='.repeat(50));
  console.log(`üïí ${isFirstRun ? '–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫' : '–ó–∞–ø—É—Å–∫'} —Ç–µ—Å—Ç–∞ –≤ ${now.toLocaleTimeString()}`);
  testDistribution().catch(console.error);
  isFirstRun = false;
}, 60000);


async function startBot() {
  try {
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    const now = new Date();
    const launchTime = now.toLocaleString('ru-RU', {
      weekday: 'long',
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –í–ö API
    const apiStatus = await checkVkApiStatus();
    const serverTime = await getVkServerTime();

    console.log(`ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
    console.log(`‚è± –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${launchTime}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å VK API: ${apiStatus ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}`);
    console.log(`üïí –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –í–ö: ${serverTime}`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç—ã
    for (const chat of chats) {
      try {
        await vk.api.messages.send({
          chat_id: chat.id,
          message: `üîÑ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω

üìÖ ${launchTime}
üåê VK API: ${apiStatus ? '‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ' : '‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã'}
‚è± –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ –í–ö: ${serverTime}

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`,
          random_id: 0,
          disable_mentions: 1
        });
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç ${chat.id}:`, error.message);
      }
    }

  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
async function checkVkApiStatus() {
  try {
    await vk.api.utils.getServerTime({});
    return true;
  } catch {
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –í–ö
async function getVkServerTime() {
  try {
    const response = await vk.api.utils.getServerTime({});
    return new Date(response * 1000).toLocaleTimeString('ru-RU');
  } catch {
    return '–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ';
  }
}


function datasss() {
  const date = new Date();
  let days = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();
  if (month < 10) month = "0" + month;
  if (days < 10) days = "0" + days;
  return days + "." + month + "." + year;
}

function timesss() {
  let date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  let seconds = date.getSeconds();
  if (hours < 10) hours = "0" + hours;
  if (minutes < 10) minutes = "0" + minutes;
  if (seconds < 10) seconds = "0" + seconds;
  return hours + ":" + minutes + ":" + seconds;
}

async function startNewGame(chat) {
  const prizes = [
    {value: 2, prob: 0.54, name: "–û–±—ã—á–Ω—ã–π –ø—Ä–∏–∑", color: "\x1b[37m"},
    {value: 3, prob: 0.23, name: "–ù–µ–æ–±—ã—á–Ω—ã–π –ø—Ä–∏–∑", color: "\x1b[36m"},
    {value: 5, prob: 0.20, name: "–†–µ–¥–∫–∏–π –ø—Ä–∏–∑", color: "\x1b[32m"},
    {value: 50, prob: 0.03, name: "–£–ª—å—Ç—Ä–∞-—Ä–µ–¥–∫–∏–π", color: "\x1b[35m"}
  ];

  // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
  const generatorKeys = Object.keys(randomGenerators);
  const randomGeneratorKey = generatorKeys[Math.floor(Math.random() * generatorKeys.length)];
  const generator = randomGenerators[randomGeneratorKey];

  // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  let randValue;
  try {
    randValue = generator.getRandom.constructor.name === 'AsyncFunction' 
      ? await generator.getRandom() 
      : generator.getRandom();
  } catch (e) {
    console.error(`–û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ ${generator.name}:`, e);
    randValue = Math.random();
  }

  // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑
  let result;
  let cumulativeProb = 0;
  for (const prize of prizes) {
    cumulativeProb += prize.prob;
    if (randValue <= cumulativeProb) {
      result = prize.value;
      break;
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const proverka = `${result}|${generateRandomString(15)}`;
  const gamehash = await generateCustomHash(proverka);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
  chat.games = [{
    result,
    stavka: true,
    hash: gamehash,
    proverka,
    stavki: [],
    randomSource: randomGeneratorKey,
    generatorIcon: generator.icon,
  }];
  chat.game = true;

  return result;
}












const { updates, snippets } = vk;

vk.updates.on('error', (err) => {
  console.error('–û—à–∏–±–∫–∞ Long Poll:', err);
});



vk.updates.on('chat_invite_user', async (message, bot) => {
  const inviterId = message.senderId;
  const invitedId = message.eventMemberId;
  const chatId = message.chatId;
  const isCommunity = invitedId < 0;
  const absoluteInvitedId = Math.abs(invitedId);
  const isInviterCreator = spolerList.includes(Math.abs(inviterId));

  // –§–æ—Ä–º–∏—Ä—É–µ–º –ª–æ–≥-–æ–±—ä–µ–∫—Ç
  const actionLog = {
      timestamp: new Date().toISOString(),
      inviter: {
          id: inviterId,
          isCreator: isInviterCreator,
          tag: `@id${inviterId}`
      },
      invited: {
          id: invitedId,
          type: isCommunity ? 'community' : 'user',
          tag: isCommunity ? `@club${absoluteInvitedId}` : `@id${invitedId}`
      },
      chatId: chatId,
      action: 'chat_invite',
      status: '–Ω–∞—á–∞—Ç–æ'
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
  const sendLog = async (logData) => {
      try {
          const logMessage = [
              `üîπ ${logData.action.toUpperCase()}`,
              `üë§ –ü—Ä–∏–≥–ª–∞—Å–∏–ª: ${logData.inviter.tag} ${logData.inviter.isCreator ? '(—Å–æ–∑–¥–∞—Ç–µ–ª—å)' : ''}`,
              `üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω: ${logData.invited.tag}`,
              `üîÑ –°—Ç–∞—Ç—É—Å: ${logData.status}`,
              ...(logData.reason ? [`üìå –ü—Ä–∏—á–∏–Ω–∞: ${logData.reason}`] : []),
              ...(logData.error ? [`‚ùó –û—à–∏–±–∫–∞: ${logData.error.message} (–∫–æ–¥ ${logData.error.code})`] : []),
              `‚è± ${logData.timestamp}`
          ].join('\n');

          await vk.api.messages.send({
              chat_id: chatlogi,
              message: logMessage,
              random_id: 0
          });
      } catch (e) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–≥–∞:', e);
      }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
  if (isCommunity) {
      actionLog.status = '–æ–±—Ä–∞–±–æ—Ç–∫–∞';
      await sendLog(actionLog);

      // –ï—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (isInviterCreator) {
          actionLog.status = '–ø—Ä–æ–ø—É—â–µ–Ω–æ';
          actionLog.reason = '–ø—Ä–∏–≥–ª–∞—Å–∏–ª —Å–æ–∑–¥–∞—Ç–µ–ª—å';
          await sendLog(actionLog);
          return;
      }

      try {
          // 1. –ö–∏–∫–∞–µ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
          await vk.api.messages.removeChatUser({
              chat_id: chatId,
              member_id: invitedId
          });

          // 2. –ö–∏–∫–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
          await vk.api.messages.removeChatUser({
              chat_id: chatId,
              user_id: inviterId
          });

          // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
          await vk.api.messages.send({
              chat_id: chatId,
              message: `‚ö† ${actionLog.inviter.tag}, –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å–æ–æ–±—â–µ—Å—Ç–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ!`,
              random_id: 0
          });

          actionLog.status = '—É—Å–ø–µ—à–Ω–æ';
          actionLog.details = '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –∫–∏–∫–Ω—É—Ç—ã';
          await sendLog(actionLog);

      } catch (error) {
          actionLog.status = '–æ—à–∏–±–∫–∞';
          actionLog.error = {
              code: error.code,
              message: error.message
          };
          await sendLog(actionLog);
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ:', error);
      }
      return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  actionLog.status = '–æ–±—Ä–∞–±–æ—Ç–∫–∞';
  await sendLog(actionLog);

  let inviter = double.find(x => x.id === inviterId);
  let invitedUser = double.find(x => x.id === invitedId);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
  if (!inviter) {
      actionLog.status = '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ';
      actionLog.reason = '–ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω';
      await sendLog(actionLog);
      await bot('–í—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
      return;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∏–∫-–ª–∏—Å—Ç
  if (invitedUser?.kik) {
      try {
          await vk.api.messages.removeChatUser({
              chat_id: chatId,
              user_id: invitedId
          });
          actionLog.status = '–∫–∏–∫–Ω—É—Ç';
          actionLog.reason = '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–∏–∫-–ª–∏—Å—Ç–µ';
          await sendLog(actionLog);
          await bot('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞');
      } catch (error) {
          actionLog.status = '–æ—à–∏–±–∫–∞';
          actionLog.error = {
              code: error.code,
              message: error.message
          };
          await sendLog(actionLog);
          await bot('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ:', error);
      }
      return;
  }

  // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
  const reward = 1000;
  inviter.balance2 += reward;

  try {
      await vk.api.messages.send({
          user_id: inviter.id,
          message: `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${utils.sp(reward)} ${val4} –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!`,
          random_id: 0
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
      fs.writeFileSync('./database/users.json', JSON.stringify(double, null, 2));
      
      actionLog.status = '–Ω–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞';
      actionLog.details = `–Ω–∞—á–∏—Å–ª–µ–Ω–æ ${reward} ${val4}`;
      await sendLog(actionLog);

  } catch (error) {
      actionLog.status = '–æ—à–∏–±–∫–∞';
      actionLog.error = {
          code: error.code,
          message: error.message
      };
      await sendLog(actionLog);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã:', error);
  }
});





let messageCount = 0; // –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
let captchaThreshold = getRandomInt(10, 200); // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–ø—á–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
function getRandomInt(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏
function generateCaptcha() {
  const examples = [
    { expression: '2 + 2', answer: 2 + 2 },
    { expression: '8 + 2', answer: 8 + 2 },
    { expression: '10 - 5', answer: 10 - 5 },
    { expression: '4 * 2', answer: 4 * 2 },
    { expression: '3 * 2 + 5', answer: 3 * 2 + 5 },
    { expression: '20 / 5', answer: 20 / 5 },
    { expression: '15 + 10', answer: 15 + 10 },
    { expression: '50 - 25', answer: 50 - 25 },
    { expression: '6 * 7', answer: 6 * 7 },
    { expression: '9 / 3', answer: 9 / 3 },
    { expression: '5 + 3 * 2', answer: 5 + 3 * 2 },
    { expression: '(8 + 4) / 2', answer: (8 + 4) / 2 },
    { expression: '12 - (3 + 1)', answer: 12 - (3 + 1) },
    { expression: '2 * (3 + 4)', answer: 2 * (3 + 4) },
    { expression: '18 / (2 + 4)', answer: 18 / (2 + 4) },
    { expression: '7 * 3 - 4', answer: 7 * 3 - 4 },

  ];

  const randomExample = examples[Math.floor(Math.random() * examples.length)];
  return randomExample; 
}




function logMessage(message) {
  const userId = message.user.uid;

  const logDate = new Date();

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  const formattedDate = `${addZero(logDate.getDate())}.${addZero(logDate.getMonth() + 1)}.${logDate.getFullYear()}`;
  const formattedTime = `${addZero(logDate.getHours())}:${addZero(logDate.getMinutes())}:${addZero(logDate.getSeconds())}`;
  const formattedDateTime = `${formattedDate}, ${formattedTime}`;

  const logEntry = {
    time: formattedDateTime, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
    msg: message.text
  };

  // 1. –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª (logi.txt)
  const fileLogString = `${userId} | ${formattedDateTime} | ${message.text}\n`;
  fs.appendFile('logi.txt', fileLogString, (err) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª logi.txt:', err);
    }
  });

  // 2. –ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç—å (–æ–±—ä–µ–∫—Ç log)
  if (!log[userId]) {
    log[userId] = [];
  }

  log[userId].push({
    time: `üïí –í—Ä–µ–º—è: ${formattedDateTime}`, //–°–æ—Ö—Ä–∞–Ω—è–µ–º  –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    msg: `‚è© –ö–æ–º–∞–Ω–¥–∞: ¬´${message.text}¬ª`
  });

  //–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
  if (log[userId].length > 20) {
    log[userId] = log[userId].slice(-20); // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20
  }

  // –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è (–µ—Å–ª–∏ message.text –µ—Å—Ç—å, —Ç–æ +1 sms, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ aktiv)
  if (message.text) {
    message.user.sms += 1;
  }
  message.user.aktiv = `${datasss()}, ${timesss()}`;
}

const userMessageHistory = new Map(); 

const MESSAGE_HISTORY_LENGTH = 6;  
const TIME_WINDOW = 5000; 
const MAX_MESSAGES = 5;  

const lastMessageTime = new Map(); // Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const lastMessageText = new Map(); 
const lastMessageSenderId = new Map();
const cooldownTime = 1400; 

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
const statsPath = path.join(__dirname, 'commandStats.json');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initStatsFile() {
  if (!fs.existsSync(statsPath)) {
    fs.writeFileSync(statsPath, '{}', 'utf8');
    return {};
  }
  
  try {
    return JSON.parse(fs.readFileSync(statsPath, 'utf8'));
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π:', e);
    fs.writeFileSync(statsPath, '{}', 'utf8');
    return {};
  }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
let commandStats = initStatsFile();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function saveStats() {
  fs.writeFileSync(statsPath, JSON.stringify(commandStats, null, 2), 'utf8');
}














loadCommands().then(() => {
  updates.on('message_new', async (message) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message.text);

     if (Number(message.senderId) <= 0) return;


    let userId = message.peerId || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';


  const now = Date.now();


const previousMessageText = lastMessageText.get(userId) || null;
const previousSenderId = lastMessageSenderId.get(userId) || null;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏ –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å cooldown
if (previousMessageText === message.text && 
    previousSenderId === message.senderId && 
    lastMessageTime.has(userId) && 
    (now - lastMessageTime.get(userId)) < cooldownTime) {
    
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ (–∏–¥–µ–Ω—Ç–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –∏ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ): ${message.text}`);
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
}

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  lastMessageTime.set(userId, now);
  lastMessageText.set(userId, message.text);

    const groupInfo = await vk.api.call('groups.getById', {
      access_token: tokenData.token,
      v: '5.131',
    });
  
    if (!groupInfo || groupInfo.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    }
  
    const groupId = groupInfo[0].id;

    const groupName = groupInfo[0].name;

    // if (message.chat && message.chat.type !== 0 &&  (message.chatId === undefined || (message.chatId !== 95 && message.chatId !== 96))) {return;}
    
if (/\[@club${groupId}|(.*)\]/i.test(message.text)) message.text = message.text.replace(/\[@club${groupId}|(.*)\]/ig, '').trim();
  
    if (!chats.find(x => x.id === message.chatId)) {
      if (message.isChat) {
        chats.push({
          id: message.chatId,
          type: 1,
          uid: chats.length,
          antispam: true,
          statuemoney: 0,
          statuepeople: 0,
          statuemsg: 0,
          statuemoneylvl: 0,
          statuepeoplelvl: 0,
          statuemsglvl: 0,
          reg: new Date(),
          priz: false,
          start: false,
          gametime: 60,
          game: false,
          igra: false, 
          games: []
        })

        message.chat = chats.find(x => x.id === message.chatId)
      } 
    }

    if (!double.find(x => x.id === message.senderId) && !message.isChat) {

      const [user_info] = await vk.api.users.get({ user_id: message.senderId });

      const date = new Date();

      double.push({
        id: message.senderId,
        id2: message.senderId,
        tag: user_info.first_name,
        balance: 5000,
        mention: true,
        uid: double.length,
        winStreaks: 0,
        balance2: 0,
        ch: 0,
        vopros: "-",
        ostat: 0,
        bank: 0,
        bilet: 0,
        btc: 0,
        farm_btc: 0,
        videocard_dg: 0,
        biz: 0,
        energy: 10,
        maxenergy: 10,
        sataka: 1,
        bossyr: 0,
        pismo: 0,
        refcount: 0,
        ref: false,
        iznos: 0,
        bral: 86400000,
        tema: 1,
        parkedLength: 1,
        arend: {
          pk: 0,
          dom: 0,
          yaxta: 0,
          tel: 0,
          vert: 0,
          sam: 0,
          instrm: 0,
          kvar: 0,
        },
        now: {
          kv1: false,
          kv2: false,
          kv3: false,
          kv4: false,
          kv5: false,
          kv6: false,
          kv7: false,
          kv8: false,
          kv9: false,
          kv10: false,
          kv11: false,
          kv12: false,
          kv13: false,
          kv14: false,
          kv15: false,
          kv16: false,
          kv17: false,
          kv18: false,
          kv19: false,
          kv: false,
          kv20: false,
        },
        stock: {
          status: "–ò–≥—Ä–æ–∫",
          stpban: "–ù–µ—Ç",
          strban: "–ù–µ—Ç",
          stban: "–ù–µ—Ç",
          bantop: "–ù–µ—Ç",
        },
        astats: {
          warn: 0,
          blocked: false,
          reports: 0,
          bans: 0,
          rbans: 0,
          pbans: 0,
          balance: 0,
          bank: 0,
          astat: true,
          fakeid: double.length,
          tema: 1,
          kd: 0,
          car: false,
          yacht: false,
          helicopter: false,
          airplane: false,
          homes: false,
          apartment: false,
          videocard: false,
          bad: 0,
          norm: 0,
        },
        rub: 0,
        rubli: 0,
        sprcoin: 0,
        dcoins: 0,
        rating: 0,
        gon: 0,
        bans: {
          ban: false,
          rban: false,
          pban: false,
          bantimer: 0,
          rbantimer: 0,
          reason: "",
        },
        c1: 0,
        c2: 0,
        c3: 0,
        c4: 0,
        c5: 0,
        c6: 0,
        c7: 0,
        c8: 0,
        c9: 0,
        c10: 0,
        c11: 0,
        possilka1: 0,
        possilka2: 0,
        possilka3: 0,
        sound: 0,
        soundrating: 0,
        autosound: 0,
        tree: 0,
        leaf: 0,
        irrigation: 0,
        leafpribil: 0,
        minertool: 0,
        clanid: false,
        aktiv: 0,
        ruds: {
          zhelezo: 0,
          zoloto: 0,
          almaz: 0,
          materia: 0,
          obsidian: 0,
          plazma: 0,
          antimateria: 0,
        },
        procent: {
          clock: 0,
        },
        timers: {
          hasWorked: false,
          bonus: false,
          bonus2: false,
          vipbonus: false,
          prembonus: false,
          titanbonus: false,
          imperatorbonus: false,
          poxod: false,
          podarok: false,
          report: false,
          ban: false,
        },
        captcha: {
          vid: false,
          otvet: false,
          primer: false,
          pred: 0,
          primer2: 0,
        },
        work: 0,
        lte2: false,
        bantop: false,
        notifications: true,
        promo: false,
        opit: 0,
        exp: 1,
        level: 1,

        regDate: `${date.getDate()}.${date.getMonth() + 1
          }.${date.getFullYear()}, ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`,

        settings: {
          busi: false,
        },
        scar: {
          gosnomer: "undefined",
          gontime: false,
          prok_1: 1,
          prok_2: 1,
          prok_3: 1,
          prok_4: 1,
          prok_5: 1,
          prok_6: 1,
        },
        transport: {
          car: 0,
          yacht: 0,
          airplane: 0,
          helicopter: 0,
        },
        settings: {
          adm: 0,
          vip: false,
          premium: false,
          titan: false,
          imperator: false,
          topdon: false,
          joker: false,
          busi: false,
          king: false,
        },
        inf: false,
        infcas: 10,
        realty: {
          home: 0,
          apartment: 0,
          basement: false,
        },
        misc: {
          phone: 0,
          computer: 0,
          clock: 0,
          farm: 0,
          farm_count: 0,
          videocard_count: 0,
          videocard: 0,
        },
        pet: {
          lvl: 0,
          poterl: false,
        },
        marriage: {
          partner: 0,
          requests: [],
        },
        limitadd: {
          nicklimitadd: 16,
          banklimitadd: 50000000,
          timeradd: utils.time(),
          playerlimitadd: 50000000,
          sentadd: 0,
          paylimitadd: 50000000,
          farmlimitadd: 100,
          videocardlimitadd: 10,
        },
        limit: {
          nicklimit: 16,
          banklimit: 50000000,
          timer: utils.time(),
          playerlimit: 50000000,
          sent: 0,
          paylimit: 50000000,
          farmlimit: 100,
          videocardlimit: 10,
        },
        fir: 1.0,
        fertilizer: 0,
        water: 0,
        gift: 0,
        questcasino: 0,
        firstmsg: true,
        questcup: 0,
        questrussion: 0,
        questracer: 0,
        questdonat: 0,
        questminer: 0,
        questbrak: false,
        questhack: 0,
        questclan: false,
        questautosound: 0,
        questtictactoe: 0,
        questfollow: false,
        questdamagedealer: false,
        questbosspower: false,
        questallfucker: false,
        questbasket: 0,
        questcup2: 0,
        questrussion2: 0,
        questracer2: 0,
        questdonat2: 0,
        questminer2: 0,
        questtaxi: 0,
        questhack2: 0,
        questtrade: 0,
        questautosound2: 0,
        questtictactoe2: 0,
        questpremcase: false,
        questdamagedealer2: 0,
        questbosspower2: false,
        questallfucker2: false,
        prazdnikbussines: false,
        march8: false,
        stars1: false,
        stars2: false,
        stars3: false,
        stars4: false,
        stars5: false,
        ball: 0,
        petlim: false,
        antiget: false,
        lockdown: 0,
        kazna: 0,
        pay: 0,
        povesil: 0,
        gir: 0,
        arubli: 0,
        apromo: false,
        admid: false,
        rep: false,
        notif: {
          one: false,
        },
        time: {
          one: 0,
        },
        sms: 0,
        valentinki: 1,
        lim: 0,
        business: [],
        business2: [],

        tuk: 1,

        lastVisit: 0,

        photo: "",

        notifications: true,

        lastbet: 1,
        status: {
          work: false,
          gon: false,
          boss: false,
          mainer: false,
          rich: false,
        },
        timers: {
          bonus: false,
        },

      });
      const foundUser = double.find(x => x.id === message.senderId);


      message.user = double.find(x => x.id === message.senderId);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      if (message.referralSource && message.referralValue) {
        if (message.user.ref) {
          return message.send(`‚ö† –í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.`);
        }

        const referrerId = Number(message.referralSource);
        const referrer = await double.find(x => x.id === referrerId);
        const activatorInfo = `–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª: @id${message.user.id} (${message.user.tag})`;

        if (!referrer) return message.send(`‚ö† –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.`);

        message.user.ref = true;
        const multiply = utils.pick([1, 2, 3, 4]);
        referrer.refcount += 1;
        referrer.fertilizer += 2;
        referrer.water += 2;

        // –ù–∞–≥—Ä–∞–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        let rewardMessage = "";
        
        if (referrer.refcount < 10) {
          switch (multiply) {
            case 1:
              referrer.c3 += 1;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω 1 –¥–æ–Ω–∞—Ç-–∫–µ–π—Å";
              break;
            case 2:
              referrer.balance += 10000000;
              rewardMessage = `–Ω–∞—á–∏—Å–ª–µ–Ω–æ 10.000.000 ${val1}`;
              break;
            case 3:
              referrer.c2 += 3;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –ó–æ–ª–æ—Ç—ã—Ö-–∫–µ–π—Å–∞";
              break;
            case 4:
              referrer.rubli += 1;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 1 —Ä—É–±–ª—å";
              break;
          }
        } 
        else if (referrer.refcount >= 10 && referrer.refcount < 100) {
          switch (multiply) {
            case 1:
              referrer.c3 += 2;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–∞";
              break;
            case 2:
              referrer.balance += 20000000;
              rewardMessage = `–Ω–∞—á–∏—Å–ª–µ–Ω–æ 20.000.000 ${val1}`;
              break;
            case 3:
              referrer.c2 += 5;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 5 –ó–æ–ª–æ—Ç—ã—Ö-–∫–µ–π—Å–æ–≤";
              break;
            case 4:
              referrer.rubli += 2;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 —Ä—É–±–ª—è";
              break;
          }
        } 
        else if (referrer.refcount >= 100 && referrer.refcount != 666) {
          switch (multiply) {
            case 1:
              referrer.c3 += 3;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–∞";
              break;
            case 2:
              referrer.balance += 50000000;
              rewardMessage = `–Ω–∞—á–∏—Å–ª–µ–Ω–æ 50.000.000 ${val1}`;
              break;
            case 3:
              referrer.c2 += 10;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 10 –ó–æ–ª–æ—Ç—ã—Ö-–∫–µ–π—Å–æ–≤";
              break;
            case 4:
              referrer.rubli += 3;
              rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–æ 3 —Ä—É–±–ª—è";
              break;
          }
        }

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ 666 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if (referrer.refcount == 666) {
          referrer.stars5 = true;
          rewardMessage = "–Ω–∞—á–∏—Å–ª–µ–Ω–∞ –ª—É—á—à–∞—è –∑–≤–µ–∑–¥–∞";
        }

        // –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–∞–∂–¥—ã–µ 20 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        if (referrer.refcount % 20 == 0) {
          referrer.c6 += 1;
          if (referrer.notifications) {
            await vk.api.messages.send({
              user_id: referrer.id,
              message: `–£–í–ï–î–û–ú–õ–ï–ù–ò–ï ‚úÖ\n` +
                `‚ñ∂ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω 1 –°–µ–∫—Ä–µ—Ç–Ω—ã–π-–∫–µ–π—Å –∑–∞ —Ç–æ —á—Ç–æ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n` +
                `${activatorInfo}\n` +
                `üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
              keyboard: JSON.stringify({
                "inline": true,
                "buttons": [[{
                  "action": {
                    "type": "text",
                    "payload": JSON.stringify({ command: "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª" }),
                    "label": "üîï"
                  },
                  "color": "negative"
                }]]
              }),
              random_id: 0
            });
          }
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º—É
        if (referrer.notifications && rewardMessage) {
          await vk.api.messages.send({
            user_id: referrer.id,
            message: `–£–í–ï–î–û–ú–õ–ï–ù–ò–ï ‚úÖ\n` +
              `‚ñ∂ –í–∞–º ${rewardMessage} –∑–∞ —Ç–æ —á—Ç–æ –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –≤–∞—à–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n` +
              `${activatorInfo}\n` +
              `üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.`,
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [[{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({ command: "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª" }),
                  "label": "üîï"
                },
                "color": "negative"
              }]]
            }),
            random_id: 0
          });
        

        // –ù–∞–≥—Ä–∞–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        message.user.c3 += 2;
        return message.send(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ! –ù–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ 2 –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–æ–≤! üéÅ‚ú®`);
      }

        try {
          await vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚Ä¢ –£—Ä–∞, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü•∞\n- üë§ ID: @id${foundUser.id}\nüë§ UID: ${foundUser.uid}`,
            random_id: 0
          });
        
          return message.send(
            `–ü—Ä–∏–≤–µ—Ç! üëãüòÉ\n\n` +
            `‚ôªÔ∏è @club${groupId} (${groupName}) ‚Äî –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏! üéÆüî•\n` +
            `ü§ó –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üåü\n` +
            `üëâ –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã. üìú`,
            {
              keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                  [{
                    "action": {
                      "type": "text",
                      "payload": JSON.stringify({ command: `–ø–æ–º–æ—â—å` }),
                      "label": `‚ôªÔ∏è –ü–æ–º–æ—â—å`
                    },
                    "color": "positive"
                  }],
                  [{
                    action: {
                      type: "text",
                      payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                      label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                    },
                    color: "positive"
                  }]
                ]
              })
            }
          );
        } catch (error) {
          console.error(error); // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        
          return message.send(
            `–ü—Ä–∏–≤–µ—Ç! üëãüòÉ\n\n` +
            `‚ôªÔ∏è @club${groupId} (${groupName}) ‚Äî –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏! üéÆüî•\n` +
            `ü§ó –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üåü\n` +
            `üëâ –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã. üìú`,
            {
              keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                  [{
                    "action": {
                      "type": "text",
                      "payload": JSON.stringify({ command: `–ø–æ–º–æ—â—å` }),
                      "label": `‚ôªÔ∏è –ü–æ–º–æ—â—å`
                    },
                    "color": "positive"
                  }],
                  [{
                    action: {
                      type: "text",
                      payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                      label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                    },
                    color: "positive"
                  }]
                ]
              })
            }
          );
        }


      } else {
        try {
          await vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚Ä¢ –£—Ä–∞, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü•∞\n- üë§ ID: @id${foundUser.id}
              üë§ UID: ${foundUser.uid}`,
            random_id: 0
          });
          return message.send(
            `–ü—Ä–∏–≤–µ—Ç! üëãüòÉ\n\n` +
            `‚ôªÔ∏è @club${groupId} (${groupName}) ‚Äî –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏! üéÆüî•\n` +
            `ü§ó –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üåü\n` +
            `üëâ –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã. üìú`,
            {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `—Ä–µ—Ñ 0` }),
                    "label": `–ü—Ä–æ–º–æ (${groupName})`
                  },
                  "color": "positive"
                }
              ],
              [{
                action: {
                  type: "text",
                  payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                  label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                },
                color: "primary"
              }],
              [
                {
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø–æ–º–æ—â—å` }),
                    "label": `‚ôªÔ∏è –ü–æ–º–æ—â—å`
                  },
                  "color": "positive"
                }
              ]
              ]
            
            })
          }
          )
        } catch  {
          return message.send(
            `–ü—Ä–∏–≤–µ—Ç! üëãüòÉ\n\n` +
            `‚ôªÔ∏è @club${groupId} (${groupName}) ‚Äî –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏! üéÆüî•\n` +
            `ü§ó –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üåü\n` +
            `üëâ –ù–∞–ø–∏—à–∏—Ç–µ ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã. üìú`,
            {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                  [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `—Ä–µ—Ñ 0` }),
                    "label": `–ü—Ä–æ–º–æ (${groupName})`
                  },
                  "color": "positive"
                },
              ],
              [{
                action: {
                  type: "text",
                  payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                  label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                },
                color: "primary"
              }],
              [
                {
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø–æ–º–æ—â—å` }),
                    "label": `‚ôªÔ∏è –ü–æ–º–æ—â—å`
                  },
                  "color": "positive"
                }
              ]
              ]
            })
          }
          )
          console.log('')
        }

        let priglostext = ''
      }
      
    }



    if (message.messagePayload && message.messagePayload.command) {
      message.text = message.messagePayload.command;
    }




    botinfo.messagescount += 1;

    message.user = double.find(x => x.id === message.senderId);


    message.chat = chats.find(x => x.id === message.chatId)






let otvet;
let botResponseText = null;

const bot = async (text, params = {}) => {
    if (!message || !message.send) {
        console.error("–û—à–∏–±–∫–∞: message –∏–ª–∏ message.send –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã");
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ";
    }

    const userId = message.user?.uid || "unknown";
    const userTag = message.user?.tag || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
    const userMention = message.user?.mention ? `@id${message.user.id} (${userTag})` : userTag;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    const fullMessage = `${userMention}, ${typeof text === "object" ? JSON.stringify(text) : text}`;

    try {
        if (fullMessage.length < 4000) {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            await message.send(fullMessage, params);
            return fullMessage;
        } else {
            // –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            const firstPart = fullMessage.substring(0, 4000);
            await message.send(firstPart, params);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
            for (let i = 1; i < Math.ceil(fullMessage.length / 4000); i++) {
                const part = fullMessage.substring(i * 4000, (i + 1) * 4000);
                await message.send(part, params);
                await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ 500 –º—Å
            }
            
            return `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (${Math.ceil(fullMessage.length / 4000)} —á–∞—Å—Ç–µ–π)`;
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
        return `–û—à–∏–±–∫–∞: ${error.message}`;
    }
};









// –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥—ã
const command = commands.find(x => {
  if (x[0] instanceof RegExp) {
    return x[0].test(message.text);
  } else if (typeof x[0] === 'function') {
    return x[0](message, bot);
  } else if (typeof x[0] === 'string') {
    return message.text === x[0];
  }
  return false;
});

// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if (command) {
  updateCommandStats(command); // –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É, –∞ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–µ –∏–º—è
}

function getSimplifiedCommandName(commandPattern) {
  console.log('–ü–æ–ª—É—á–µ–Ω commandPattern:', commandPattern);
  
  let result;
  
  // –î–ª—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
  if (typeof commandPattern === 'string') {
    result = commandPattern.toLowerCase().trim();
    console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏. –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    return result;
  }

  // –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
  if (commandPattern instanceof RegExp) {
    const regexStr = commandPattern.toString();
    console.log('–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:', regexStr);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥
    if (regexStr.includes('–±–æ–Ω—É—Å')) {
      result = '–±–æ–Ω—É—Å';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–±–æ–Ω—É—Å". –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    }
    if (regexStr.includes('–ø—Ä–æ—Ñ–∏–ª—å')) {
      result = '–ø—Ä–æ—Ñ–∏–ª—å';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–ø—Ä–æ—Ñ–∏–ª—å". –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    }
    if (regexStr.includes('–±–∞–ª–∞–Ω—Å')) {
      result = '–±–∞–ª–∞–Ω—Å';
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ "–±–∞–ª–∞–Ω—Å". –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    }
    
    // –û–±—â–∏–π —Å–ª—É—á–∞–π - –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–≤–æ–µ —Ä—É—Å—Å–∫–æ–µ/–∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ
    const firstWordMatch = regexStr.match(/[–∞-—è—ëa-z]+/i);
    if (firstWordMatch) {
      result = firstWordMatch[0].toLowerCase();
      console.log('–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      return result;
    }
  }

  // –î–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤
  console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–≤—Ä–∞—â–∞–µ–º "unknown_command"');
  return 'unknown_command';
}
 
function updateCommandStats(command) {
  const commandName = getSimplifiedCommandName(command[0]); // command[0] - —ç—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω –∫–æ–º–∞–Ω–¥—ã
  commandStats[commandName] = (commandStats[commandName] || 0) + 1;
  saveStats();
}


    if (double.find(x => x.id == message.senderId) && command) {
      message.user.limsms +=1
      console.log(`–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞: ${command[command.length - 1]}`);
    }


    if (botinfo.wait && double.find(x => x.id == message.senderId)) {
      if (command) {
        const userIdString = String(message.user.id);
        let hasPermission = false;
    
        if (spoler) {
          const spolerValues = Object.values(spoler).map(String);
          hasPermission = spolerValues.includes(userIdString);
        }
    
        if (!hasPermission) {
          await bot(
            `üöß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã üöß
        
        ${botinfo.prichina || '-'}.`,
            { attachment: 'doc690927947_689824058' }
          );
          await message.send({ sticker_id: 108205 });
          return;
        }
      }
    }



    if (double.find(x => x.id == message.senderId) && message.isChat && !botinfo.wait) {
      if (message.chat.antispam) {
          const userId = message.senderId;
          const now = Date.now();
  
          // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
          const messageHistory = userMessageHistory.get(userId) || [];
  
          messageHistory.push(now);
  
          // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏—Å—Ç–æ—Ä–∏—è –Ω–µ —Ä–æ—Å–ª–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
          while (messageHistory.length > 0 && messageHistory[0] <= (now - TIME_WINDOW)) {
              messageHistory.shift();
          }
  
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
          userMessageHistory.set(userId, messageHistory);
  
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–∞–º–µ—Ä–æ–º –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
          const hasPermission = Object.values(spoler).includes(String(userId));
          
          if (messageHistory.length > MAX_MESSAGES) {
              if (hasPermission) {
                  // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
return bot(`–ü—Ä–æ—Å—Ç–∏ –º–µ–Ω—è, —è –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–µ–±—è.`)
              } else {
                  try {
                      await vk.api.messages.removeChatUser({
                          chat_id: message.chatId,  // ID —á–∞—Ç–∞
                          user_id: userId            // ID —Å–ø–∞–º–µ—Ä–∞
                      });
  
                      vk.api.messages.send({
                          chat_id: chatlogi,
                          message: `
  üö®–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üö®
  
  —Å–ø–∞–º–µ—Ä- *id${userId} !`,
                          random_id: 0
                      });
  
                  } catch (error) {
                      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ [id${userId}]:`, error);
                      vk.api.messages.send({
                          chatlogi,
                          message: `
  üö®–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏üö®
  –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º–µ—Ä *id${userId}, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∫–∏–∫–Ω—É—Ç—å –µ–≥–æ! –û—à–∏–±–∫–∞: ${error.message}`,
                          random_id: 0
                      });
                  }
              }
  
              return; 
          }
      }
  }
    if (!double.find(x => x.id === message.senderId) && message.isChat && command) {
      await message.send(`–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è! üòä`)
    }

    const startPingTime = performance.now();

if (double.find(x => x.id == message.senderId) && (message.user.settings.adm >= 6 && message.user.captcha.vid !== false)) {

  message.user.captcha.vid = false;
  message.user.captcha.otvet = false;
  message.user.captcha.primer = false;
  message.user.captcha.pred = 0;
}

    if (command && double.find(x => x.id === message.senderId)) {
      messageCount++;
      if (message.user.captcha.vid !== false) {
        const text = message.text.trim();
        const parts = text.split(' ');
    
        const answer = parts[1];
        console.log(`–û—Ç–≤–µ—Ç: ${answer}, –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${message.user.captcha.otvet}`);
        if (!isNaN(parseFloat(answer)) && parseFloat(answer) === message.user.captcha.otvet) {
          message.user.captcha.vid = false;
          message.user.captcha.otvet = false;
          message.user.captcha.primer = false;
          message.user.captcha.pred = 0;
    
          return bot(`–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞! ‚úÖ`);
        } else {
          if (message.user.captcha.vid == 1) {
            return bot(
              `–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚ùå\n–†–µ—à–∏—Ç–µ –∏ –≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç "–∫–∞–ø—á–∞ ${message.user.captcha.primer2}", —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞!`,
              {
                keyboard: JSON.stringify({
                  inline: true,
                  buttons: [
                    [
                      {
                        action: {
                          type: "text",
                          payload: JSON.stringify({ command: `–∫–∞–ø—á–∞ ${message.user.captcha.otvet}` }),
                          label: "‚úÖ –Ø –Ω–µ —Ä–æ–±–æ—Ç",
                        },
                        color: "positive",
                      },
                    ],
                  ],
                }),
              }
            );
          } else {
            if (messageCount >= captchaThreshold) {
              const captcha = generateCaptcha();
              message.user.captcha.otvet = captcha.answer;
              message.user.captcha.primer2 = captcha.expression;
              message.user.captcha.vid = 1;
              messageCount = 0;
              captchaThreshold = getRandomInt(50, 500);
              return bot(`–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚ùå\n–í–≤–µ–¥–∏—Ç–µ "–∫–∞–ø—á–∞ ${captcha.expression}", —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞!`);
            }
          }
        }
      }
    }


    if (command) {
      const currentTime = new Date();
      user.lastVisit = `${currentTime.getDate()}.${currentTime.getMonth() + 1
        }.${currentTime.getFullYear()}, ${currentTime.getHours()}:${currentTime.getMinutes()}:${currentTime.getSeconds()}`;
    }


    if (command) {
    if (message.isChat) {
      if (message.chat.type == 5) {
        return bot (`üò¢ –í–∞—à —á–∞—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω. üö´`)
      }
    }
  }



    if (double.find(x => x.id === message.senderId)) {
      if (message.user.bans.ban) {
        if (message.isChat) {
          return;
        } else {
          const banReason = message.user.bans.reason || "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
          const datka = new Date(message.user.bans.bantimer);
          await message.send(`üö´ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–∞–Ω–µ!\n\nüí¨ –ü—Ä–∏—á–∏–Ω–∞: ${banReason}\n\n‚è≥ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${datka.getHours()}:${datka.getMinutes()}:${datka.getSeconds()} ${datka.getDate()}.${datka.getMonth() + 1}.${datka.getFullYear()}`);
          return;
        }
      }
    }

    if (double.find(x => x.id === message.senderId)) {
if (!command && !message.isChat && !message.user.bans.ban) {
  const userText = message.text.toLowerCase().trim();
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
  const getAllUniqueCommands = () => {
    const commandNames = new Set();
    
    // 1. –ë–µ—Ä–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ commands
    if (Array.isArray(commands)) {
      commands.forEach(cmd => {
        if (cmd.alias && Array.isArray(cmd.alias)) {
          cmd.alias.forEach(alias => {
            if (typeof alias === 'string' && alias.length > 1) {
              // –û—á–∏—â–∞–µ–º –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
              const cleanAlias = alias.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s]/g, '').trim();
              if (cleanAlias) commandNames.add(cleanAlias.toLowerCase());
            }
          });
        }
      });
    }
    
    // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const cmdDirs = [
      path.join(__dirname, '–∫–æ–º–∞–Ω–¥—ã'),
      path.join(__dirname, '–∞–Ω–∏–º–µ –∫–æ–º–∞–Ω–¥—ã'),
      path.join(__dirname, '—Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã'),
      path.join(__dirname, '–≥–ø—Ç'),
    ];
    
    const scanDirectory = (dir) => {
      try {
        if (!fs.existsSync(dir)) return;
        
        const files = fs.readdirSync(dir);
        files.forEach(file => {
          const filePath = path.join(dir, file);
          const stat = fs.statSync(filePath);
          
          if (stat.isDirectory()) {
            scanDirectory(filePath);
          } else if (file.endsWith('.js')) {
            try {
              const content = fs.readFileSync(filePath, 'utf-8');
              
              // –ò—â–µ–º cmd.hear —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏ - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
              const regex = /cmd\.hear\([^)]*\/[^\/]+\/[^)]*\)/g;
              let match;
              while ((match = regex.exec(content)) !== null) {
                const hearContent = match[0];
                
                // –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
                const slashMatch = hearContent.match(/\/([^\/]+)\//);
                if (slashMatch && slashMatch[1]) {
                  const commandsText = slashMatch[1];
                  // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ | –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
                  commandsText.split('|').forEach(cmd => {
                    const cleanCmd = cmd
                      .replace(/\\/g, '')
                      .replace(/\(\?::[^)]*\)/g, '') // —É–¥–∞–ª—è–µ–º (?:...)
                      .replace(/\([^)]*\)/g, '')     // —É–¥–∞–ª—è–µ–º (...)
                      .replace(/\[[^\]]*\]/g, '')    // —É–¥–∞–ª—è–µ–º [...]
                      .replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\s]/g, '')
                      .trim();
                    if (cleanCmd && cleanCmd.length > 1) {
                      commandNames.add(cleanCmd.toLowerCase());
                    }
                  });
                }
              }
            } catch (readError) {
              console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', filePath, readError);
            }
          }
        });
      } catch (dirError) {
        console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', dir, dirError);
      }
    };

    cmdDirs.forEach(scanDirectory);
    return Array.from(commandNames);
  };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
  const allCommandNames = getAllUniqueCommands();
  
  // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 3)
  const similarCommands = allCommandNames
    .map(name => ({
      name: name,
      score: calculateSimilarityScore(userText, name)
    }))
    .filter(cmd => cmd.score > 0.4)
    .sort((a, b) => b.score - a.score)
    .slice(0, 3)
    .map(cmd => cmd.name);

  let response = `–ö–æ–º–∞–Ω–¥—ã ¬´${message.text}¬ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üòø\n\n`;

  // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  const keyboardButtons = [];

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (similarCommands.length > 0) {
    response += `üîç –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n`;
    
    const similarButtons = similarCommands.map(cmd => ({
      action: {
        type: "text",
        payload: JSON.stringify({ command: cmd }),
        label: cmd
      },
      color: "secondary"
    }));
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboardButtons.push(similarButtons);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏


  const keyboard = {
    inline: true,
    buttons: keyboardButtons
  };

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  await message.send(response, {
    keyboard: JSON.stringify(keyboard)
  });
  return;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ö–æ–∂–µ—Å—Ç–∏
function calculateSimilarityScore(input, target) {
  if (input === target) return 1.0;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ (–ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±—É–∫–≤)
  if (Math.abs(input.length - target.length) <= 2) {
    const distance = levenshteinDistance(input, target);
    const maxLength = Math.max(input.length, target.length);
    const similarity = 1 - (distance / maxLength);
    
    // –í—ã—Å–æ–∫–∏–π –±–∞–ª–ª –∑–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏
    if (similarity > 0.6) return similarity;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
  if (target.includes(input) && input.length >= 3) return 0.7;
  if (input.includes(target) && target.length >= 3) return 0.6;
  
  return 0;
}

function levenshteinDistance(a, b) {
  if (a.length === 0) return b.length;
  if (b.length === 0) return a.length;
  
  const matrix = [];
  for (let i = 0; i <= b.length; i++) matrix[i] = [i];
  for (let j = 0; j <= a.length; j++) matrix[0][j] = j;
  
  for (let i = 1; i <= b.length; i++) {
    for (let j = 1; j <= a.length; j++) {
      matrix[i][j] = b[i - 1] === a[j - 1] 
        ? matrix[i - 1][j - 1]
        : Math.min(matrix[i - 1][j - 1] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j] + 1);
    }
  }
  
  return matrix[b.length][a.length];
}
 

    if (message.isChat) {
      const chat = chats.find(chat => chat.id === message.chatId);
      if (chat) {
        chat.statuemsg += 1;
      }
    }

    

    logMessage(message); 




    const endPingTime = performance.now();
    const pingTime = endPingTime - startPingTime;


    


    if (command && Array.isArray(command) && command[0] && typeof command[1] === 'function') {
      message.args = message.text.match(command[0]);
      if (message.args) {
        console.log("–ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!");
        let otvet; // –û–±—ä—è–≤–ª—è–µ–º otvet –∑–¥–µ—Å—å
        let botResponseText;
        const startPingTime = performance.now();
        try {
          botResponseText = await command[1](message, bot); // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          otvet = botResponseText; // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–µ—Å—å

          const endPingTime = performance.now();
          const pingTime = endPingTime - startPingTime;
    
          console.log(`–ü–∏–Ω–≥: ${pingTime.toFixed(2)} –º—Å.
            (ID: ${message.user.uid}): ${message.text}`);
    
          //  –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
          await vk.api.messages.send({
            chat_id: chatlogi,
            message: `üÜò LOGS üÜò\nüî±
              ID/Nick: ${utils.sp(message.user.uid)},
              @id${message.senderId}(${message.user.tag})\n
              ‚öô –ö–æ–º–∞–Ω–¥–∞: ${message.text}\n
              ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞: ${otvet || '–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n  
              ‚è±Ô∏è –ü–∏–Ω–≥: ${pingTime.toFixed(2)} –º—Å.`, 
            random_id: 0,
          });
    
    
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã:", error);
    
          const endPingTime = performance.now();
          const pingTime = endPingTime - startPingTime;
    
          console.log(`–ü–∏–Ω–≥ (–æ—à–∏–±–∫–∞): ${pingTime.toFixed(2)} –º—Å.
            (ID: ${message.user.uid}): ${message.text}`);
          await vk.api.messages.send({
            chat_id: chatlogi,
            message: `üÜò LOGS - –û–®–ò–ë–ö–ê üÜò\nüî±
                ID/Nick: ${utils.sp(message.user.uid)},
                @id${message.senderId}(${message.user.tag})\n
                ‚öô Command: ${message.text}\n
                ‚ùå –û—à–∏–±–∫–∞: ${error.message}\n
                ‚è±Ô∏è –ü–∏–Ω–≥: ${pingTime.toFixed(2)} –º—Å.`,  // –î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–∏–Ω–≥–∞
            random_id: 0,
          });
    
          botResponseText = `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: ${error.message}`;
          otvet = botResponseText; // –∏ —Ç—É—Ç
        }
      } else {
        console.log("–ê—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
      }
    }
    } else {
return
    }
  });
}).catch(console.error)

 vk.updates.start();
 startBot()

    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');










const userNotified = {};

vk.updates.on("wall_reply_new", async (message) => {

  console.error(message);

  if (message.fromId < 0) {
    return;
  }




  const userId = message.fromId;



  if (!userNotified) {
    userNotified = {};
  }


  const user = double.find(x => x.id === userId);


  if (!user) {

    if (!userNotified[userId]) {
      vk.api.call("wall.createComment", {
        owner_id: message.ownerId,
        post_id: message.objectId,
        reply_to_comment: message.id,
        message: `‚õîÔ∏è –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∏–≥—Ä–æ–∫–æ–º –±–æ—Ç–∞.`
      });

      userNotified[userId] = true;
    }
    return; 
  }
  else {

    if (userNotified[userId]) {
      delete userNotified[userId];
    }
  }



  if (config.fortuna == message.objectId) {

    if (message.text == "–§–æ—Ä—Ç—É–Ω–∞" || message.text == "ajhneyf" || message.text == "—Ñ–æ—Ä—Ç—É–Ω–∞" || message.text == "—Ñ–∞—Ä—Ç" || message.text == "fortune") {

      multiply = utils.pick([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);

      if (multiply == 1) {

        multiply = utils.pick([1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6]);

        if (multiply == 1 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.balance += 50000000;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50.000.000 $ :3 '

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            `,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 50.000.000 $

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {

            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }



        if (multiply == 2 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.balance += 100000000;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100.000.000 $ :3 '

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 100.000.000 $ ${utils.pick(['üòï', 'üòî', 'üò´'])}

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {

            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }



        if (multiply == 3 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.c3 += 2;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2 –î–æ–Ω–∞—Ç –ö–µ–π—Å–∞ :3 –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ '–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3'

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 2 –î–æ–Ω–∞—Ç –∫–µ–π—Å–æ–≤ ${utils.pick(['üòï', 'üòî', 'üò´'])}

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {

            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }

        if (multiply == 4 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.c6 += 1;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å :3 –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ '–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6'

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω 1 –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å ${utils.pick(['üòï', 'üòî', 'üò´'])}

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {

            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }

        if (multiply == 5 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.balance2 += 50000;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50.000 GB :3 

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 50.000 GB ${utils.pick(['üòï', 'üòî', 'üò´'])}

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {


            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }

        if (multiply == 6 && config.fortunacount > 0) {

          config.fortunacount -= 1;

          user.bilet += 50;

          if (user.notifications) vk.api.messages.send({

            user_id: user.id,

            message: `[–£–í–ï–î–û–ú–õ–ï–ù–ò–ï]

            ‚ñ∂ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º –∏ –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50 –±–∏–ª–µ—Ç–æ–≤ :3 

            üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,

            random_id: 0

          });

          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            reply_to_comment: message.id,

            message: `üíû –£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å –≤–∞–º, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ 50 –±–∏–ª–µ—Ç–æ–≤ ${utils.pick(['üòï', 'üòî', 'üò´'])}

            –û—Å—Ç–∞–ª–æ—Å—å - ${config.fortunacount} –ø—Ä–∏–∑–æ–≤.`

          });

          if (config.fortunacount <= 0) {

            vk.api.call("wall.createComment", {

              owner_id: message.ownerId,

              post_id: message.objectId,

              message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

            });

          }

        }

      } else {
        if (config.fortunacount > 0) {

          const emojiList = [
            'ü•∞', 'ü§ë', '‚ù§', 'üòé', 'üòà', 'üéâ', 'üòá',
            'üòÇ', 'üòç', 'üòÆ', 'üòè', 'üòã', 'ü§©', 'üíñ',
            'üòú', 'üò±', 'ü•≥', '‚ú®', 'üî•', 'üíî',
            'üåà', 'üåü', 'üéä', 'üê∂', 'üê±', 'üå∏',
            'üçÄ', 'üçï', 'üç¶', 'üåç', 'üöÄ', 'üåä',
            'ü§†', 'ü¶Ñ', 'ü•á', 'ü¶ã', 'üç©', 'üçâ',
            'üçì', 'üçí', 'üåª', 'üåà', 'üå∫', 'ü¶â',
            'ü¶Å', 'üê∏', 'üê®', 'üêº', 'üê¢', 'üêó',
            'üêï', 'ü¶Ñ', 'üê•', 'üê¶', 'ü¶ö', 'ü¶ô',
            'üçÅ', 'üåæ', 'üçÇ', 'üçÉ', 'ü•≠', 'üçä',
            'üçã', 'üçç', 'üçá', 'üçà', 'üçè', 'üçé',
            'üî•', 'üíØ', 'üìö', 'üìñ', '‚úèÔ∏è', 'üñäÔ∏è',
            'üñãÔ∏è', 'üîë', 'üóùÔ∏è', 'üîÆ', 'üìÖ', 'üìÜ',
            'üóìÔ∏è', 'üìú', 'üìÉ', 'üåê', 'üß≠', '‚è≥',
            'üÜò', 'üöß', '‚ö†Ô∏è', '‚ùó', '‚ùì', 'üîî',
            'üîï', 'üìØ', 'üé∫', 'üéª', 'üé∑', 'üéµ',
            'üé§', 'üéß', 'ü•Å', 'üé∏', 'ü§π‚Äç‚ôÇÔ∏è', 'üï∫',
            'üíÉ', 'üëØ‚Äç‚ôÄÔ∏è', 'üëØ‚Äç‚ôÇÔ∏è', 'üôå', 'üëè', 'üëê',
            'ü§≤', '‚úä', 'üëä', 'üëç', 'üëé', 'ü§ò',
            'ü§ô', 'ü§ù', 'üë•', 'üë§', 'ü§ñ', 'üëæ',
            'üï∑Ô∏è', 'ü¶Ñ', 'üêâ', 'ü¶ï', 'ü¶ñ', 'üê≤',
            'ü¶ê', 'ü¶ë', 'ü¶ï', 'ü¶ñ', 'üêã', 'ü¶à',
            'üê†', 'üêã', 'üêü', 'üê¨', 'ü¶¶', 'üêô',
            'üêö', 'üåä', 'üèùÔ∏è', 'üèñÔ∏è', '‚òÄÔ∏è', 'üå•Ô∏è',
            '‚òÅÔ∏è', 'üåßÔ∏è', '‚õàÔ∏è', 'üå®Ô∏è', '‚ùÑÔ∏è', 'üå™Ô∏è',
            'üåà', 'üåè', 'üåç', 'üåå', 'üî≠', 'üåì',
            'üåï', 'üåñ', 'üåò', 'üåë', 'üåí', 'üåî',
            'üåù', 'üåû', '‚≠ê', 'üå†', 'üí´', 'üåü',
            'ü™ê', 'üåå', '‚ú®', 'üèÜ', 'ü•à', 'ü•â',
            'üéñÔ∏è', 'üéóÔ∏è', 'ü¶æ', 'ü¶ø', 'ü¶µ', 'ü¶∂',
            'üë£', 'ü¶æ', 'üßé‚Äç‚ôÇÔ∏è', 'üßé‚Äç‚ôÄÔ∏è', 'ü§∑‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è',
            'üôá‚Äç‚ôÇÔ∏è', 'üôá‚Äç‚ôÄÔ∏è', 'ü§¶‚Äç‚ôÇÔ∏è', 'ü§¶‚Äç‚ôÄÔ∏è', 'ü§∑‚Äç‚ôÇÔ∏è', 'ü§∑‚Äç‚ôÄÔ∏è',
            'üíÅ‚Äç‚ôÇÔ∏è', 'üíÅ‚Äç‚ôÄÔ∏è', 'üßñ‚Äç‚ôÇÔ∏è', 'üßñ‚Äç‚ôÄÔ∏è', 'üíá‚Äç‚ôÇÔ∏è', 'üíá‚Äç‚ôÄÔ∏è',
            'üíÜ‚Äç‚ôÇÔ∏è', 'üíÜ‚Äç‚ôÄÔ∏è', 'üßò‚Äç‚ôÇÔ∏è', 'üßò‚Äç‚ôÄÔ∏è', 'üö∂‚Äç‚ôÇÔ∏è', 'üö∂‚Äç‚ôÄÔ∏è',
            'üèÉ‚Äç‚ôÇÔ∏è', 'üèÉ‚Äç‚ôÄÔ∏è', 'üßç‚Äç‚ôÇÔ∏è', 'üßç‚Äç‚ôÄÔ∏è', 'üë´', 'üë¨',
            'üë≠', 'ü§∑', 'ü§¶', 'üëè', 'üôå', 'üôè',
            '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'üéæ', '‚õπÔ∏è‚Äç‚ôÇÔ∏è',
            '‚õπÔ∏è‚Äç‚ôÄÔ∏è', 'ü§∏‚Äç‚ôÇÔ∏è', 'ü§∏‚Äç‚ôÄÔ∏è', 'ü§π‚Äç‚ôÇÔ∏è', 'ü§π‚Äç‚ôÄÔ∏è', 'üèä‚Äç‚ôÇÔ∏è',
            'üèä‚Äç‚ôÄÔ∏è', 'üèãÔ∏è‚Äç‚ôÇÔ∏è', 'üèãÔ∏è‚Äç‚ôÄÔ∏è', 'üö¥‚Äç‚ôÇÔ∏è', 'üö¥‚Äç‚ôÄÔ∏è', 'üöµ‚Äç‚ôÇÔ∏è',
            'üöµ‚Äç‚ôÄÔ∏è', 'üßó‚Äç‚ôÇÔ∏è', 'üßó‚Äç‚ôÄÔ∏è', '‚õ∑Ô∏è', 'üèÇ', 'üèÑ‚Äç‚ôÇÔ∏è',
            'üèÑ‚Äç‚ôÄÔ∏è', 'üèá', 'ü§º‚Äç‚ôÇÔ∏è', 'ü§º‚Äç‚ôÄÔ∏è', 'ü§Ω‚Äç‚ôÇÔ∏è', 'ü§Ω‚Äç‚ôÄÔ∏è',
            'üßó‚Äç‚ôÄÔ∏è', 'üßó‚Äç‚ôÇÔ∏è', 'ü§ø', 'üèåÔ∏è‚Äç‚ôÇÔ∏è', 'üèåÔ∏è‚Äç‚ôÄÔ∏è', 'üèè',
            'üèë', 'üèí', 'ü•ç', 'üèπ', 'üé£', 'üéØ',
            '‚õ≥', 'üé≥', 'üèè', 'ü•á', 'ü•à', 'ü•â'
          ];

          function getRandomEmojis() {
            const emojis = [];
            while (emojis.length < 3) {
              const newEmoji = emojiList[Math.floor(Math.random() * emojiList.length)];

              if (!emojis.includes(newEmoji) || (emojis.length < 2 || emojis[emojis.length - 1] !== newEmoji)) {
                emojis.push(newEmoji);
              }
            }
            return emojis.join(' | ');
          }


          const emojiString = getRandomEmojis();

          return vk.api.call("wall.createComment", {
            owner_id: message.ownerId,
            post_id: message.objectId,
            reply_to_comment: message.id,
            message: `–£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, –≤–∞–º –≤—ã–ø–∞–ª–æ ${emojiString} .–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!`
          });
        
        }

        if (config.fortunacount <= 0) {
          vk.api.call("wall.createComment", {

            owner_id: message.ownerId,

            post_id: message.objectId,

            message: `–ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. –í—Å–µ –ø—Ä–∏–∑—ã —Ä–∞–∑—ã–≥—Ä–∞–Ω—ã ü•≥

üîî –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã.`

          });
        }

      }

    }

  }

  if (!user.comments) {
    user.comments = [];
}

const groupInfo = await vk.api.call('groups.getById', {
    access_token: tokenData.token,
    v: '5.131',
});

if (!groupInfo || groupInfo.length === 0) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    return;
}

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    const commentText = message.text;

    if (commentText.length < 10 && message.text !== "—Ñ–æ—Ä—Ç—É–Ω–∞") {
        await vk.api.messages.send({
            user_id: user.id,
            message: 'üò¥ –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º —Å–∫—É—á–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ.',
            random_id: 0
        });
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.id} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫—É—á–Ω–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.`);
        return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

if (!user.comments) {
  user.comments = {};
}

const postId = message.objectId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º objectId –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
const ownerId = message.ownerId; // –ò—Å–ø–æ–ª—å–∑—É–µ–º ownerId –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è

if (user.comments[postId] && message.text !== "—Ñ–æ—Ä—Ç—É–Ω–∞") {
  await vk.api.messages.send({
      user_id: user.id,
      message: 'üö´ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.',
      random_id: 0,
  });
  return;
}

user.comments[postId] = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π

try {
  const postIdentifier = `${ownerId}_${postId}`; 
  
  const postInfo = await usert.api.wall.getById({
      posts: [postIdentifier],
      access_token: tokenData.user
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
  if (postInfo && postInfo.items && postInfo.items.length > 0) {
      const post = postInfo.items[0];
      const postDateTimestamp = post.date * 1000;
      const now = Date.now();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞—Ä –ª–∏ –ø–æ—Å—Ç
      const sevenDays = 7 * 24 * 60 * 60 * 1000; 
      if (now - postDateTimestamp > sevenDays) {
          console.log(`[${new Date().toLocaleTimeString()}] –ü–æ—Å—Ç —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`);
          if (user.notifications) {
              await vk.api.messages.send({
                  user_id: user.id,
                  message: `‚ö† –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±–æ–ª—å—à–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.`,
                  random_id: 0
              });
          }
         
      }

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ—Å—Ç–∞
      let minutesSincePost = Math.floor((now - postDateTimestamp) / (60 * 1000));
      let reward = Math.max(7500 - (minutesSincePost * 250), 250); 

      user.balance2 += reward; // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

      try {
      if (user.now.kv1 && user.now.kv2 && user.now.kv3 && user.now.kv4 && user.now.kv5 && user.now.kv6 && user.now.kv7 && user.now.kv8 && !user.now.kv9) {
        user.now.kv9 = true;
        user.c4 += 1;
      
        await vk.api.messages.send({
          user_id: user.id,
          random_id: 0,
          message: `‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 9 –∑–∞–¥–∞–Ω–∏–µ!
      
      –ù–∞–≥—Ä–∞–¥–∞ - 1 Starr Drop 
      
      üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –≤–µ–¥—å –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—é!`,
          keyboard: JSON.stringify({
            inline: true,
            buttons: [
              [{
                action: {
                  type: "text",
                  payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                  label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                },
                color: "positive"
              }]
            ]
          })
        });
      }
    if (message.text !== "—Ñ–æ—Ä—Ç—É–Ω–∞") {
          await vk.api.messages.send({
              user_id: user.id,
              message: `üí¨ –ó–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${utils.sp(reward)} ${val4}.`,
              random_id: 0
          });
        }
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', error);
      }
  } else {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ:", postInfo);
  }
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
}
});

vk.updates.on("like_add", async (message) => {
  console.error(message);
  if (message.objectType !== "post") return;

  const groupInfo = await vk.api.call('groups.getById', {
      access_token: tokenData.token,
      v: '5.131',
  });

  if (!groupInfo || groupInfo.length === 0) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
      return;
  }

  const groupId = groupInfo[0].id; 

  if (!message.likerId) {
      console.error("User ID not found in the message.");
      return;
  }

  let user = double.find(x => x.id === message.likerId);
  if (!user) {
      console.error(`User with ID ${message.likerId} not found in the double array.`);
      return;
  }

  if (!user.likes) {
      user.likes = {};
  }

  const postId = message.objectId; 
  const ownerId = message.objectOwnerId; 

  if (user.likes[postId]) {
      await vk.api.messages.send({
          user_id: user.id,
          message: 'üö´ –í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –ª–∞–π–∫ –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É.',
          random_id: 0,
      });
      return;
  }

  user.likes[postId] = true;

  try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const postIdentifier = `${ownerId}_${postId}`; 
      
      const postInfo = await usert.api.wall.getById({
          posts: [postIdentifier],
          access_token: tokenData.user
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–µ
      if (postInfo && postInfo.items && postInfo.items.length > 0) {
          const post = postInfo.items[0];
          const postDateTimestamp = post.date * 1000;
          const now = Date.now();

          // Check if post is older than 7 days
          const sevenDays = 7 * 24 * 60 * 60 * 1000; // 7 days in milliseconds
          if (now - postDateTimestamp > sevenDays) {
              console.log(`[${new Date().toLocaleTimeString()}] Post is older than 7 days, ignoring like.`);
              return;
              if (user.notifications) {
                  await vk.api.messages.send({
                      user_id: user.id,
                      message: `‚ö† –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç, –ª–∞–π–∫–∏ –±–æ–ª—å—à–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.`,
                      random_id: 0
                  });
              }
              return; // Stop processing the like
          }

          // Calculate reward based on post age
          let minutesSincePost = Math.floor((now - postDateTimestamp) / (60 * 1000));
          let reward = Math.max(7500 - (minutesSincePost * 250), 250); // Minimum reward threshold

          // Check for special star post condition
          if (ownerId === -groupId && Number(postId) === Number(config.starPostId)) {
              user.c4 += 1; 

                    if (user.now.kv1 && user.now.kv2 && user.now.kv3 && user.now.kv4 && user.now.kv5 && user.now.kv6 && user.now.kv7 && user.now.kv8 && !user.now.kv9) {
                      user.now.kv9 = true;
                      user.c4 += 1;
                    
                      await vk.api.messages.send({
                        user_id: user.id,
                        random_id: 0,
                        message: `‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 9 –∑–∞–¥–∞–Ω–∏–µ!
                    
                    –ù–∞–≥—Ä–∞–¥–∞ - 1 Starr Drop 
                    
                    üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –≤–µ–¥—å –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—é!`,
                        keyboard: JSON.stringify({
                          inline: true,
                          buttons: [
                            [{
                              action: {
                                type: "text",
                                payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                                label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                              },
                              color: "positive"
                            }]
                          ]
                        })
                      });
                    }

              try {
                  await vk.api.messages.send({
                      user_id: user.id,
                      message: `‚ù§Ô∏è –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω! ‚ú® –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π üéÅStarr DropüéÅ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`,
                              keyboard: JSON.stringify({
                                "inline": true,
                                "buttons": [
                                  [{
                                    "action": {
                                      "type": "text",
                                      payload: JSON.stringify({ command: `—Ç—ã–∫` }),
                                      "label": `‚≠ê –û—Ç–∫—Ä—ã—Ç—å Starr Drop ‚≠ê`
                                    },
                                    "color": "positive"
                                  },
                          ]
                                ]
                              }),
                              attachment: `doc690927947_682634151`,
                      random_id: 0
                  });
              } catch (error) {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –ª–∞–π–∫ "–ü–æ—Å—Ç—Å—Ç–∞—Ä":', error);
              }
          } else {
              user.balance2 += reward; // Update user's balance

              try {

      if (user.now.kv1 && user.now.kv2 && user.now.kv3 && user.now.kv4 && user.now.kv5 && user.now.kv6 && user.now.kv7 && user.now.kv8 && !user.now.kv9) {
        user.now.kv9 = true;
        user.c4 += 1;
      
        await vk.api.messages.send({
          user_id: user.id,
          random_id: 0,
          message: `‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 9 –∑–∞–¥–∞–Ω–∏–µ!
      
      –ù–∞–≥—Ä–∞–¥–∞ - 1 Starr Drop 
      
      üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ, –≤–µ–¥—å –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—é!`,
          keyboard: JSON.stringify({
            inline: true,
            buttons: [
              [{
                action: {
                  type: "text",                payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                  label: `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                                },
                                color: "positive"
                              }]
                            ]
                          })
                        });
                      }
  
                    await vk.api.messages.send({
                        user_id: user.id,
                        message: `‚ù§Ô∏è –ó–∞ –ª–∞–π–∫ –ø–æ—Å—Ç–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ ${utils.sp(reward)} ${val4}.`,
                        random_id: 0
                    });
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–≥—Ä–∞–¥–µ –∑–∞ –æ–±—ã—á–Ω—ã–π –ª–∞–π–∫:', error);
                }
            }
        } else {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å—Ç–µ:", postInfo);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:', error);
    }
  });
  

setInterval(async () => {
  double.map((user) => {
    user.timers.hasWorked = Math.max(user.timers.hasWorked - 10, 0);
    user.timers.bonus = Math.max(user.timers.bonus - 10, 0);
    user.timers.poxod = Math.max(user.timers.poxod - 10, 0);
    user.timers.vipbonus = Math.max(user.timers.vipbonus - 10, 0);
    user.timers.prembonus = Math.max(user.timers.prembonus - 10, 0);
    user.timers.titanbonus = Math.max(user.timers.titanbonus - 10, 0);
    user.timers.imperatorbonus = Math.max(user.timers.imperatorbonus - 10, 0);
    user.timers.podarok = Math.max(user.timers.podarok - 10, 0);
    user.scar.gontime = Math.max(user.scar.gontime - 10, 0);
    user.limit.sent = Math.max(user.limit.sent - 10, 0);
    user.limitadd.sentadd = Math.max(user.limitadd.sentadd - 10, 0);
    user.timers.report = Math.max(user.timers.report - 10, 0);
    user.timers.ban = Math.max(user.timers.ban - 10, 0);
  });
}, 10000);

function sendMessageToUser(id, message) {
  vk.api.messages.send({
    user_id: id,
    message: message,
    random_id: 0
  }).then((response) => {
    console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}: ${message}`);
  }).catch((error) => {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${id}:`, error);
  });
}






function updateGameTime(chat) {
  if (chat.gametime <= 0) {
    chat.gametime = 60;
    chat.game = false;
  } else {
    chat.gametime -= 1;
  }
}



setInterval(async () => {
  double.map(user => {
    if (user.bonustime > 0) user.bonustime -= 1
  });
}, 1000);

setInterval(() => {
  function resetNegativeBalance(user) {
    if (user.balance2 < 0) {
      user.balance2 = 0;
    }
  }
  double.forEach(resetNegativeBalance);
}, 1);

setInterval(async () => {
  double.forEach(x => {
    if (x.balance2 >= 899999999999999999999) {
      x.balance2 = 899999999999999999999;
    }
    if (x.balance >= 899999999999999999999) {
      x.balance = 899999999999999999999;
    }
    if (x.bank >= 899999999999999999999) {
      x.bank = 899999999999999999999;
    }
    if (x.bilet >= 899999999999999999999) {
      x.bilet = 899999999999999999999;
    }
    if (x.btc >= 899999999999999999999) {
      x.btc = 899999999999999999999;
    }
    if (x.energy >= 899999999999999999999) {
      x.energy = 899999999999999999999;
    }
    if (x.maxenergy >= 899999999999999999999) {
      x.maxenergy = 899999999999999999999;
    }
    if (x.sataka >= 899999999999999999999) {
      x.sataka = 899999999999999999999;
    }
    if (x.bossyr >= 899999999999999999999) {
      x.bossyr = 899999999999999999999;
    }
    if (x.rubli >= 899999999999999999999) {
      x.rubli = 899999999999999999999;
    }
    if (x.rub >= 899999999999999999999) {
      x.rubli = 899999999999999999999;
    }
    if (x.sprcoin >= 899999999999999999999) {
      x.sprcoin = 899999999999999999999;
    }
    if (x.dcoins >= 899999999999999999999) {
      x.dcoins = 899999999999999999999;
    }
    if (x.rating >= 899999999999999999999) {
      x.rating = 899999999999999999999;
    }
    if (x.c1 >= 899999999999999999999) {
      x.c1 = 899999999999999999999;
    }
    if (x.c2 >= 899999999999999999999) {
      x.c2 = 899999999999999999999;
    }
    if (x.c3 >= 899999999999999999999) {
      x.c3 = 899999999999999999999;
    }
    if (x.c4 >= 899999999999999999999) {
      x.c4 = 899999999999999999999;
    }
    if (x.c5 >= 899999999999999999999) {
      x.c5 = 899999999999999999999;
    }
    if (x.c6 >= 899999999999999999999) {
      x.c6 = 899999999999999999999;
    }
    if (x.c7 >= 899999999999999999999) {
      x.c7 = 899999999999999999999;
    }
    if (x.c8 >= 899999999999999999999) {
      x.c8 = 899999999999999999999;
    }
    if (x.c9 >= 899999999999999999999) {
      x.c9 = 899999999999999999999;
    }
    if (x.c10 >= 899999999999999999999) {
      x.c10 = 899999999999999999999;
    }
    if (x.c11 >= 899999999999999999999) {
      x.c11 = 899999999999999999999;
    }
    if (x.settings.adm >= 899999999999999999999) {
      x.settings.adm = 899999999999999999999;
    }
  });
}, 1);

function timesss() {
  let date = new Date();
  let hours = date.getHours();
  let minutes = date.getMinutes();
  let seconds = date.getSeconds();
  if (hours < 10) hours = "0" + hours;
  if (minutes < 10) minutes = "0" + minutes;
  if (seconds < 10) seconds = "0" + seconds;
  return hours + ":" + minutes + ":" + seconds;
}
function datasss() {
  const date = new Date();
  let days = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();
  if (month < 10) month = "0" + month;
  if (days < 10) days = "0" + days;
  return days + "." + month + "." + year;
}

setInterval(() => {
  double
    .filter((x) => x.tree !== 0 && x.bans.ban === false && x.leafpribil <= 1000)
    .map((x) => {
      if (x.tree === 4 || x.leafpribil === 0) x.leafpribil += 10;

      if (x.tree === 1) x.leafpribil += 1;

      if (x.tree === 2) x.leafpribil += 3;

      if (x.tree === 3) x.leafpribil += 5;

      if (x.tree === 4) x.leafpribil += 9;

      if (x.tree === 5) x.leafpribil += 15;

      x.irrigation -= 1;

      if (x.settings.imperator) x.irrigation = 100;

      if (x.irrigation <= 0) x.tree = 0;
    });
}, 3600000);

setInterval(async () => {
  double
    .filter(
      (x) =>
        (x.stars1 === true ||
          x.stars2 === true ||
          x.stars3 === true ||
          x.stars4 === true ||
          x.stars5 === true) &&
        x.bans.ban === false
    )
    .map((x) => {
      if (x.stars1 === true) {
        x.ruds.almaz += 100;
      }

      if (x.stars2 === true) {
        x.ruds.materia += 75;
      }

      if (x.stars3 === true) {
        x.ruds.obsidian += 50;
      }

      if (x.stars4 === true) {
        x.ruds.plazma += 30;
      }

      if (x.stars5 === true) {
        x.rub += 30;
      }
    });
}, 3600000);

setInterval(() => {
  double
    .filter((x) => x.energy < x.maxenergy && x.bans.ban === false)
    .map((x) => {
      x.energy += 1;
    });
}, 300000);

setInterval(async () => {
  for (const user of double) {
    if (user.bans.ban === true && user.bans.bantimer <= Date.now()) {
      const hasPermission = spolerList.includes(user.id);

      if (hasPermission) {
        user.bans.ban = false;

      }
    }else{
      user.bans.ban = false;
    }
  }
}, 60000);

setInterval(async () => {
  if (bossinfo.boss < 0) {
    bossinfo.boss = 0;
  }
}, 1);

setInterval(() => {
  double
    .filter((x) => x.prazdnikbussines === true && x.balance >= 0)
    .map((x) => {
      x.balance += 500000;
    });
}, 60000);

setInterval(() => {
  double
    .filter((x) => x.balance < 0)
    .map((x) => {
      x.balance = 1000;
    });

  chats
    .filter((x) => x.balance === null)
    .map((x) => {
      x.balance = 1000;
    });

  chats
    .filter((x) => x.statuemoney === undefined)
    .map((x) => {
      x.statuemoney = 10;
    });

 chats
    .filter((x) => x.statuemoney === null)
    .map((x) => {
      x.statuemoney = 10;
    });

  double
    .filter((x) => x.balance === undefined)
    .map((x) => {
      x.balance = 10000;
    });

  double
    .filter((x) => isNaN(x.balance))
    .map((x) => {
      x.balance = 10000;
    });

  double
    .filter((x) => !Number(x.rubli))
    .map((x) => {
      x.rubli = 0;
    });

  double
    .filter((x) => x.balance < 10000)
    .map((x) => {
      x.balance = 10000;
    });

  double
    .filter((x) => x.c1 === null)
    .map((x) => {
      x.c1 = 0;
    });

  double
    .filter((x) => x.c2 === null)
    .map((x) => {
      x.c2 = 0;
    });

  double
    .filter((x) => x.energy < 0)
    .map((x) => {
      x.energy = 0;
    });


  double.map((x) => {
    x.bank = Math.floor(Number(Math.floor(x.bank)));

    x.balance = Math.floor(Number(Math.floor(x.balance)));

    x.btc = Math.floor(Number(Math.floor(x.btc)));
  });

  double
    .filter((x) => x.settings.adm > 0)
    .map((x) => {
      x.bantop = true;

      x.limit.playerlimit = 0;
    });

}, 1000);


setInterval(() => {
  double.map((x) => {
    if (x.tegg) {
      x.tegg = false;
    }
  });
}, 34000);

setInterval(() => {
  double
    .filter((x) => x.settings.premium !== false && x.bans.ban === false)
    .forEach((x) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º forEach, —Ç.–∫. –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
      if (x.settings.premium) {
        const balanceIncrease = 15000000;
        const balance2Increase = 1500;

        x.balance += balanceIncrease;
        x.balance2 += balance2Increase;

        const message = `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏: \n\n` +
                        `${utils.sp(balanceIncrease)} ${val1} üí∞ –∏ \n` +
                        `${utils.sp(balance2Increase)} ${val4} üíé –∑–∞ PREMIUM —Å—Ç–∞—Ç—É—Å! üëë`;

        if (typeof sendMessageToUser === 'function') {  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
          sendMessageToUser(x.id, message);
        } else {
          console.error('sendMessageToUser is not defined');
        }
      }
    });
}, 86400000);


setInterval(() => {
  double
    .filter((x) => x.settings.titan !== false && x.bans.ban === false)
    .forEach((x) => { // –ò—Å–ø–æ–ª—å–∑—É–µ–º forEach, —Ç.–∫. –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
      if (x.settings.titan) {
        const balanceIncrease = 25000000;
        const balance2Increase = 2500;

        x.balance += balanceIncrease;
        x.balance2 += balance2Increase;

        const message = `üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏: \n\n` +
                        `${utils.sp(balanceIncrease)} ${val1} üí∞ –∏ \n` +
                        `${utils.sp(balance2Increase)} ${val4} üíé –∑–∞ TITAN —Å—Ç–∞—Ç—É—Å! üåü`;

        if (typeof sendMessageToUser === 'function') {  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
          sendMessageToUser(x.id, message);
        } else {
          console.error('sendMessageToUser is not defined');
        }
      }
    });
}, 86400000);


setInterval(() => {
  double
    .filter((x) => x.misc.farm !== 0 && x.bans.ban === false)
    .map((x) => {
      const farmLevel = x.misc.farm;
      const farmData = farms.find((f) => f.id === farmLevel);

      if (!farmData) {
        console.warn(`–§–µ—Ä–º–∞ —Å —É—Ä–æ–≤–Ω–µ–º ${farmLevel} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`);
        return;
      }

      const prib = farmData.prib;
      const limit = prib * 100;

      // –õ–æ–≥–∏—Ä—É–µ–º *–î–û* –≤—Å–µ—Ö —É—Å–ª–æ–≤–∏–π, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞
      console.log(`–§–µ—Ä–º–∞ —É—Ä–æ–≤–Ω—è ${farmLevel} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è:`);
      console.log("  farmLevel:", farmLevel);
      console.log("  x.farm_btc:", x.farm_btc);
      console.log("  limit:", limit);
      console.log("  prib:", prib);

      // –û–±—â–∏–π –∫–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è prib, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
      const addPrib = () => {
        // const pribToAdd = Number(utils.sp(prib)); // –£–±–∏—Ä–∞–µ–º utils.sp() –∑–¥–µ—Å—å
        const pribToAdd = Number(prib); // –ò—Å–ø–æ–ª—å–∑—É–µ–º prib –Ω–∞–ø—Ä—è–º—É—é
        console.log("  pribToAdd (number):", pribToAdd);
        console.log("  typeof pribToAdd:", typeof pribToAdd);
        x.farm_btc = Number(x.farm_btc) + pribToAdd;
        console.log("  x.farm_btc –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", x.farm_btc);
      };


      if (farmLevel === 1 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 1 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 2 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 2 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 3 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 3 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 4 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 4 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 5 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 5 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 6 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 6 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }

      if (farmLevel === 7 && x.farm_btc <= limit) {
        console.log("  –£—Å–ª–æ–≤–∏–µ farmLevel === 7 –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.");
        addPrib();
      }
    });
}, 3600000);



setInterval(() => {
  double
    .filter((x) => x.timers.report === true)
    .map((x) => {
      x.timers.report = false;
    });
}, 10000);

setInterval(() => {
  double
    .filter((x) => x.settings.topdon)
    .forEach((x) => {
      x.energy += 5;
      x.bilet += 2;
      x.balance += 20000000;

      const cases = ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10', 'c12', 'c13', 'c14', 'c15', 'c16'];
      const randomCase = cases[Math.floor(Math.random() * cases.length)];

      if (!x[randomCase]) x[randomCase] = 0;
      x[randomCase] += 1;

      let caseType = "";
      let caseDescription = "";

      switch (randomCase) {
        case 'c1': caseType = "–æ–±—ã—á–Ω—ã–π"; break;
        case 'c2': caseType = "–∑–æ–ª–æ—Ç–æ–π"; break;
        case 'c3': caseType = "–¥–æ–Ω–∞—Ç-–∫–µ–π—Å"; break;
        case 'c4': caseType = "STAR-DROPS"; break;
        case 'c5': caseType = "Halloween"; break;
        case 'c6': caseType = "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π"; break;
        case 'c7': caseType = "–∞–≤—Ç–æ–∑–≤—É–∫"; break;
        case 'c8': caseType = "–Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö"; break;
        case 'c9': caseType = "–ø—Ä–µ–º–∏—É–º"; break;
        case 'c10': caseType = "—É–ª—å—Ç—Ä–∞"; break;
        case 'c12': caseType = "—Ä–µ–¥–∫–∏–π Starr Drops"; break;
        case 'c13': caseType = "—Å–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π Starr Drops"; break;
        case 'c14': caseType = "—ç–ø–∏—á–µ—Å–∫–∏–π Starr Drops"; break;
        case 'c15': caseType = "–º–∏—Ñ–∏—á–µ—Å–∫–∏–π Starr Drops"; break;
        case 'c16': caseType = "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π Starr Drop"; break;
        default: caseType = "—Ö—É—ë–≤—ã–π"; break;
      }

      caseDescription = `üéÅ –í–ê–£! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${caseType} –∫–µ–π—Å –∑–∞ TOPDON!
      üéâ –≠–Ω–µ—Ä–≥–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ +5! 
      üéâ –ë–∏–ª–µ—Ç—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ +2!
      üéâ –ë–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ +20.000.000 ! ‚ö°`;

      if (typeof sendMessageToUser === 'function') {
        sendMessageToUser(x.id, caseDescription);
      } else {
        console.error('sendMessageToUser is not defined, –¥–æ–ª–±–æ—ë–±');
      }
    });
}, 86400000);


setInterval(() => {
  double.forEach((x) => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è rarityName
    if (typeof x.rarityName === 'undefined') {
      x.rarityName = ""; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (string)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è currentRarity
    if (typeof x.currentRarity === 'undefined') {
      x.currentRarity = "rare"; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (string)

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è tries
    if (typeof x.tries === 'undefined') {
      x.tries = 0; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è currentRarity2
    if (typeof x.currentRarity2 === 'undefined') {
      x.currentRarity2 = "rare"; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (string)

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è c12, c13, c14, c15, c16
    if (typeof x.c12 === 'undefined') {
      x.c12 = 0; 

    }

    if (typeof x.c13 === 'undefined') {
      x.c13 = 0; 

    }

    if (typeof x.c14 === 'undefined') {
      x.c14 = 0; 

    }

    if (typeof x.c15 === 'undefined') {
      x.c15 = 0; 

    }

    if (typeof x.c16 === 'undefined') {
      x.c16 = 0; 

    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bankik
    if (typeof x.bankik === 'undefined') {
      x.bankik = false; 

    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (typeof x.kamen === 'undefined') { 
        x.kamen = 0;

    }
    
    if (typeof x.zoloto === 'undefined') { 
        x.zoloto = 0;

    }
    
    if (typeof x.diamond === 'undefined') { 
        x.diamond = 0;

    }
    
    if (typeof x.ygol === 'undefined') { 
        x.ygol = 0;

    }
    
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è now.kv20
   if (typeof x.now !== 'undefined' && typeof x.now.kv20 === 'undefined') { 
       x.now.kv20 = false;

   }
   
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è levl
   if (typeof x.levl === 'undefined') { 
       x.levl = 1;
   }
   
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è currentRarity –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
   if (typeof x.currentRarity2 === 'undefined') { 
       x.currentRarity2 = "rare";

   }
   
   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è misc
   if (typeof x.misc === 'undefined') { 
       x.misc = {};

   }
// ===========================================================

if (typeof x.limc16 === 'undefined') { 
  x.limc16 = 1;
}

if (typeof x.limc16i === 'undefined') { 
  x.limc16i = 0;
}

if (typeof x.limc15 === 'undefined') { 
  x.limc15 = 1;

}

if (typeof x.limc15i === 'undefined') { 
  x.limc15i = 0;

}

if (typeof x.limc14 === 'undefined') { 
  x.limc14 = 1;

}

if (typeof x.limc14i === 'undefined') { 
  x.limc14i = 0;

}


if (typeof x.limc13 === 'undefined') { 
  x.limc13 = 1;

}

if (typeof x.limc13i === 'undefined') { 
  x.limc13i = 0;

}

if (typeof x.limc12 === 'undefined') { 
  x.limc12 = 1;

}

if (typeof x.limc12i === 'undefined') { 
  x.limc12i = 0;

}

if (typeof x.limc11 === 'undefined') { 
    x.limc11 = 1;

}

if (typeof x.limc11i === 'undefined') { 
  x.limc11i = 0;

}

if (typeof x.limc10 === 'undefined') { 
  x.limc10 = 1;

}

if (typeof x.limc10i === 'undefined') { 
  x.limc10i = 0;

}

if (typeof x.limc9 === 'undefined') { 
  x.limc9 = 1;
}

if (typeof x.limc9i === 'undefined') { 
  x.limc9i = 0;
}

if (typeof x.limc8 === 'undefined') { 
  x.limc8 = 1;

}

if (typeof x.limc8i === 'undefined') { 
  x.limc8i = 0;

}

if (typeof x.limc7 === 'undefined') { 
  x.limc7 = 1;

}

if (typeof x.limc7i === 'undefined') { 
  x.limc7i = 0;

}

if (typeof x.limc6 === 'undefined') { 
  x.limc6 = 1;

}

if (typeof x.limc6i === 'undefined') { 
  x.limc6i = 0;

}

if (typeof x.limc5 === 'undefined') { 
  x.limc5 = 1;

}

if (typeof x.limc5i === 'undefined') { 
  x.limc5i = 0;

}

if (typeof x.limc4 === 'undefined') { 
  x.limc4 = 1;

}

if (typeof x.limc4i === 'undefined') { 
  x.limc4i = 0;

}

if (typeof x.limc3 === 'undefined') { 
  x.limc3 = 1;

}

if (typeof x.limc3i === 'undefined') { 
  x.limc3i = 0;

}

if (typeof x.limc2 === 'undefined') { 
  x.limc2 = 1;

}

if (typeof x.limc2i === 'undefined') { 
  x.limc2i = 0;

}

if (typeof x.limc1 === 'undefined') { 
  x.limc1 = 1;
}

if (typeof x.limc1i === 'undefined') { 
  x.limc1i = 0;
}

if (typeof x.limbilet === 'undefined') { 
  x.limbilet = 10;
}

if (typeof x.limbileti === 'undefined') { 
  x.limbileti = 0;
}

if (typeof x.limfarm === 'undefined') { 
  x.limfarm = 5;
}

if (typeof x.limfarmi === 'undefined') { 
  x.limfarmi = 0;
}

if (typeof x.limbank === 'undefined') { 
  x.limbank = 1000000;
}

if (typeof x.limbanki === 'undefined') { 
  x.limbanki = 0;
}

if (typeof x.limbtc === 'undefined') { 
  x.limbtc = 100;
}

if (typeof x.limbtci === 'undefined') { 
  x.limbtci = 0;
}

if (typeof x.limgb === 'undefined') { 
  x.limgb = 10000;
}

if (typeof x.limgbi === 'undefined') { 
  x.limgbi = 0;
}

if (typeof x.limpos1 === 'undefined') { 
  x.limpos1 = 5;
}

if (typeof x.limpos1i === 'undefined') { 
  x.limpos1i = 0;
}

if (typeof x.limpos2 === 'undefined') { 
  x.limpos2 = 5;
}

if (typeof x.limpos2i === 'undefined') { 
  x.limpos2i = 0;
}

if (typeof x.limpos3 === 'undefined') { 
  x.limpos3 = 5;
}

if (typeof x.limpos3i === 'undefined') { 
  x.limpos3i = 0;
}

if (typeof x.limsms === 'undefined') { 
  x.limsms = 0;
}

if (typeof x.reshim === 'undefined') { 
  x.reshim = 1;
}


if (typeof x.oval === 'undefined') { 
  x.oval = 0;
}


  });
}, 1000);

const forbiddenTitles = [
  "–ë–∏–∑–Ω–µ—Å–º–µ–Ω", 
  "üî•Supportüî•",
  "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
  "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–∏—Ç—É–ª"
];




setInterval(() => {
  double.map((x) => {
    const currentLevel = x.settings.adm || 0; // adm = —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0 (–Ω–µ –∞–¥–º–∏–Ω)
    let nextLevel = currentLevel + 1;
    let isAdministrator = (currentLevel > 0); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    let reportsNeeded = x.astats.reports; // –¢–µ–ø–µ—Ä—å reportsNeeded –±–µ—Ä–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ x.astats.reports

    switch (currentLevel) {
      case 1:
          reportsNeeded = 25;
        break;
      case 2:
          reportsNeeded = 75;
        break;
      case 3:
          reportsNeeded = 150;
        break;
      case 4:
          reportsNeeded = 200;
        break;
      case 5:
        nextLevel = currentLevel; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        break;
      default:
        nextLevel = currentLevel; // –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        isAdministrator = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ false
        break;
    }

    if (isAdministrator && x.astats.reports >= reportsNeeded && currentLevel != 5) {
      nextLevel = Math.min(nextLevel, 5); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–º 5 —É—Ä–æ–≤–µ–Ω—å

      x.settings.adm = nextLevel; // –ü–æ–≤—ã—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å
      sendMessageToUser(x.id, `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –±—ã–ª–∏ –ø–æ–≤—ã—à–µ–Ω—ã –¥–æ —É—Ä–æ–≤–Ω—è ${nextLevel} –∑–∞ –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);

      vk.api.messages.send({
        chat_id: chatlogi,
        message: `#–ü–û–í–´–®–ï–ù–ò–ï_–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:
üë§ –ò–≥—Ä–æ–∫—É: @id${x.id} (${x.tag})[ID: ${x.uid}]
‚ñ∂ –°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å: ${currentLevel}
‚ñ∂ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: ${nextLevel}
‚ñ∂ –ö–æ–ª-–≤–æ —Ä–µ–ø–æ—Ä—Ç–æ–≤: ${utils.sp(x.astats.reports)}`,
        random_id: 0
      });


    }

    if (x.astats.reports < 0) {
      x.astats.reports = 0;
    }
  });
}, 1000);

setInterval(() => {
  double
    .filter((x) => x.stock.status && forbiddenTitles.includes(x.stock.status))
    .map((x) => {
      const oldStatus = x.stock.status;
      sendMessageToUser(x.id, `–í–∞—à —Ç–∏—Ç—É–ª "${oldStatus}" –±—ã–ª —É–¥–∞–ª–µ–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!`);
      vk.api.messages.send({ // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–ª–æ–≥
        chat_id: chatlogi,
        message: `#–ê–í–¢–û–£–î–ê–õ–ï–ù–ò–ï_–¢–ò–¢–£–õ–ê:
üë§ –ò–≥—Ä–æ–∫—É: @id${x.id} (${x.tag})[ID: ${x.uid}]
‚ñ∂ –¢–∏—Ç—É–ª: ${oldStatus}
‚ñ∂ –£–¥–∞–ª–∏–ª–∞: –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏`,
        random_id: 0
      });

      x.stock.status = "-"; 
    });
}, 1000);

setInterval(() => {
  double
    .filter((x) => x.inf)
    .map((x) => {
      x.balance = 9999999999999999999999999999999999999;
    });
}, 1);

/*setInterval(() => {
  chats.forEach((x) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const oldPeopleLvl = x.statuepeoplelvl;
    const oldMoneyLvl = x.statuemoneylvl;
    const oldMsgLvl = x.statuemsglvl;

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞—Ç—É–∏ –ª—é–¥–µ–π
    if (x.statuepeople < 10) {
      x.statuepeoplelvl = 0;
    } else if (x.statuepeople >= 10 && x.statuepeople < 25) {
      x.statuepeoplelvl = 1;
    } else if (x.statuepeople >= 25 && x.statuepeople < 50) {
      x.statuepeoplelvl = 2;
    } else if (x.statuepeople >= 50 && x.statuepeople < 60) {
      x.statuepeoplelvl = 3;
    } else if (x.statuepeople >= 60 && x.statuepeople < 80) {
      x.statuepeoplelvl = 4;
    } else if (x.statuepeople >= 80 && x.statuepeople < 100) {
      x.statuepeoplelvl = 5;
    } else if (x.statuepeople >= 100) {
      x.statuepeoplelvl = 6;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞—Ç—É–∏ –¥–µ–Ω–µ–≥
    if (x.statuemoney < 500000000) {
      x.statuemoneylvl = 0;
    } else if (x.statuemoney >= 500000000 && x.statuemoney < 5000000000) {
      x.statuemoneylvl = 1;
    } else if (x.statuemoney >= 5000000000 && x.statuemoney < 15000000000) {
      x.statuemoneylvl = 2;
    } else if (x.statuemoney >= 15000000000) {
      x.statuemoneylvl = 3;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Å—Ç–∞—Ç—É–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (x.statuemsg < 10000) {
      x.statuemsglvl = 0;
    } else if (x.statuemsg >= 10000 && x.statuemsg < 100000) {
      x.statuemsglvl = 1;
    } else if (x.statuemsg >= 100000 && x.statuemsg < 500000) {
      x.statuemsglvl = 2;
    } else if (x.statuemsg >= 500000) {
      x.statuemsglvl = 3;
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π
    if (x.statuepeoplelvl !== oldPeopleLvl) {
      console.log(`–ß–∞—Ç ID ${x.id}: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞—Ç—É–∏ –ª—é–¥–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${oldPeopleLvl} –Ω–∞ ${x.statuepeoplelvl}`);
    }
    if (x.statuemoneylvl !== oldMoneyLvl) {
      console.log(`–ß–∞—Ç ID ${x.id}: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞—Ç—É–∏ –¥–µ–Ω–µ–≥ –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${oldMoneyLvl} –Ω–∞ ${x.statuemoneylvl}`);
    }
    if (x.statuemsglvl !== oldMsgLvl) {
      console.log(`–ß–∞—Ç ID ${x.id}: –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞—Ç—É–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑–º–µ–Ω–∏–ª—Å—è —Å ${oldMsgLvl} –Ω–∞ ${x.statuemsglvl}`);
    }
  });
}, 1000);*/

let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

setInterval(() => {
    console.clear();
}, 3600000);



