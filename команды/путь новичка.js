let utils = require('../utils.js')

const commands =[];

const fs = require('fs'); 

let chats = require('../database/chats.json')

let double = require('../database/users.json')
let config = require('../database/settings.json');
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; 
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; 
  }
}


function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}


const tokenData = getToken();

const chatlogi = tokenData.chatlogi; 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}
const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);


cmd.hear(/^(?:–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞|üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

    message.user.now.kv = true

     if (!message.user.now.kv1) return bot(`üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∏–≥—Ä–∞—Ç—å! 
1Ô∏è‚É£ –ó–∞–¥–∞–Ω–∏–µ - –∑–∞–±–µ—Ä–∏ —Å–≤–æ–π –±–æ–Ω—É—Å!`,
 {
  keyboard: JSON.stringify({
      "inline": true,
      "buttons": [
          [{
              "action": {
                  "type": "text",
                  payload: JSON.stringify({command: `–±–æ–Ω—É—Å`}),
                  "label": `üéÅ –ë–æ–Ω—É—Å`
              },
              "color": "positive"
          }]
      ]
  })
});

if (message.user.now.kv1 && !message.user.now.kv2) return bot(`üöÄ –í—Ç–æ—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –∫—É–ø–∏ —Ñ–µ—Ä–º—É!`,
  {
   keyboard: JSON.stringify({
       "inline": true,
       "buttons": [
           [{
               "action": {
                   "type": "text",
                   payload: JSON.stringify({command: `—Ñ–µ—Ä–º—ã`}),
                   "label": `üéÅ –§–µ—Ä–º—ã`
               },
               "color": "positive"
           }]
       ]
   })
 });

 if (message.user.now.kv1 && message.user.now.kv2 && !message.user.now.kv3) return bot(`üöÄ –¢—Ä–µ—Ç—å–µ –∑–∞–¥–∞–Ω–∏–µ: –∫—É–ø–∏ –±–∏–∑–Ω–µ—Å!`,
  {
   keyboard: JSON.stringify({
       "inline": true,
       "buttons": [
           [{
               "action": {
                   "type": "text",
                   payload: JSON.stringify({command: `–±–∏–∑–Ω–µ—Å—ã`}),
                   "label": `üéÅ –ë–∏–∑–Ω–µ—Å—ã`
               },
               "color": "positive"
           }]
       ]
   })
 });



 if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && !message.user.now.kv4) return bot(`üöÄ –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –≤—ã–π–≥—Ä–∞–π –≤ –∫–∞–∑–∏–Ω–æ!`,
  {
   keyboard: JSON.stringify({
       "inline": true,
       "buttons": [
           [{
               "action": {
                   "type": "text",
                   payload: JSON.stringify({command: `–∫–∞–∑–∏–Ω–æ 100`}),
                   "label": `üéÅ –ö–∞–∑–∏–Ω–æ`
               },
               "color": "positive"
           }]
       ]
   })
 });


 if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5) return bot(`üöÄ –ü—è—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –æ—Ç–∫—Ä–æ–π –ª—é–±–æ–π –∫–µ–π—Å!`,{
  keyboard: JSON.stringify({
      "inline": true,
      "buttons": [
          [{
              "action": {
                  "type": "text",
                  payload: JSON.stringify({command: `–∫–µ–π—Å—ã`}),
                  "label": `üéÅ –ö–µ–π—Å—ã`
              },
              "color": "positive"
          }]
      ]
  })
});

 if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6) return bot(`üöÄ –®–µ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!`,{
  keyboard: JSON.stringify({
      "inline": true,
      "buttons": [
          [{
              "action": {
                  "type": "text",
                  payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–∞`}),
                  "label": `üéÅ –ê—Ä–µ–Ω–¥–∞`
              },
              "color": "positive"
          }]
      ]
  })
});

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && !message.user.now.kv7) return bot(`üöÄ –°–µ–¥—å–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –≤—ã–∫–æ–ø–∞–π –≤ —à–∞—Ö—Ç–µ –∞–ª–º–∞–∑–Ω—É—é —Ä—É–¥—É!`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `—à–∞—Ö—Ç–∞`}),
                    "label": `üéÅ –®–∞—Ö—Ç–∞`
                },
                "color": "positive"
            }]
        ]
    })
  });

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && !message.user.now.kv8) return bot(`üöÄ –í–æ—Å—å–º–æ–µ –∑–∞–¥–∞–Ω–∏–µ: —É—á–∞—Å—Ç–≤—É–π –≤ –≥–æ–Ω–∫–∞—Ö!`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `–≥–æ–Ω–∫–∞`}),
                    "label": `üéÅ –ì–æ–Ω–∫–∞`
                },
                "color": "positive"
            }]
        ]
    })
  });

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && !message.user.now.kv9) return bot(`üöÄ –î–µ–≤—è—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –ª–∞–π–∫–Ω–∏ –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ!`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`}),
                    "label": `üéÅ –ë–µ—Å–µ–¥—ã`
                },
                "color": "positive"
            }]
        ]
    })
  });

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && !message.user.now.kv10) return bot(`üöÄ –î–µ—Å—è—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –∑–∞–±–µ—Ä–∏ –ø–æ–¥–∞—Ä–æ–∫ –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º! üéÅ`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `–±–µ—Å–µ–¥—ã`}),
                    "label": `üéÅ –ü–æ–¥–∞—Ä–æ–∫`
                },
                "color": "positive"
            }]
        ]
    })
  }) 



/*
// ===============================================

    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && message.user.now.kv10 && !message.user.now.kv11) return bot(`üöÄ –û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –í—ã–ø–æ–ª–Ω–∏ –≤—Å–µ –∫–≤–µ—Å—Ç—ã –≤ –±–æ—Ç–µ.`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `–∫–≤–µ—Å—Ç—ã`}),
                    "label": `üßê –ö–≤–µ—Å—Ç—ã`
                },
                "color": "positive"
            }]
        ]
    })
  }) 


    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && message.user.now.kv10 && message.user.now.kv11 && !message.user.now.kv12) return bot(`üöÄ –î–≤–µ–Ω–∞–¥—Ü–∞—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –û—Ç–∫—Ä–æ–π –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π STARR DROP`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: `–∫–µ–π—Å—ã`}),
                    "label": `‚Åâ –ö–µ–π—Å—ã`
                },
                "color": "positive"
            }]
        ]
    })
  }) 


      if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && message.user.now.kv10 && message.user.now.kv11 && message.user.now.kv12 && !message.user.now.kv13) return bot(`üöÄ –¢—Ä–∏–Ω–∞–¥—Ü–∞—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: –Ω–∞–π–¥–∏ –≤ –±–æ—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É`,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: ``}),
                    "label": ``
                },
                "color": "positive"
            }]
        ]
    })
  }) 


    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && message.user.now.kv10 && message.user.now.kv11 && message.user.now.kv12 && message.user.now.kv13 && !message.user.now.kv14) return bot(`üöÄ –ß–µ—Ç—ã—Ä–Ω–∞–¥—Ü–∞—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: `,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: ``}),
                    "label": ``
                },
                "color": "positive"
            }]
        ]
    })
  }) 


    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && message.user.now.kv10 && message.user.now.kv11 && message.user.now.kv12 && message.user.now.kv13 && message.user.now.kv14 && !message.user.now.kv15) return bot(`üöÄ –ü—è—Ç–Ω–∞–¥—Ü–∞—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ: `,{
    keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({command: ``}),
                    "label": ``
                },
                "color": "positive"
            }]
        ]
    })
  }) 




*/


else { 

  return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–µ–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! üéâ –°–∫–æ—Ä–æ –±—É–¥—É—Ç –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è. üöÄ`)

}


}
})

module.exports = commands;
