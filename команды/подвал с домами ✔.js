let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();
let homes = require('../spisok/–¥–æ–º–∞.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData3 = getToken3();

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5



cmd.hear(/^(?:–ü–æ–¥–≤–∞–ª)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.realty.home === 0) {
      return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –ø–æ–¥–≤–∞–ª! ‚ùå`, {
        keyboard: JSON.stringify({
          "inline": true,
          "buttons": [
            [{
              "action": {
                "type": "text",
                "payload": JSON.stringify({command: "–¥–æ–º–∞"}),
                "label": "üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞"
              },
              "color": "positive"
            }]
          ]
        })
      });
    }

    if (!message.user.realty.basement) {
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\n\nüåê –ü–æ–¥–≤–∞–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ DogeCoin (DOG) ü™ô\nüí∞ –¶–µ–Ω–∞ –ø–æ–¥–≤–∞–ª–∞: 100 SpringCoins`, 
        {
          keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"}),
                  "label": "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"
                },
                "color": "positive"
              }],
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–¥–æ–º–∞"}),
                  "label": "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–æ–º–∞–º"
                },
                "color": "secondary"
              }]
            ]
          })
        }
      );
    }

    if (message.user.realty.basement && message.user.misc.videocard_count < 1) {
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\n\nüìº –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç! ‚ùå`, 
        {
          keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"}),
                  "label": "üõí –ö—É–ø–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"
                },
                "color": "positive"
              }]
             
            ]
          })
        }
      );
    }
 
    if (message.user.realty.basement && message.user.misc.videocard_count > 0) {
      const sell = videocards.find((x) => x.id === message.user.misc.videocard);
      const maxBalance = sell.prib * message.user.misc.videocard_count * 100;
      
      return bot(
        `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –ø–æ–¥–≤–∞–ª–µ:\n\nüìº –í–∞—à–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:\n${sell.name} (${message.user.misc.videocard_count}—à—Ç.)\n` +
        `üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.videocard_dg)} DOG\n` +
        `üîù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${utils.sp(maxBalance)} DOG (100 —á–∞—Å–æ–≤)`,
        {
          keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å"}),
                  "label": "üí∞ –°–Ω—è—Ç—å DOGE"
                },
                "color": "positive"
              }],
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"}),
                  "label": "üîã –ú–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"
                },
                "color": "primary"
              }],
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                  "label": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"
                },
                "color": "secondary"
              }]
            ]
          })
        }
      );
    }
  }
});
cmd.hear(/^(?:–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞ —Å–Ω—è—Ç—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.misc.videocard) {
      return bot(`–£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã ‚ùå`, {
        keyboard: JSON.stringify({
          "inline": true,
          "buttons": [
            [{
              "action": {
                "type": "text",
                "payload": JSON.stringify({command: "–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"}),
                "label": "üõí –ö—É–ø–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã"
              },
              "color": "positive"
            }]
          ]
        })
      });
    }

    if (!message.user.videocard_dg) {
      return bot(
        `–ù–∞ –≤–∞—à–µ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –Ω–æ–≤—ã–µ DogeCoin –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ! ‚úÖ`,
        {
          keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
              [{
                "action": {
                  "type": "text",
                  "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                  "label": "üîô –ö –ø–æ–¥–≤–∞–ª—É"
                },
                "color": "secondary"
              }]
            ]
          })
        }
      );
    }

    const dg_ = message.user.videocard_dg * message.user.misc.videocard_count;
    message.user.dcoins += dg_;
    message.user.videocard_dg = 0;

    return bot(
      `–í—ã —Å–æ–±—Ä–∞–ª–∏ ${utils.sp(dg_)} DOG, —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—è–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ —á–∞—Å. ‚åö\n` +
      `ü™ô –ë–∞–ª–∞–Ω—Å DOG: ${utils.sp(message.user.dcoins)}`,
      {
        keyboard: JSON.stringify({
          "inline": true,
          "buttons": [
            [{
              "action": {
                "type": "text",
                "payload": JSON.stringify({command: "–ø—Ä–æ–¥–∞—Ç—å –¥–æ–≥–µ–∫–æ–∏–Ω"}),
                "label": "üí∞ –ü—Ä–æ–¥–∞—Ç—å DOGE"
              },
              "color": "positive"
            }],
            [{
              "action": {
                "type": "text",
                "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                "label": "üîô –ö –ø–æ–¥–≤–∞–ª—É"
              },
              "color": "secondary"
            }]
          ]
        })
      }
    );
  }
});

cmd.hear(/^(?:–¥–æ–º|üè° –î–æ–º|–¥–æ–º–∞)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–æ–º–∞ –∏ –ø–æ–¥–≤–∞–ª–∞
        if (message.user.realty.home !== 0) {
            const homeInfo = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –¥–æ–º–µ:\n\nüè° –î–æ–º: ¬´${homes[message.user.realty.home - 1].name}¬ª`;
            let basementInfo = message.user.realty.basement 
                ? "‚ñ∂Ô∏è –ü–æ–¥–≤–∞–ª: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" 
                : "‚ñ∂Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –º–∞–π–Ω–∏—Ç—å DogeCoin, –∫—É–ø–∏—Ç–µ –ø–æ–¥–≤–∞–ª!\nüî∞ –¶–µ–Ω–∞ –ø–æ–¥–≤–∞–ª–∞: 100 SpringCoins ‚ò£Ô∏è";
            
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            const buttons = [];
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–≤–∞–ª–∞
            buttons.push([{
                "action": {
                    "type": "text",
                    "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                    "label": "üõ† –ü–æ–¥–≤–∞–ª"
                },
                "color": "primary"
            }]);
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–≤–∞–ª–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
            if (!message.user.realty.basement) {
                buttons[0].push({
                    "action": {
                        "type": "text",
                        "payload": JSON.stringify({command: "–∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"}),
                        "label": "üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"
                    },
                    "color": "positive"
                });
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–∞–∂–∏ –¥–æ–º–∞
            buttons.push([{
                "action": {
                    "type": "text",
                    "payload": JSON.stringify({command: "–ø—Ä–æ–¥–∞—Ç—å –¥–æ–º"}),
                    "label": "üí∏ –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"
                },
                "color": "negative"
            }]);
            
            return bot(`${homeInfo}\n${basementInfo}`, {
                keyboard: JSON.stringify({
                    "inline": true,
                    "buttons": buttons
                })
            });
        }

        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if (!message.args[1]) {
            let homeList = `–¥–æ–º–∞:\n\n`;
            
            homes.forEach(home => {
                const hasDiscount = home.sell > 0;
                const currentPrice = hasDiscount ? home.cost2 : home.cost;
                
                homeList += `${message.user.realty.home === home.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${home.id}. ${home.name}\n`;
                homeList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    homeList += ` üî• –°–∫–∏–¥–∫–∞ ${home.sell}%`;
                }
                
                homeList += `\n\n`;
            });
            
            homeList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–î–æ–º [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(homeList);
        }
        
        // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø–æ–∫—É–ø–∫–∏ –¥–æ–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const sell = homes.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.realty.home) {
            return bot(
                `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º ¬´${homes[message.user.realty.home - 1].name}¬ª ‚ùå\n–ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ ¬´–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º¬ª`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –¥–æ–º`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º`
                                },
                                "color": "negative"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.realty.home = sell.id;
        
        let purchaseMessage = `–í—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%, —ç–∫–æ–Ω–æ–º–∏—è ${utils.sp(sell.cost - priceToPay)} ${val1})`;
        }
        
        return bot(purchaseMessage);
    }
});

// –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
cmd.hear(/^(?:–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã|üîã –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã)\s?([0-9]+)?\s?(.*)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–æ–º –∏ –ø–æ–¥–≤–∞–ª
        if (message.user.realty.home === 0) return bot(`–£ –í–∞—Å –Ω–µ—Ç –¥–æ–º–∞! ‚ùå`, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: "–¥–æ–º"}),
                            "label": "üè† –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞"
                        },
                        "color": "primary"
                    }]
                ]
            })
        });
        
        if (!message.user.realty.basement) return bot(`–£ –í–∞—Å –Ω–µ—Ç –ø–æ–¥–≤–∞–ª–∞! ‚ùå`, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: "–∫—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"}),
                            "label": "üõí –ö—É–ø–∏—Ç—å –ø–æ–¥–≤–∞–ª"
                        },
                        "color": "positive"
                    }]
                ]
            })
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        if (!message.args[1]) {
            let vgaList = `üîã –ú–∞–π–Ω–∏–Ω–≥ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã:\n\n`;
            
            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
            const buttons = [];
            const maxButtonsPerRow = 2;
            
            videocards.forEach((vga, index) => {
                const hasDiscount = vga.sell > 0;
                const currentPrice = hasDiscount ? vga.cost2 : vga.cost;
                
                vgaList += `${message.user.misc.videocard === vga.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${vga.id}. ${vga.name}\n`;
                vgaList += `–î–æ—Ö–æ–¥: ${utils.sp(vga.prib)} DOG/—á–∞—Å\n`;
                vgaList += `–¶–µ–Ω–∞: ${utils.sp(currentPrice)} SpringCoins`;
                
                if (hasDiscount) {
                    vgaList += ` üî• –°–∫–∏–¥–∫–∞ ${vga.sell}%`;
                }
                
                vgaList += `\n\n`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                if (index % maxButtonsPerRow === 0) {
                    buttons.push([{
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: `–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã ${vga.id} 1`}),
                            "label": `üõí ${vga.id}. ${vga.name}`
                        },
                        "color": "primary"
                    }]);
                } else {
                    buttons[buttons.length - 1].push({
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: `–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã ${vga.id} 1`}),
                            "label": `üõí ${vga.id}. ${vga.name}`
                        },
                        "color": "primary"
                    });
                }
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–≤–∞–ª–∞
            buttons.push([{
                "action": {
                    "type": "text",
                    "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                    "label": "üîç –ú–æ–π –ø–æ–¥–≤–∞–ª"
                },
                "color": "secondary"
            }]);
            
            vgaList += `üìå –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏:`;
            
            return bot(vgaList, {
                keyboard: JSON.stringify({
                    "inline": true,
                    "buttons": buttons
                })
            });
        }
        
        // –ü–æ–∫—É–ø–∫–∞ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        const sell = videocards.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const count = Math.floor(message.args[2] ? Number(message.args[2]) : 1);
        if (count <= 0) return bot(`‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 0`);
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        const totalPrice = priceToPay * count;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (message.user.misc.videocard !== 0 && message.user.misc.videocard !== sell.id) {
            return bot(`‚ùå –£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã!`);
        }
        
        if (count + message.user.misc.videocard_count > message.user.limit.videocardlimit) {
            return bot(`‚ùå –õ–∏–º–∏—Ç: ${message.user.limit.videocardlimit} –≤–∏–¥–µ–æ–∫–∞—Ä—Ç`);
        }
        
        if (message.user.sprcoin < totalPrice) {
            return bot(
                `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SpringCoins! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.sprcoin)}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(totalPrice)}`
            );
        }
        
        // –ü–æ–∫—É–ø–∫–∞
        message.user.sprcoin -= totalPrice;
        message.user.misc.videocard = sell.id;
        message.user.misc.videocard_count += count;
        
        let purchaseMessage = `–í—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª (${count} —à—Ç.) –∑–∞ ${utils.sp(totalPrice)} SpringCoins`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–≤–∞–ª–∞ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        return bot(purchaseMessage, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: "–ø–æ–¥–≤–∞–ª"}),
                            "label": "üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–≤–∞–ª"
                        },
                        "color": "positive"
                    }]
                ]
            })
        });
    }
});

setInterval(() => {
    double.filter(x => x.misc.videocard !== 0 && x.bans.ban == false).forEach(x => {
        const vga = videocards.find(card => card.id === x.misc.videocard);
        if (!vga) return;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –±–∞–ª–∞–Ω—Å (100 —á–∞—Å–æ–≤ –¥–æ–±—ã—á–∏)
        const maxBalance = vga.prib * x.misc.videocard_count * 100;
        
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º—É–º–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if (x.videocard_dg >= maxBalance) return;
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥
        x.videocard_dg += vga.prib * x.misc.videocard_count;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        if (x.videocard_dg > maxBalance) {
            x.videocard_dg = maxBalance;
        }
    });
}, 3600000); // –ö–∞–∂–¥—ã–π —á–∞—Å



module.exports = commands;
