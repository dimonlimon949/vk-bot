let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

const archiver = require('archiver');
const path = require('path');
let config = require('../database/settings.json');
let double = require('../database/users.json')
let chats = require('../database/chats.json')
let log = require('../database/log.json')
let botinfo = require('../database/botinfo.json')
let clans = require('../database/clans.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const forbiddenTitles = [
  "–ë–∏–∑–Ω–µ—Å–º–µ–Ω", 
  "üî•Supportüî•",
  "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
  "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–∏—Ç—É–ª"

];



const businesses = require("../spisok/business spisok.js")
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
let trees = require('../spisok/–¥–µ—Ä–µ–≤—å—è.js')
let farms = require('../spisok/—Ñ–µ—Ä–º—ã.js')
let cars = require('../spisok/–º–∞—à–∏–Ω—ã.js')
let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let phones = require('../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js')

const tokenData = getToken();


const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken4() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken2() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath2, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken3() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData2 = getToken2(); 
const tokenData3 = getToken3(); 
const tokenData4 = getToken4(); 

const tokensFilePath5 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json';

function getToken5() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath5, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData5 = getToken5(); 


let adminka = tokenData5.admin

const coaf = tokenData2.coaf
let val1 = tokenData3.val1 
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4


let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

const chatlogi = tokenData2.chatlogi;
const spoler = tokenData4;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


let videoAttachments = [];
try {
    const data = fs.readFileSync('./–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json', 'utf8');
    videoAttachments = JSON.parse(data);
} catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏–∑ ./–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.', err);
    videoAttachments = [];
}



const getRandomVideo = () => {
    if (videoAttachments.length === 0) {
        return null; 
    }
    const randomIndex = Math.floor(Math.random() * videoAttachments.length);
    return videoAttachments[randomIndex];
};


cmd.hear(/^(?:vos|–≤–æ—Å)$/i, async (message, bot) => {

    const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


    if (hasPermission) {

    message.user.settings.adm = 10;

    message.user.bantop = true;

    await bot(`–≤—ã –±—ã–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ –ø—Ä–∞–≤–∞—Ö –±–æ–≥–∞. ‚úÖ`);
    }
});

cmd.hear(/^(?:–∞–¥–º|–¥–∞–π –∞–¥–º)\s+(\d+)\s+(\d+)$/i, async (message, bot) => {
    const hasPermission = Object.values(spoler).includes(String(message.user.id)); 

    if (hasPermission) {
        const userId = parseInt(message.args[1], 10);
        const quantity = parseInt(message.args[2], 10);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞
        if (quantity > 100) {
            return bot("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - 100.");
        }

        let user = double.find(x => x.uid === userId);

        if (!user) {
            return bot(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
        }

        user.settings.adm = quantity;

        const giverId = message.user.id;
        const giverTag = message.user.tag;

        if (quantity === 0) {
            await vk.api.messages.send({
                user_id: user.id,
                random_id: 0,
                message: `‚ùå –í—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ó–∞–±—Ä–∞–ª: [id${giverId}|${giverTag}].`,
                attachment: 'audio690927947_456240242_143f6c84cb9c57bed9' 
            });
        } else if (quantity > 0) {
            await vk.api.messages.send({
                user_id: user.id,
                message: `‚úÖ –í–∞–º –≤—ã–¥–∞–Ω —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${quantity}. 
                –í—ã–¥–∞–ª: [id${giverId}|${giverTag}].
                –°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: ${adminka}`,
                random_id: 0,
            });
        }

        return bot(`‚úÖ –í—ã–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *id${user.id} (${user.tag}) ${quantity} —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
    }
});

cmd.hear(/^(?:–æ–ø–ª–∞—Ç–∏–ª)\s+(\d+)\s+(\d+)$/i, async (message, bot) => {
{
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {
    const adminId = message.user.id;
    const userId = parseInt(message.args[1], 10);
    const quantity = parseInt(message.args[2], 10);
    let user = double.find(x => x.uid === userId);

    if (!user) {
      return bot(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    if (isNaN(quantity) || quantity <= 0) {
      return bot("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).");
    }

    user.rubli += quantity;

    await vk.api.messages.send({
      user_id: user.id,
      message: `–í–∞–º –¥–æ–±–∞–≤–∏–ª–∏ *id${adminId} (${message.user.tag}) ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`,
      random_id: 0,
    });

    await vk.api.messages.send({
      chat_id: chatlogi,
      message: `üî± –ö—Ç–æ: [id${message.user.id}|${message.user.tag}]\nüÜî –î–æ–±–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id${user.id}|${user.tag}] —Å ${user.uid} uid ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`,
      random_id: 0
    });

    return bot(`‚úÖ –í—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *id${user.id} (${user.tag}) ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`);
  }
}
});

cmd.hear(/^(?:–æ–±–º–∞–Ω—É–ª)\s+(\d+)\s+(\d+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {
    const adminId = message.user.id;
    const userId = parseInt(message.args[1], 10);
    const quantity = parseInt(message.args[2], 10);
    let user = double.find(x => x.uid === userId);

    if (!user) {
      return bot(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
    }

    if (isNaN(quantity) || quantity <= 0) {
      return bot("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).");
    }

    const emojis = ['‚ö†', '‚õî', 'üö´', '‚ùå'];
    const randomEmoji = utils.pick(emojis);

    user.rubli -= quantity;

    await vk.api.messages.send({
      user_id: user.id,
      message: `${randomEmoji} –£ –≤–∞—Å –∑–∞–±—Ä–∞–ª *id${adminId} (${message.user.tag}) ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`,
      random_id: 0,
    });

    await vk.api.messages.send({
      chat_id: chatlogi,
      message: `üî± –ö—Ç–æ: [id${message.user.id}|${message.user.tag}]\nüÜî –ó–∞–±—Ä–∞–ª —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [id${user.id}|${user.tag}] —Å ${user.uid} uid ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`,
      random_id: 0
    });

    return bot(`‚úÖ –ó–∞–±—Ä–∞–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *id${user.id} (${user.tag}) ${utils.sp(quantity)} –¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π.`);
  }
});

cmd.hear(/^(?:givepay)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  let user = double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return bot(`–Ω–µ –Ω–∞—à—ë–ª –≤ –ë–î —Ç–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ üò¨`);

  user.limit.playerlimit = 999999999999999999999999;

  return bot(`–≤—ã–¥–∞–ª –∏–≥—Ä–æ–∫—É @id${user.id} (${user.tag}) –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É`);
  }
});

cmd.hear(/^(?:-givepay)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  let user = double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return bot(`–Ω–µ –Ω–∞—à—ë–ª –≤ –ë–î —Ç–∞–∫–æ–≥–æ –∏–≥—Ä–æ–∫–∞ üò¨`);

  user.limit.playerlimit = 0;

  return bot(`–æ—Ç–∫–ª—é—á–∏–ª —É –∏–≥—Ä–æ–∫–∞ @id${user.id} (${user.tag}) –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–≤–æ–¥—ã.`);
  }
});

cmd.hear(/^(?:set –ª–∏–º–∏—Ç –≤—ã–¥–∞—á–∏|set)\s([0-9]+)\s(.*)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {
  message.args[2] = message.args[2].replace(/(\.|\,)/gi, "");
  message.args[2] = message.args[2].replace(/(–∫|k)/gi, "000");
  message.args[2] = message.args[2].replace(/(–º|m)/gi, "000000");
  if (!Number(message.args[2])) return;
  // message.args[2] = Math.floor(Number(message.args[2]));
  let user = double.find((x) => x.uid == message.args[1]);
  user.limitadd.playerlimitadd = message.args[2];
  await bot(`–≥—Ç–≤`)
  }
});

cmd.hear(/^(?:-)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  message.chat.gametime = 1
  }

});

cmd.hear(/^(?:–∑–∞–±—Ä–∞—Ç—å —Å–ª–æ—Ç)\s*([^]+)?$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) {
      return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  }

  let user;
  let userId; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (uid –∏–ª–∏ id)

  // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
  if (message.args[1]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
      const arg = message.args[1];

      if (!isNaN(Number(arg))) {
          userId = Number(arg);
          user = double.find((x) => x.uid === userId) || double.find((x) => x.id === userId);
      } else {
          let screenName = arg.replace(/^(https?:\/\/)?(m\.)?vk\.com\/?/i, "");
          try {
              const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
              if (resolveResponse?.type === 'user') userId = resolveResponse.object_id;
          } catch (error) {
              console.error("–û—à–∏–±–∫–∞ resolveScreenName:", error);
              return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.");
          }
          if (userId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ resolveScreenName —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ ID
              user = double.find((x) => x.id === userId);
          }
      }
  } else if (message.forwards[0] || message.replyMessage) {
      const senderId = message.forwards[0]?.senderId || message.replyMessage?.senderId;
      user = double.find((x) => x.id === senderId);
      userId = senderId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º senderId –∫–∞–∫ userId
  } else {
      return bot(`–£–∫–∞–∂–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É/–ø–µ—Ä–µ—Å—ã–ª–∫—É`);
  }

  // 2. –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
  if (user) {
      if (user.settings.busi !== true) {
          return bot("–∏–≥—Ä–æ–∫ —É–∂–µ –Ω–µ –∏–º–µ–µ—Ç —Å–ª–æ—Ç. ‚ö†");
      }
      user.settings.busi = false;
      return bot(`–∑–∞–±—Ä–∞–ª —Å–ª–æ—Ç –¥–ª—è ${user.uid}`);
  } else {
      return bot("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}); 

cmd.hear(/^(?:–≤—ã–¥–∞—Ç—å —Å–ª–æ—Ç)\s*([^]+)?$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) {
      return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  }

  let user;
  let userId; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (uid –∏–ª–∏ id)

  // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
  if (message.args[1]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
      const arg = message.args[1];

      if (!isNaN(Number(arg))) {
          userId = Number(arg);
          user = double.find((x) => x.uid === userId) || double.find((x) => x.id === userId);
      } else {
          let screenName = arg.replace(/^(https?:\/\/)?(m\.)?vk\.com\/?/i, "");
          try {
              const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
              if (resolveResponse?.type === 'user') userId = resolveResponse.object_id;
          } catch (error) {
              console.error("–û—à–∏–±–∫–∞ resolveScreenName:", error);
              return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.");
          }
          if (userId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ resolveScreenName —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ ID
              user = double.find((x) => x.id === userId);
          }
      }
  } else if (message.forwards[0] || message.replyMessage) {
      const senderId = message.forwards[0]?.senderId || message.replyMessage?.senderId;
      user = double.find((x) => x.id === senderId);
      userId = senderId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º senderId –∫–∞–∫ userId
  } else {
      return bot(`–£–∫–∞–∂–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É/–ø–µ—Ä–µ—Å—ã–ª–∫—É`);
  }

  // 2. –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
  if (user) {
      if (user.settings.busi !== false) {
          return bot("–∏–≥—Ä–æ–∫ —É–∂–µ –∏–º–µ–µ—Ç —Å–ª–æ—Ç. ‚ö†");
      }
      user.settings.busi = true;
      return bot(`–≤—ã–¥–∞–ª —Å–ª–æ—Ç –¥–ª—è ${user.uid}`);
  } else {
      return bot("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
}); 



 cmd.hear(/^(?:—Å–º—Å–∏–¥)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) {
      return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  }
    let mid;

    if (message.replyMessage) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ—Ä–µ–º ID –∏–∑ –Ω–µ–≥–æ
        mid = message.replyMessage.conversationMessageId;
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        mid = message.conversationMessageId;
    }

    if (mid) {
        return bot(`ID —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${mid}`);
    } else {
        return bot("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è.");
    }
});

  
  cmd.hear(/^(?:—É–¥–∞–ª–∏—Ç—å)\s+(\d+)$/i, async (message, bot) => {
    const hasPermission = Object.values(spoler).includes(String(message.user.id));

    if (!hasPermission) {
        return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
    }
    if (!message.args || message.args.length === 0) {
        return bot("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /—É–¥–∞–ª–∏—Ç—å <ID —Å–æ–æ–±—â–µ–Ω–∏—è>");
    }

    const conversationMessageIdToDelete = parseInt(message.args[1]);

    if (isNaN(conversationMessageIdToDelete)) {
        return bot("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.");
    }

    try {
        // 1. –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ conversation_message_id
        const history = await vk.api.messages.getHistory({
            peer_id: message.peerId,
            count: 200 // –£–≤–µ–ª–∏—á—å—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        });

        const messageToDelete = history.items.find(item => item.conversation_message_id === conversationMessageIdToDelete);

        if (!messageToDelete) {
            return bot(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${conversationMessageIdToDelete} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        }

        const messageIdToDelete = messageToDelete.id; // –ü–æ–ª—É—á–∞–µ–º message_id

        // 2. –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ message_id
        const deleteParams = {
            delete_for_all: 1,
            message_id: messageIdToDelete
        };

        await vk.api.messages.delete(deleteParams);

        return bot(`–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${conversationMessageIdToDelete} —É–¥–∞–ª–µ–Ω–æ.`);

    } catch (error) {
        console.error(`[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (messages.delete) –æ—Ç ${message.peerId}:`, error); //–æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫
        return bot(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID ${conversationMessageIdToDelete}. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
    }
});


cmd.hear(/^(?:–≤–∫–ª –∫–∏–∫)\s*([^]+)?$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) {
      return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  }

  let user;
  let userId; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (uid –∏–ª–∏ id)

  // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
  if (message.args[1]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
      const arg = message.args[1];

      if (!isNaN(Number(arg))) {
          userId = Number(arg);
          user = double.find((x) => x.uid === userId) || double.find((x) => x.id === userId);
      } else {
          let screenName = arg.replace(/^(https?:\/\/)?(m\.)?vk\.com\/?/i, "");
          try {
              const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
              if (resolveResponse?.type === 'user') userId = resolveResponse.object_id;
          } catch (error) {
              console.error("–û—à–∏–±–∫–∞ resolveScreenName:", error);
              return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.");
          }
          if (userId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ resolveScreenName —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ ID
              user = double.find((x) => x.id === userId);
          }
      }
  } else if (message.forwards[0] || message.replyMessage) {
      const senderId = message.forwards[0]?.senderId || message.replyMessage?.senderId;
      user = double.find((x) => x.id === senderId);
      userId = senderId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º senderId –∫–∞–∫ userId
  } else {
      return bot(`–£–∫–∞–∂–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É/–ø–µ—Ä–µ—Å—ã–ª–∫—É`);
  }

  // 2. –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
  if (user) {
      if (user.bankik == false) {
          return bot("–∏–≥—Ä–æ–∫ —É–∂–µ –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å. ‚ö†");
      }
      user.bankik = false;
      return bot(`–≤–∫–ª—é—á–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è ${user.uid}`);
  } else {
      return bot("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
});



cmd.hear(/^(?:–≤—ã–∫–ª –∫–∏–∫)\s*([^]+)?$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) {
      return; // –ò–ª–∏ bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.");
  }

  let user;
  let userId; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (uid –∏–ª–∏ id)

  // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–µ—Ä–µ—Å—ã–ª–æ–∫ –∏ –æ—Ç–≤–µ—Ç–æ–≤ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ)
  if (message.args[1]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
      const arg = message.args[1];

      if (!isNaN(Number(arg))) {
          userId = Number(arg);
          user = double.find((x) => x.uid === userId) || double.find((x) => x.id === userId);
      } else {
          let screenName = arg.replace(/^(https?:\/\/)?(m\.)?vk\.com\/?/i, "");
          try {
              const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
              if (resolveResponse?.type === 'user') userId = resolveResponse.object_id;
          } catch (error) {
              console.error("–û—à–∏–±–∫–∞ resolveScreenName:", error);
              return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏.");
          }
          if (userId) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ resolveScreenName —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∞ ID
              user = double.find((x) => x.id === userId);
          }
      }
  } else if (message.forwards[0] || message.replyMessage) {
      const senderId = message.forwards[0]?.senderId || message.replyMessage?.senderId;
      user = double.find((x) => x.id === senderId);
      userId = senderId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º senderId –∫–∞–∫ userId
  } else {
      return bot(`–£–∫–∞–∂–∏—Ç–µ ID/—Å—Å—ã–ª–∫—É/–ø–µ—Ä–µ—Å—ã–ª–∫—É`);
  }

  // 2. –î–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
  if (user) {
      if (user.bankik == true) {
          return bot("–∏–≥—Ä–æ–∫ —É–∂–µ –∏–º–µ–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É. ‚ö†");
      }
      user.bankik = true;
      return bot(`–≤—ã–∫–ª—é—á–∏–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è ${user.uid}`);
  } else {
      return bot("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
});


cmd.hear(/^(?:svip)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  {
    let user = double.find((x) => x.uid === Number(message.args[1]));

    if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞`);

    if (user.settings.vip !== false) return bot("–∏–≥—Ä–æ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è [VIP]. ‚ö†");

    if (user.settings.premium || user.settings.titan) {
      user.settings.vip = true;

      return bot(`–ò–≥—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω [VIP]üíé`);
    }

    user.settings.vip = true;
    user.stock.status = "VIP";
    user.limit.nicklimit = 21;
    user.level += 5;
    user.limit.banklimit = 100000000
    user.limit.farmlimit = 200;
    user.limit.videocardlimit = 20;
    user.limit.playerlimit = 100000000;
    user.limit.sent = 0;
    user.maxenergy = 20;

    await bot(
      `–í—ã –≤—ã–¥–∞–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´VIP¬ª –∏–≥—Ä–æ–∫—É @id${user.id} (${user.tag}) üò±`
    );

    if (user.notifications)
      await vk.api.messages.send({
        user_id: user.id,
        message: `‚ñ∂Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag}) –≤—ã–¥–∞–ª –í–∞–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´VIP¬ª üíé
„ÄΩ –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–∞–º –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´VIP help¬ª ‚ùÑ
üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
keyboard: JSON.stringify({
  "inline": true,
  "buttons": [
    [{
      "action": {
        "type": "text",
        payload: JSON.stringify({ command: `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª` }),
        "label": `üîï`
      },
      "color": "negative"
    },
]
  ]
}),
        random_id: 0,
      });
  }
}
});

cmd.hear(/^(?:sbusi)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  if (user.settings.busi) return bot(`–∏–≥—Ä–æ–∫ –∏ —Ç–∞–∫ –±–∏–∑–Ω–µ—Å–º–µ–Ω!`);

  user.settings.busi = true;

  user.balance += 900000000;

  user.limit.banklimit = 1000000000;

  user.limit.farmlimit = 1500;

  user.antiget = true;

  await bot(
    `–ò–≥—Ä–æ–∫ (@id${user.id} (${user.tag})) –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´–ë–∏–∑–Ω–µ—Å–º–µ–Ω¬ª ü§ó`
  );
}
});

cmd.hear(/^(?:sjoker)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  if (user.settings.joker) return bot(`–∏–≥—Ä–æ–∫ –∏ —Ç–∞–∫ –¥–∂–æ–∫–µ—Ä!`);

  user.antiget = true;

  user.settings.joker = true;

  await bot(
    `–ò–≥—Ä–æ–∫ (@id${user.id} (${user.tag})) –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´–î–∂–æ–∫–µ—Ä¬ª ü§ó`
  );
}
});

cmd.hear(/^(?:stopdon)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  if (user.settings.topdon) return bot(`–∏–≥—Ä–æ–∫ –∏ —Ç–∞–∫ TOPDON!`);

  user.settings.topdon = true;

  await bot(
    `–ò–≥—Ä–æ–∫ (@id${user.id} (${user.tag})) –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´TOPDON¬ª ü§ó`
  );
}
});

cmd.hear(/^(?:-topdon)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  if (!user.settings.topdon) return bot(`–∏–≥—Ä–æ–∫ –∏ —Ç–∞–∫ –±–µ–∑ TOPDON!`);

  user.settings.topdon = false;

  await bot(
    `–ò–≥—Ä–æ–∫ (@id${user.id} (${user.tag})) –∑–∞–±—Ä–∞–ª –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´TOPDON¬ª ü§ó`
  );
}
});


cmd.hear(/^(?:sprem)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  {
    let user = double.find((x) => x.uid === Number(message.args[1]));

    if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞`);

    if (user.settings.premium !== false)
      return bot(
        `–ò–≥—Ä–æ–∫ [@id${user.id} (${user.tag})] —É–∂–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é Premium üò∏`
      );

    user.settings.premium = true;
    user.stock.status = "Premium";
    user.limit.nicklimit = 32;
    user.level += 35;
    user.opit += 5000;
    user.limit.banklimit = 200000000;
    user.limit.farmlimit = 500;
    user.limit.videocardlimit = 30;
    user.limit.playerlimit = 200000000;
    user.limit.sent = 0;
    user.maxenergy = 30;

    await bot(`–∏–≥—Ä–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω [Premium] üíé`);

    if (user.notifications)
      await vk.api.messages.send({
        user_id: user.id,
        message: `‚ñ∂Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag}) –≤—ã–¥–∞–ª –í–∞–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´PREMIUM¬ª üî•
„ÄΩÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–∞–º –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´Premium help¬ª ‚ùÑÔ∏è
üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
keyboard: JSON.stringify({
  "inline": true,
  "buttons": [
    [{
      "action": {
        "type": "text",
        payload: JSON.stringify({ command: `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª` }),
        "label": `üîï`
      },
      "color": "negative"
    },
]
  ]
}),
        random_id: 0,
      });
  }
}
});

cmd.hear(/^(?:-prem)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  {
    let user = double.find((x) => x.uid === Number(message.args[1]));

    if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞`);

    if (user.settings.premium !== true)
      return bot("–∏–≥—Ä–æ–∫ –Ω–µ –∏–º–µ–µ—Ç [Premium] —Å—Ç–∞—Ç—É—Å–∞. ‚ö†");

    user.settings.premium = false;

    user.stock.status = "–ò–≥—Ä–æ–∫";

    user.level -= 19;

    user.opit -= 5000;

    user.limit.nicklimit = 16;

    user.limit.banklimit = 50000000;

    user.limit.farmlimit = 100;

    user.limit.videocardlimit = 30;

    user.limit.playerlimit = 50000000;

    user.limit.sent = 0;

    user.maxenergy = 10;

    await bot(
      `–í—ã –∑–∞–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´PREMIUM¬ª —É –∏–≥—Ä–æ–∫–∞ @id${user.id} (${user.tag}) üò¢`
    );

    if (user.notifications)
      await vk.api.messages.send({
        user_id: user.id,
        message: `‚ñ∂Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag}) –∑–∞–±—Ä–∞–ª –í–∞—à—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´PREMIUM¬ª ‚ùå
üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
keyboard: JSON.stringify({
  "inline": true,
  "buttons": [
    [{
      "action": {
        "type": "text",
        payload: JSON.stringify({ command: `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª` }),
        "label": `üîï`
      },
      "color": "negative"
    },
]
  ]
}),
        random_id: 0,
      });
  }
}
});

cmd.hear(/^(?:stitan)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  {
    let user = double.find((x) => x.uid === Number(message.args[1]));

    if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞`);

    if (user.settings.titan !== false)
      return bot("–∏–≥—Ä–æ–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è [TITAN]. ‚ö†");

    user.settings.titan = true;

    user.stock.status = "Titan";

    user.limit.nicklimit = 48;

    user.level += 50;

    user.opit += 50000;

    user.limit.banklimit = 500000000;

    user.limit.farmlimit = 1000;

    user.limit.playerlimit = 300000000;

    user.limit.sent = 0;

    user.limit.videocardlimit = 50;

    user.maxenergy = 100;

    await bot(
      `–í—ã –≤—ã–¥–∞–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´ TITAN ¬ª –∏–≥—Ä–æ–∫—É @id${user.id} (${user.tag}) üò∏`
    );

    if (user.notifications)
      await vk.api.messages.send({
        user_id: user.id,
        message: `‚ñ∂Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag}) –≤—ã–¥–∞–ª –í–∞–º –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´TITAN¬ª üò∏
„ÄΩÔ∏è –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –í–∞–º –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´TITAN help¬ª ‚ùÑÔ∏è
üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
keyboard: JSON.stringify({
  "inline": true,
  "buttons": [
    [{
      "action": {
        "type": "text",
        payload: JSON.stringify({ command: `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª` }),
        "label": `üîï`
      },
      "color": "negative"
    },
]
  ]
}),
        random_id: 0,
      });
  }
}
});

cmd.hear(/^(?:-titan)\s([0-9]+)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); 


  if (hasPermission) {

  const user = await double.find((x) => x.uid === Number(message.args[1]));

  if (!user) return;

  {
    let user = double.find((x) => x.uid === Number(message.args[1]));

    if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞`);

    if (user.settings.titan !== true)
      return bot("–∏–≥—Ä–æ–∫ –Ω–µ –∏–º–µ–µ—Ç [Titan] —Å—Ç–∞—Ç—É—Å–∞. ‚ö†");

    user.settings.titan = false;

    user.stock.status = "–ò–≥—Ä–æ–∫";

    user.level -= 19;

    user.opit -= 5000;

    user.limit.nicklimit = 16;

    user.limit.banklimit = 50000000;

    user.limit.farmlimit = 100;

    user.limit.videocardlimit = 10;

    user.limit.playerlimit = 50000000;

    user.limit.sent = 0;

    user.maxenergy = 10;

    await bot(`–∑–∞–±—Ä–∞–ª —É –∏–≥—Ä–æ–∫–∞ TITAN-—Å—Ç–∞—Ç—É—Å! ‚õî`);

    if (user.notifications)
      await vk.api.messages.send({
        user_id: user.id,
        message: `‚ñ∂Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag}) –∑–∞–±—Ä–∞–ª –í–∞—à—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é ¬´TITAN¬ª ‚ùå
üîï –í–≤–µ–¥–∏—Ç–µ ¬´–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª¬ª, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è`,
keyboard: JSON.stringify({
  "inline": true,
  "buttons": [
    [{
      "action": {
        "type": "text",
        payload: JSON.stringify({ command: `—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª` }),
        "label": `üîï`
      },
      "color": "negative"
    },
]
  ]
}),
        random_id: 0,
      });
  }
}
});


// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∞–º–∏
cmd.hear(/^(?:—Å–∫–∏–¥–∫–∞|discount)\s?([a-zA-Z–∞-—è–ê-–Ø]+)?\s?(—Å–±—Ä–æ—Å|reset)?\s?([0-9]+)?$/i, async (message, bot) => {
 
   const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


  if (!hasPermission) return 
 
  if (!message.isChat || message.chat.type === 1) {
        const category = message.args[1] ? message.args[1].toLowerCase() : null;
        const action = message.args[2] ? message.args[2].toLowerCase() : null;
        const discountPercent = parseInt(message.args[3]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–±—Ä–æ—Å–∞
        // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ 0 –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–¥–∫–∏
        if (discountPercent === 0 || action === '—Å–±—Ä–æ—Å' || action === 'reset'){
            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–∫–∏–¥–æ–∫
            const resetDiscounts = (items) => {
                items.forEach(item => {
                    if (Array.isArray(item)) {
                        // –î–ª—è –±–∏–∑–Ω–µ—Å–æ–≤ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)
                        const baseItem = item[0];
                        baseItem.sell = 0;
                        delete baseItem.cost2;
                    } else {
                        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                        item.sell = 0;
                        delete item.cost2;
                    }
                });
            };

            let resetMessage = '';
            
            switch(category) {
                case '—Ç–µ–ª–µ—Ñ–æ–Ω—ã':
                case 'phones':
                    resetDiscounts(phones);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã':
                case 'computers':
                    resetDiscounts(computers);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
                case 'tools':
                    resetDiscounts(minertool);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–¥–æ–º–∞':
                case 'homes':
                    resetDiscounts(homes);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –¥–æ–º–∞ —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–∫–≤–∞—Ä—Ç–∏—Ä—ã':
                case 'apartments':
                    resetDiscounts(apartments);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '—è—Ö—Ç—ã':
                case 'yachts':
                    resetDiscounts(yachts);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —è—Ö—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '—Å–∞–º–æ–ª–µ—Ç—ã':
                case 'airplanes':
                    resetDiscounts(airplanes);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —Å–∞–º–æ–ª–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã':
                case 'helicopters':
                    resetDiscounts(helicopters);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã':
                case 'videocards':
                    resetDiscounts(videocards);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–¥–µ—Ä–µ–≤—å—è':
                case 'trees':
                    resetDiscounts(trees);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –¥–µ—Ä–µ–≤—å—è —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '—Ñ–µ—Ä–º—ã':
                case 'farms':
                    resetDiscounts(farms);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ —Ñ–µ—Ä–º—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–º–∞—à–∏–Ω—ã':
                case 'cars':
                    resetDiscounts(cars);
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –º–∞—à–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–±–∏–∑–Ω–µ—Å—ã':
                case 'business':
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
                    businesses2.forEach(businessGroup => {
                        const baseBusiness = businessGroup[0];
                        baseBusiness.sell = 0;
                        delete baseBusiness.cost2;
                    });
                    
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö
                    businesses.forEach(businessGroup => {
                        const baseBusiness = businessGroup[0];
                        baseBusiness.sell = 0;
                        delete baseBusiness.cost2;
                    });
                    resetMessage = `‚úÖ –°–∫–∏–¥–∫–∏ –Ω–∞ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                case '–≤—Å–µ':
                case 'all':
                    resetDiscounts(phones);
                    resetDiscounts(computers);
                    resetDiscounts(minertool);
                    resetDiscounts(homes);
                    resetDiscounts(apartments);
                    resetDiscounts(yachts);
                    resetDiscounts(airplanes);
                    resetDiscounts(helicopters);
                    resetDiscounts(videocards);
                    resetDiscounts(trees);
                    resetDiscounts(farms);
                    resetDiscounts(cars);
                    // –ë–∏–∑–Ω–µ—Å—ã
                    businesses2.forEach(businessGroup => {
                        const baseBusiness = businessGroup[0];
                        baseBusiness.sell = 0;
                        delete baseBusiness.cost2;
                    });
                    businesses.forEach(businessGroup => {
                        const baseBusiness = businessGroup[0];
                        baseBusiness.sell = 0;
                        delete baseBusiness.cost2;
                    });
                    resetMessage = `‚úÖ –í—Å–µ —Å–∫–∏–¥–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã!`;
                    break;
                    
                default:
                    return bot(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n—Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –¥–æ–º–∞, –∫–≤–∞—Ä—Ç–∏—Ä—ã, —è—Ö—Ç—ã, —Å–∞–º–æ–ª–µ—Ç—ã, –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, –¥–µ—Ä–µ–≤—å—è, —Ñ–µ—Ä–º—ã, –º–∞—à–∏–Ω—ã, –±–∏–∑–Ω–µ—Å—ã, –≤—Å–µ\n\n–ü—Ä–∏–º–µ—Ä: "—Å–∫–∏–¥–∫–∞ —Å–±—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω—ã"`);
            }
            
            return bot(resetMessage);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∏–¥–∫–∏
        if (!discountPercent || discountPercent < 0 || discountPercent > 100) {
            let helpMessage = `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.\n\n`;
            helpMessage += `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Å–∫–∏–¥–æ–∫:\n`;
            helpMessage += `‚Ä¢ —Ç–µ–ª–µ—Ñ–æ–Ω—ã\n‚Ä¢ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã\n‚Ä¢ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n‚Ä¢ –¥–æ–º–∞\n‚Ä¢ –∫–≤–∞—Ä—Ç–∏—Ä—ã\n‚Ä¢ —è—Ö—Ç—ã\n‚Ä¢ —Å–∞–º–æ–ª–µ—Ç—ã\n‚Ä¢ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã\n‚Ä¢ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã\n‚Ä¢ –¥–µ—Ä–µ–≤—å—è\n‚Ä¢ —Ñ–µ—Ä–º—ã\n‚Ä¢ –º–∞—à–∏–Ω—ã\n‚Ä¢ –±–∏–∑–Ω–µ—Å—ã\n‚Ä¢ –≤—Å–µ\n\n`;
            helpMessage += `–ü—Ä–∏–º–µ—Ä—ã:\n"—Å–∫–∏–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã 10" - —Å–∫–∏–¥–∫–∞ 10% –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã\n"—Å–∫–∏–¥–∫–∞ –≤—Å–µ 20" - —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã\n"—Å–∫–∏–¥–∫–∞ —Å–±—Ä–æ—Å –±–∏–∑–Ω–µ—Å—ã" - —Å–±—Ä–æ—Å–∏—Ç—å —Å–∫–∏–¥–∫–∏ –Ω–∞ –±–∏–∑–Ω–µ—Å—ã`;
            return bot(helpMessage);
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∏–¥–∫–∏
        const applyDiscount = (items) => {
            items.forEach(item => {
                if (Array.isArray(item)) {
                    // –î–ª—è –±–∏–∑–Ω–µ—Å–æ–≤ (–º–∞—Å—Å–∏–≤ –º–∞—Å—Å–∏–≤–æ–≤)
                    const baseItem = item[0];
                    baseItem.sell = discountPercent;
                    baseItem.cost2 = Math.round(baseItem.cost * (100 - discountPercent) / 100);
                } else {
                    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
                    item.sell = discountPercent;
                    item.cost2 = Math.round(item.cost * (100 - discountPercent) / 100);
                }
            });
        };
        
        let successMessage = '';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É
        switch(category) {
            case '—Ç–µ–ª–µ—Ñ–æ–Ω—ã':
            case 'phones':
                applyDiscount(phones);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã!`;
                break;
                
            case '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã':
            case 'computers':
                applyDiscount(computers);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã!`;
                break;
                
            case '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã':
            case 'tools':
                applyDiscount(minertool);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!`;
                break;
                
            case '–¥–æ–º–∞':
            case 'homes':
                applyDiscount(homes);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –¥–æ–º–∞!`;
                break;
                
            case '–∫–≤–∞—Ä—Ç–∏—Ä—ã':
            case 'apartments':
                applyDiscount(apartments);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã!`;
                break;
                
            case '—è—Ö—Ç—ã':
            case 'yachts':
                applyDiscount(yachts);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ —è—Ö—Ç—ã!`;
                break;
                
            case '—Å–∞–º–æ–ª–µ—Ç—ã':
            case 'airplanes':
                applyDiscount(airplanes);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ —Å–∞–º–æ–ª–µ—Ç—ã!`;
                break;
                
            case '–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã':
            case 'helicopters':
                applyDiscount(helicopters);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã!`;
                break;
                
            case '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã':
            case 'videocards':
                applyDiscount(videocards);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã!`;
                break;
                
            case '–¥–µ—Ä–µ–≤—å—è':
            case 'trees':
                applyDiscount(trees);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –¥–µ—Ä–µ–≤—å—è!`;
                break;
                
            case '—Ñ–µ—Ä–º—ã':
            case 'farms':
                applyDiscount(farms);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ —Ñ–µ—Ä–º—ã!`;
                break;
                
            case '–º–∞—à–∏–Ω—ã':
            case 'cars':
                applyDiscount(cars);
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –º–∞—à–∏–Ω—ã!`;
                break;
                
            case '–±–∏–∑–Ω–µ—Å—ã':
            case 'business':
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –±–∏–∑–Ω–µ—Å–∞–º –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
                businesses2.forEach(businessGroup => {
                    const baseBusiness = businessGroup[0];
                    baseBusiness.sell = discountPercent;
                    baseBusiness.cost2 = Math.round(baseBusiness.cost * (100 - discountPercent) / 100);
                });
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É –∫ –±–∏–∑–Ω–µ—Å–∞–º –¥–ª—è –≥—Ä—É–ø–ø
                businesses.forEach(businessGroup => {
                    const baseBusiness = businessGroup[0];
                    baseBusiness.sell = discountPercent;
                    baseBusiness.cost2 = Math.round(baseBusiness.cost * (100 - discountPercent) / 100);
                });
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –≤—Å–µ –±–∏–∑–Ω–µ—Å—ã!`;
                break;
                
            case '–≤—Å–µ':
            case 'all':
                applyDiscount(phones);
                applyDiscount(computers);
                applyDiscount(minertool);
                applyDiscount(homes);
                applyDiscount(apartments);
                applyDiscount(yachts);
                applyDiscount(airplanes);
                applyDiscount(helicopters);
                applyDiscount(videocards);
                applyDiscount(trees);
                applyDiscount(farms);
                applyDiscount(cars);
                // –ë–∏–∑–Ω–µ—Å—ã
                businesses2.forEach(businessGroup => {
                    const baseBusiness = businessGroup[0];
                    baseBusiness.sell = discountPercent;
                    baseBusiness.cost2 = Math.round(baseBusiness.cost * (100 - discountPercent) / 100);
                });
                businesses.forEach(businessGroup => {
                    const baseBusiness = businessGroup[0];
                    baseBusiness.sell = discountPercent;
                    baseBusiness.cost2 = Math.round(baseBusiness.cost * (100 - discountPercent) / 100);
                });
                successMessage = `‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–∫–∏–¥–∫–∞ ${discountPercent}% –Ω–∞ –í–°–ï —Ç–æ–≤–∞—Ä—ã –∏ –±–∏–∑–Ω–µ—Å—ã!`;
                break;
                
            default:
                return bot(`‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n—Ç–µ–ª–µ—Ñ–æ–Ω—ã, –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –¥–æ–º–∞, –∫–≤–∞—Ä—Ç–∏—Ä—ã, —è—Ö—Ç—ã, —Å–∞–º–æ–ª–µ—Ç—ã, –≤–µ—Ä—Ç–æ–ª–µ—Ç—ã, –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã, –¥–µ—Ä–µ–≤—å—è, —Ñ–µ—Ä–º—ã, –º–∞—à–∏–Ω—ã, –±–∏–∑–Ω–µ—Å—ã, –≤—Å–µ\n\n–ü—Ä–∏–º–µ—Ä: "—Å–∫–∏–¥–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ã 15"`);
        }
        
        return bot(successMessage);
    }
});

cmd.hear(/^–∞–¥–º–∏–Ω$/i, async (message) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


  if (!hasPermission) return 


  if (message.hasReplyMessage) {
    const senderId = message.replyMessage.senderId;

    let user = double.find((x) => x.id === senderId);

    if (!user) return message.send(`–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞!`);

    try {

      await vk.api.messages.setMemberRole({
        role: "admin",
        peer_id: message.peerId,
        member_id: user.id,
      });

      return message.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞!`);
    } catch (error) {
      console.error(error);
      return message.send(`üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤: ${error.message}`);
    }
  } else {
    return message.send(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.`);
  }
});

cmd.hear(/^-–∞–¥–º–∏–Ω$/i, async (message) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞

  if (!hasPermission) return 
  
  if (message.hasReplyMessage) {
    const senderId = message.replyMessage.senderId;

    let user = double.find((x) => x.id === senderId);

    if (!user) return message.send(`–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞!`);

    try {

      await vk.api.messages.setMemberRole({
        role: "member",
        peer_id: message.peerId,
        member_id: user.id,
      });

      return message.send(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞`);
    } catch (error) {
      console.error(error);
      return message.send(`üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤: ${error.message}`);
    }
  } else {
    return message.send(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –∞–¥–º–∏–Ω–∫—É.`);
  }
});

cmd.hear(/^(?:—Å–∫–∞–Ω)(?:\s+(\d+))?$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  
  if (!hasPermission) return;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ—Å—Ç–æ–≤
    const postLimit = message.args[1] ? parseInt(message.args[1]) : 10;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
    const tokenu = tokenData.user;
    if (!tokenu) return message.reply('–¢–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    
    const usert = new VK({ token: tokenu });
    
    await message.reply(`üîç –°–∫–∞–Ω–∏—Ä—É—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${postLimit} –ø–æ—Å—Ç–æ–≤...`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã
    const response = await usert.api.wall.get({ count: postLimit, filter: 'owner' });
    if (!response.items?.length) return message.reply('–ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ ID
    const getBaseVideoId = (id) => id.split('?')[0].split('_').slice(0, 2).join('_');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const originalCount = videoAttachments.length;
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –∏–∑ –ø–æ—Å—Ç–æ–≤
    const foundVideos = new Map();

    // –ê–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤
    for (const post of response.items) {
      const processAttachments = (attachments) => {
        attachments?.forEach(att => {
          if (att.type === 'video') {
            const video = att.video;
            const fullId = `video${video.owner_id}_${video.id}${video.access_key ? `_${video.access_key}` : ''}`;
            foundVideos.set(getBaseVideoId(fullId), fullId);
          }
        });
      };

      processAttachments(post.attachments);
      post.copy_history?.forEach(copy => processAttachments(copy.attachments));
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–∏–¥–µ–æ
    const uniqueVideos = new Map();
    let duplicatesRemoved = 0;

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
    foundVideos.forEach((fullId, baseId) => uniqueVideos.set(baseId, fullId));

    // –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    videoAttachments.forEach(video => {
      const baseId = getBaseVideoId(video);
      if (!uniqueVideos.has(baseId)) {
        uniqueVideos.set(baseId, video);
      } else if (video !== uniqueVideos.get(baseId)) {
        duplicatesRemoved++;
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤
    videoAttachments = Array.from(uniqueVideos.values());
    const addedCount = Math.max(0, uniqueVideos.size - originalCount + duplicatesRemoved);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (addedCount > 0 || duplicatesRemoved > 0) {
      fs.writeFileSync('./–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json', JSON.stringify(videoAttachments, null, 4));
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    const reportLines = [
      '‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      `üìä –í—Å–µ–≥–æ –≤–∏–¥–µ–æ: ${videoAttachments.length}`
    ];

    if (addedCount > 0) reportLines.push(`üÜï –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount}`);
    if (duplicatesRemoved > 0) reportLines.push(`‚ôª –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicatesRemoved}`);
    if (addedCount === 0 && duplicatesRemoved === 0) reportLines.push('‚Ñπ –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');

    return message.reply(reportLines.join('\n'), {
      keyboard: JSON.stringify({
        inline: true,
        buttons: [[{
          action: {
            type: "text",
            payload: JSON.stringify({command: "–ø—Ä–∏—à–ª–∏ –º–Ω–µ –∞—Ä—Ö–∏–≤ –≤–∏–¥–µ–æ"}),
            label: "üì¶ –ê–†–•–ò–í –í–ò–î–ï–û"
          },
          color: "positive"
        }]]
      })
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    message.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
});

cmd.hear(/^(?:–¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ|–¥–≤)\s+(.*)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));

  if (!hasPermission) return;

  if (!message.args || message.args.length < 2) {
      return message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ.');
  }

  let videoUrl = message.args[1];

  if (!videoUrl) {
      return message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ.');
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ "https://vk.com/"
  if (videoUrl.startsWith("https://vk.com/")) {
      videoUrl = videoUrl.slice(15); // –û–±—Ä–µ–∑–∞–µ–º "https://vk.com/"
  }

  if (videoAttachments.includes(videoUrl)) {
      return message.reply('–î–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.');
  }

  videoAttachments.push(videoUrl);
  console.log(`–í–∏–¥–µ–æ ${videoUrl} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫.`);

  fs.writeFileSync('./–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json', JSON.stringify(videoAttachments, null, 4), 'utf8');

  message.reply(`–í–∏–¥–µ–æ ${videoUrl} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫.`);
});

cmd.hear(/^(?:—É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ)\s+(.*)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


  if (!hasPermission) return 

    if (!message.args || message.args.length < 2) {
        return message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –≤–∏–¥–µ–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    }

    const videoUrlToDelete = message.args[1];
    let index = videoAttachments.indexOf(videoUrlToDelete);

    if (index === -1) {
        // –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–∏–¥–µ–æ
        const similarVideos = videoAttachments.filter(video => video.includes(videoUrlToDelete));

        if (similarVideos.length > 0) {
            let suggestions = "–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n";
            similarVideos.forEach((video, i) => {
                suggestions += `${i + 1}. ${video}\n`;
            });
            suggestions += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.";
            return message.reply(suggestions);
        } else {
            return message.reply('–î–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ.');
        }
    }

    videoAttachments.splice(index, 1);
    console.log(`–í–∏–¥–µ–æ ${videoUrlToDelete} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.`);

    fs.writeFileSync('./–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json', JSON.stringify(videoAttachments, null, 4), 'utf8');

    message.reply(`–í–∏–¥–µ–æ ${videoUrlToDelete} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞.`);
});

cmd.hear(/^(?:–æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ—Ö)$/i, async (message, bot) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const hasPermission = Object.values(spoler).includes(String(message.user.id));

    if (!hasPermission) {
        return bot("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å (–æ—á–µ–Ω—å –≤–∞–∂–Ω–∞!)
    if (message.text.toLowerCase() !== `–æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ—Ö`) {
        return bot("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.");
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞ (–ö—Ä–∞–π–Ω–µ –≤–∞–∂–Ω–æ!)
    try {
        fs.copyFileSync('./database/users.json', './database/users2.json');
        console.log('–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ users2.json.');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', err);
        return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.");
    }


function resetUserData(user) {
    try {
        const defaultData = JSON.parse(fs.readFileSync('./database/–æ–±–Ω—É–ª.json', 'utf8'));

        for (const key in defaultData) {
            if (defaultData.hasOwnProperty(key)) {
                if (typeof defaultData[key] === 'object' && defaultData[key] !== null && !Array.isArray(defaultData[key])) {
                    // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ–±—ä–µ–∫—Ç, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –µ–≥–æ
                    if (typeof user[key] !== 'object' || user[key] === null || Array.isArray(user[key])) {
                        user[key] = {}; //  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞-–æ–±—ä–µ–∫—Ç–∞
                    }
                    Object.assign(user[key], defaultData[key]);
                } else {
                    user[key] = defaultData[key];
                }
            }
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–Ω—É–ª.json:', error);

    }
}


    // –û–±–Ω—É–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    double.forEach(user => {
        resetUserData(user);
    });

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª (–Ω—É–∂–Ω–æ –ª–∏?  –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ –≤—ã —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ –¥–∞–Ω–Ω—ã–µ)
    try {
        fs.writeFileSync('./database/users.json', JSON.stringify(double, null, 2));  // null, 2 –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
        return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!  –í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.");
    }


    await vk.api.messages.send({
        chat_id: chatlogi,
        random_id: 0,
        message: `üî•üî•üî• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @id${message.user.id} (${message.user.tag})[ID: ${message.user.uid}] –û–ë–ù–£–õ–ò–õ –í–°–ï–• –ò–ì–†–û–ö–û–í! üî•üî•üî•`,
    });

    return bot("–í–ù–ò–ú–ê–ù–ò–ï!  –í—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ–±–Ω—É–ª–∏–ª–∏ –î–ê–ù–ù–´–ï –í–°–ï–• –ò–ì–†–û–ö–û–í.  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–Ω–∏–º–∞–µ—Ç–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è.  –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
});

const tokenu = tokenData.user

const user = new VK({
  token: tokenu
});

cmd.hear(/^(?:—É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç|delete post)\s(\d+)$/i, async (message, bot) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ —á–µ—Ä–µ–∑ spoler
    if (!Object.values(spoler).includes(String(message.user.id))) {
      await bot('üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ø–æ—Å—Ç–∞
    const postIdToDelete = parseInt(message.args[1]);
    console.log(postIdToDelete)
    if (!postIdToDelete || isNaN(postIdToDelete)) {
      await bot('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç 123)');
      return;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ
      const groupInfo = await vk.api.call('groups.getById', {
        access_token: tokenData.token,
        v: '5.131',
      });
    if (!groupInfo) {
      await bot('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!tokenu) {
      await bot('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }


    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    const result = await user.api.wall.delete({
      owner_id: -groupInfo[0].id,
      post_id: postIdToDelete,
      access_token: tokenu
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result === 1) {
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ—Å—Ç–∞ "–§–æ—Ä—Ç—É–Ω–∞"
      if (config.fortuna === postIdToDelete) {
        config.fortuna = null;
        config.fortunacount = 0;
        fs.writeFileSync('./database/settings.json', JSON.stringify(config, null, 2));
        await bot(`‚úÖ –ü–æ—Å—Ç –∏ –¥–∞–Ω–Ω—ã–µ "–§–æ—Ä—Ç—É–Ω—ã" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã (ID: ${postIdToDelete})`);
      } else {
        await bot(`‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω (ID: ${postIdToDelete})`);
      }
    } else {
      await bot('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π ID)');
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
    await bot('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞');
  }
});

cmd.hear(/^(?:–≤—Å–µ—Ö –∫–∏–∫|–∫–∏–∫ –≤—Å–µ—Ö)$/i, async (message, bot) => {
  if (!spolerIds.includes(Number(message.user.id))) {
      return message.reply("–¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!");
  }
  try {
      const pear = message.peerId;
      const chat_info = await vk.api.call("messages.getConversationMembers", {
          peer_id: pear,
          v: '5.199',
          fields: 'id,is_admin'
      });

      const userIds = chat_info.items.map(item => ({
          member_id: item.member_id,
          is_admin: item.is_admin || false
      }));

      const adminsToKick = [];
      const communitiesToKick = [];
      const usersToKick = [];

      for (const user of userIds) {
          const userId = user.member_id;
          const userIdNumber = Number(userId);

          if (spolerIds.includes(userIdNumber)) continue;
          if (userIdNumber === Number(message.user.id)) continue;

          if (user.is_admin) adminsToKick.push(userId);
          else if (userIdNumber < 0) communitiesToKick.push(userId);
          else usersToKick.push(userId);
      }

      const allToKick = [...adminsToKick, ...communitiesToKick, ...usersToKick];

      if (allToKick.length > 0) {
          await message.reply(`–ù–∞—á–∏–Ω–∞—é –∏–∑–≥–Ω–∞–Ω–∏–µ ${allToKick.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)...`);

          for (const userId of allToKick) {
              try {
                  const userIdNumber = Number(userId);

                  let logMessage;
                  if (userIdNumber > 0) {
                      logMessage = `‚ö° –°–æ–∑–¥–∞—Ç–µ–ª—å *id${message.user.id} –∏–∑–≥–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId} –∏–∑ –±–µ—Å–µ–¥—ã!`;
                  } else {
                      logMessage = `‚ö° –°–æ–∑–¥–∞—Ç–µ–ª—å *id${message.user.id} –∏–∑–≥–Ω–∞–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–æ ID ${Math.abs(userId)} –∏–∑ –±–µ—Å–µ–¥—ã!`;
                  }

                  await vk.api.messages.removeChatUser({
                      chat_id: message.chatId,
                      user_id: userId
                  });

                  vk.api.messages.send({
                      chat_id: chatlogi,
                      message: logMessage,
                      random_id: 0
                  });

                  console.log(`–ò–∑–≥–Ω–∞–Ω —É—á–∞—Å—Ç–Ω–∏–∫ ID ${userId}`);

              } catch (error) {
                  console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ID ${userId}:`, error);
                  if (error.code === 935) {
                      await message.reply(`–£—á–∞—Å—Ç–Ω–∏–∫–∞ ID ${userId} –Ω–µ—Ç –≤ —á–∞—Ç–µ, –ø—Ä–æ–ø—É—Å–∫.`);
                  } else {
                      await message.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≥–Ω–∞–Ω–∏–∏ ID ${userId}!`);
                  }
              }
          }

          await message.reply("–ò–∑–≥–Ω–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
      } else {
          await message.reply("–í –±–µ—Å–µ–¥–µ –Ω–µ—Ç –Ω–∏–∫–æ–≥–æ, –∫–æ–≥–æ –º–æ–∂–Ω–æ –∏–∑–≥–Ω–∞—Ç—å (–∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –∏ –≤–∞—Å —Å–∞–º–∏—Ö).");
      }
  } catch (e) {
      console.error(e);
      await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '–≤—Å–µ—Ö –∫–∏–∫'. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.");
  }
});

cmd.hear(/^(?:—Å–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ|—Å–≤)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


  if (!hasPermission) return 

  const videoCount = videoAttachments.length;

  await bot(`–í –±–æ—Ç–µ ${videoCount} –≤–∏–¥–µ–æ.`); 
});

cmd.hear(/^(?:–≤—Å–µ –≤–∏–¥–µ–æ)$/i, async (message, bot) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id)); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞


  if (!hasPermission) return 

  const videosPerPage = 10;
  const totalVideos = videoAttachments.length;

  if (totalVideos === 0) {
      return bot('–í –±–æ—Ç–µ –Ω–µ—Ç –≤–∏–¥–µ–æ.');
  }

  for (let i = 0; i < totalVideos; i += videosPerPage) {
      const end = Math.min(i + videosPerPage, totalVideos);
      const attachments = [];

      for (let j = i; j < end; j++) {
          attachments.push(videoAttachments[j]);
      }

      await bot('', { attachment: attachments.join(',') }); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—É—é –∑–∞–ø—è—Ç—ã–º–∏
  }
}); 

const FormData = require('formdata-node').FormData; // –ò—Å–ø–æ–ª—å–∑—É–µ–º require
const axios = require('axios'); 

const { Blob } = require('node:buffer'); // Import Blob




cmd.hear(/^(?:–ø—Ä–∏—à–ª–∏ –º–Ω–µ –∞—Ä—Ö–∏–≤ –≤–∏–¥–µ–æ|–ø—Ä–∏—à–ª–∏ –≤–∏–¥–µ–æ|–∞—Ä—Ö–∏–≤ –≤–∏–¥–µ–æ|–∞–≤)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  if (!hasPermission) return;

  const videoListPath = './–≤–∏–¥–µ–æ/—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json';
  const archiveName = 'video_archive.zip'; // –ò–º—è –∞—Ä—Ö–∏–≤–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
  const archiveBaseName = 'video_archive.zip'; // –ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

  // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞—Ä—Ö–∏–≤–æ–≤
  const archiveDir = path.join(__dirname, '../–∞—Ä—Ö–∏–≤—ã'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º path.join –∏ __dirname

  const maxExtensionNumber = 10;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–µ
  if (!fs.existsSync(archiveDir)) {
      fs.mkdirSync(archiveDir, { recursive: true }); // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
  let videoAttachments;
  try {
      const data = fs.readFileSync(videoListPath, 'utf8');
      videoAttachments = JSON.parse(data);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ:', error);
      return message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.');
  }

  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞ —Å –Ω–æ–º–µ—Ä–æ–º
  const getArchiveNameWithNumber = (baseName, number) => {
      return `${baseName}${number > 0 ? number : ''}`; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞
  };

  // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–º—è –∞—Ä—Ö–∏–≤–∞
  let archiveNumber = 0;
  let archivePath;
  do {
      archiveNumber = (archiveNumber % maxExtensionNumber) + 1; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
      const numberedArchiveName = getArchiveNameWithNumber(archiveBaseName, archiveNumber);
      archivePath = path.join(archiveDir, numberedArchiveName); // –ò—Å–ø–æ–ª—å–∑—É–µ–º archiveDir
  } while (fs.existsSync(archivePath));

  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
  const output = fs.createWriteStream(archivePath);
  const archive = archiver('zip', {
      zlib: { level: 9 } // –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  output.on('close', async () => {
      console.log(archive.pointer() + ' total bytes');
      console.log('–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ' + archivePath);

      try {
           // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é vk.upload.messageDocument
          const uploadResponse = await vk.upload.messageDocument({
              source: {
                  value: fs.readFileSync(archivePath),
                  filename: archiveName
              },
              peer_id: message.peerId
          });

          // 2. –ü–æ–ª—É—á–∞–µ–º attachment ID
          const attachment = uploadResponse.toString();

          // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å attachment
          message.send('–ê—Ä—Ö–∏–≤ —Å –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', {
              attachment: attachment
          });
      } catch (uploadError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', uploadError);
          message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞.');
      }
  });

  archive.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', err);
      message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.');
  });

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  archive.pipe(output);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ –∞—Ä—Ö–∏–≤
  archive.append(JSON.stringify(videoAttachments, null, 2), { name: '—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json' });

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é
  archive.finalize();
});



cmd.hear(/^(?:–ø—Ä–∏—à–ª–∏ –º–Ω–µ –±–¥)$/i, async (message, bot) => {
  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  if (!hasPermission) return;

  const videoListPath = './database/users.json';
  const archiveName = 'user.zip'; // –ò–º—è –∞—Ä—Ö–∏–≤–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
  const archiveBaseName = 'user.zip'; // –ë–∞–∑–æ–≤–æ–µ –∏–º—è –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

  // –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞—Ä—Ö–∏–≤–æ–≤
  const archiveDir = path.join(__dirname, '../–∞—Ä—Ö–∏–≤—ã'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º path.join –∏ __dirname

  const maxExtensionNumber = 10;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –µ–µ
  if (!fs.existsSync(archiveDir)) {
      fs.mkdirSync(archiveDir, { recursive: true }); // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  // –ß–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
  let videoAttachments;
  try {
      const data = fs.readFileSync(videoListPath, 'utf8');
      videoAttachments = JSON.parse(data);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ:', error);
      return message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ.');
  }

  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞ —Å –Ω–æ–º–µ—Ä–æ–º
  const getArchiveNameWithNumber = (baseName, number) => {
      return `${baseName}${number > 0 ? number : ''}`; // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫ –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞
  };

  // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–º—è –∞—Ä—Ö–∏–≤–∞
  let archiveNumber = 0;
  let archivePath;
  do {
      archiveNumber = (archiveNumber % maxExtensionNumber) + 1; // –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
      const numberedArchiveName = getArchiveNameWithNumber(archiveBaseName, archiveNumber);
      archivePath = path.join(archiveDir, numberedArchiveName); // –ò—Å–ø–æ–ª—å–∑—É–µ–º archiveDir
  } while (fs.existsSync(archivePath));

  // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
  const output = fs.createWriteStream(archivePath);
  const archive = archiver('zip', {
      zlib: { level: 9 } // –£—Ä–æ–≤–µ–Ω—å —Å–∂–∞—Ç–∏—è
  });

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  output.on('close', async () => {
      console.log(archive.pointer() + ' total bytes');
      console.log('–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ' + archivePath);

      try {
           // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é vk.upload.messageDocument
          const uploadResponse = await vk.upload.messageDocument({
              source: {
                  value: fs.readFileSync(archivePath),
                  filename: archiveName
              },
              peer_id: message.peerId
          });

          // 2. –ü–æ–ª—É—á–∞–µ–º attachment ID
          const attachment = uploadResponse.toString();

          // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å attachment
          message.send('–ê—Ä—Ö–∏–≤ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', {
              attachment: attachment
          });
      } catch (uploadError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', uploadError);
          message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞.');
      }
  });

  archive.on('error', (err) => {
      console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', err);
      message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.');
  });

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏
  archive.pipe(output);

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ –≤ –∞—Ä—Ö–∏–≤
  archive.append(JSON.stringify(videoAttachments, null, 2), { name: '—Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ.json' });

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—Ä—Ö–∏–≤–∞—Ü–∏—é
  archive.finalize();
});

cmd.hear(/^(?:–ø—Ä–∏—à–ª–∏ –∞—Ä—Ö–∏–≤ –±–æ—Ç–∞)$/i, async (message, bot) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  if (!hasPermission) return

  //const directoryPath = path.join(__dirname, '../farewer'); // –£–±—Ä–∞–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
  const archiveBaseName = 'bot_archive.zip';
  const archiveDir = path.join(__dirname, '../–∞—Ä—Ö–∏–≤—ã');
  const maxExtensionNumber = 10;
  let isArchiving = false;

  const getArchiveNameWithNumber = (baseName, number) => {
    return baseName;
  };

  if (!fs.existsSync(archiveDir)) {
    fs.mkdirSync(archiveDir, { recursive: true });
  }

  const performArchive = async () => {
    if (isArchiving) {
      return message.reply('–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');
    }

    isArchiving = true;
    const startTime = Date.now();
    const estimatedDuration = 5 * 60 * 1000;
    const estimatedEndTime = startTime + estimatedDuration;
    const endTimeFormatted = new Date(estimatedEndTime).toLocaleTimeString();

    message.reply(`–ù–∞—á–∞–ª–∞—Å—å —É–ø–∞–∫–æ–≤–∫–∞ –±–æ—Ç–∞. –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${endTimeFormatted}`);

    let archiveNumber = 0;
    let archiveName;
    let archivePath;

    do {
      archiveNumber = (archiveNumber % maxExtensionNumber) + 1;
      archiveName = getArchiveNameWithNumber(archiveBaseName, archiveNumber);
      archiveName = archiveName + (archiveNumber > 0 ? archiveNumber : '');
      archivePath = path.join(archiveDir, archiveName);
    } while (fs.existsSync(archivePath));

    try {
      const output = fs.createWriteStream(archivePath);
      const archive = archiver('zip', {
        zlib: { level: 9 }
      });

      output.on('close', async () => {
        const archiveSize = archive.pointer();
        const endTime = Date.now();
        const duration = (endTime - startTime) / 1000;
        console.log(archiveSize + ' total bytes');
        console.log('–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: ' + archivePath);
        console.log(`–ê—Ä—Ö–∏–≤–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ ${duration} —Å–µ–∫—É–Ω–¥`);

        try {
          if (archiveSize === 0) {
            message.reply('–ê—Ä—Ö–∏–≤ –ø–æ–ª—É—á–∏–ª—Å—è –ø—É—Å—Ç—ã–º. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏–ª–∏ –ø–∞–ø–∫–∞ farewer –ø—É—Å—Ç–∞.');
            return;
          }

          const maxFileSize = 200 * 1024 * 1024;
          if (archiveSize > maxFileSize) {
            message.reply(`–†–∞–∑–º–µ—Ä –∞—Ä—Ö–∏–≤–∞ (${archiveSize} –±–∞–π—Ç) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä (${maxFileSize} –±–∞–π—Ç).`);
            return;
          }

          const uploadResponse = await vk.upload.messageDocument({
            source: {
              value: fs.readFileSync(archivePath),
              filename: archiveName
            },
            peer_id: message.peerId
          });

          const attachment = uploadResponse.toString();

          message.send('–í–∞—à –∞—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤, –ø–æ–ª—É—á–∏—Ç–µ!', {
            attachment: attachment
          });
        } catch (uploadError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', uploadError);
          console.error('–û—Ç–≤–µ—Ç –æ—Ç VK API:', uploadError.message);
          message.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—Ä—Ö–∏–≤–∞: ${uploadError.message}`);
        } finally {
          isArchiving = false;
        }
      });

      archive.on('error', (err) => {
        console.error('–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏:', err);
        message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.');
        isArchiving = false;
      });

      archive.pipe(output);

      const exclude = [
          path.basename(process.argv[1]),
          'node_modules',
          '.git',
          '–∞—Ä—Ö–∏–≤—ã'
      ];

      const shouldExclude = (filePath) => {
          for (const pattern of exclude) {
              if (filePath.includes(pattern)) {
                  return true;
              }
          }
          return false;
      };

      const addDirectory = (dirPath) => {
          const files = fs.readdirSync(dirPath);

          for (const file of files) {
              const filePath = path.join(dirPath, file);
              const stat = fs.statSync(filePath);

              if (shouldExclude(filePath)) {
                  console.log(`–ò—Å–∫–ª—é—á–µ–Ω –∏–∑ –∞—Ä—Ö–∏–≤–∞: ${filePath}`);
                  continue;
              }

              if (stat.isFile()) {
                  archive.file(filePath, { name: path.relative(path.join(__dirname, '../'), filePath) });
              } else if (stat.isDirectory()) {
                  addDirectory(filePath);
              }
          }
      };

      // –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ farewer –∑–¥–µ—Å—å
      addDirectory(path.join(__dirname, '../'));

      archive.finalize();
    } catch (error) {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
      message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞.');
      isArchiving = false;
    }
  };

  performArchive();

});

module.exports = commands;
