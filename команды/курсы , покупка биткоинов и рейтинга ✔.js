let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')
let botinfo = require('../database/botinfo.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData3 = getToken3();

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }
}, 1000);

const tokenData = getToken();

const chatlogi = tokenData.chatlogi;
const spoler = tokenData.spoler;
const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js');

let btc = 'N/A';
let dog = 'N/A';
let btcAdvice = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ BTC.";
let dogAdvice = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ DOGE.";

let previousBtc = null;
let previousDog = null;

function unixStampLefta(stampa) {
  stampa = stampa / 1000;
  let s = stampa % 60;
  stampa = (stampa - s) / 60;
  let m = stampa % 60;
  let text = ``;
  if (m > 0) text += addZero(Math.floor(m)) + " –º–∏–Ω. ";
  if (s > 0) text += addZero(Math.floor(s)) + " —Å–µ–∫.";
  return text;
}

function addZero(i) {
  return i < 10 ? "0" + i : i;
}

let kursrudtime = Date.now() + 301000;

let btcPriceHistory = [];
const btcHistoryMaxLength = 24;

function formatNumber(number) {
    return number.toLocaleString('en-US', {
        minimumFractionDigits: 0,
        maximumFractionDigits: 0,
    });
}

function formatDog(number) {
    return number.toFixed(3);
}

async function getCoinGeckoPrice(ids) {
    try {
        const response = await fetch(`https://api.coingecko.com/api/v3/simple/price?ids=${ids}&vs_currencies=usd`);
        if (!response.ok) {
            throw new Error(``)
        }
        return await response.json();
    } catch (error) {
        console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ CoinGecko:", error);
        return null;
    }
}

const cursFilePath = './–∫—É—Ä—Å/curs.json';

function getCursData() {
    try {
        const data = JSON.parse(fs.readFileSync(cursFilePath, 'utf8'));
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ curs.json:', error);
        return {
            btc: 'N/A',
            dog: 'N/A',
            btcAdvice: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ BTC.",
            dogAdvice: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ DOGE."
        };
    }
}

function saveCursData(data) {
    try {
        const saveData = {
            btc: typeof data.btc === 'string' ? parseFloat(data.btc.replace(/,/g, '')) : data.btc,
            dog: typeof data.dog === 'string' ? parseFloat(data.dog) : data.dog,
            btcAdvice: data.btcAdvice,
            dogAdvice: data.dogAdvice
        };

        fs.writeFileSync(cursFilePath, JSON.stringify(saveData, null, 2), 'utf8');
        console.log('–î–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ curs.json.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ curs.json:', error);
    }
}

let cursData = getCursData();
btc = cursData.btc;
dog = cursData.dog;
btcAdvice = cursData.btcAdvice;
dogAdvice = cursData.dogAdvice;

async function updatePrice(coin, setter, formatter, previous, coinName, adviceSetter) {
    const data = await getCoinGeckoPrice(coin);
    if (data && data[coin] && data[coin].usd) {
        const newPrice = data[coin].usd;
        const formattedPrice = formatter(newPrice);
        setter(formattedPrice);

        let changeMessage = '';
        let advice = '';
        let difference = 0;

        if (previous !== null) {
            difference = newPrice - previous;

            if (Math.abs(difference) >= 0.0005) {
                if (difference > 0) {
                    changeMessage = `+${formatter(difference)} (–ü–æ–¥–æ—Ä–æ–∂–∞–ª)`;
                    advice = `${coinName} –ø–æ–¥–æ—Ä–æ–∂–∞–ª!`;
                } else if (difference < 0) {
                    changeMessage = `${formatter(difference)} (–ü–æ–¥–µ—à–µ–≤–µ–ª)`;
                    advice = `${coinName} –ø–æ–¥–µ—à–µ–≤–µ–ª!`;
                }
            } else {
                changeMessage = "–¶–µ–Ω–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å";
                advice = `${coinName} —Å—Ç–∞–±–∏–ª–µ–Ω.`;
            }
        } else {
            advice = `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ ${coinName}.`;
        }

        if (coin === "bitcoin") {
            btcPriceHistory.push({
                price: newPrice,
                timestamp: Date.now()
            });
            if (btcPriceHistory.length > btcHistoryMaxLength) {
                btcPriceHistory.shift();
            }
        }

        console.log(`${coinName} - ${formattedPrice} ${changeMessage}`);
        adviceSetter(advice);

        if (coin === "bitcoin") {
            cursData.btc = parseFloat(formattedPrice.replace(/,/g, ''));
            cursData.btcAdvice = advice;
        } else if (coin === "dogecoin") {
            cursData.dog = parseFloat(formattedPrice);
            cursData.dogAdvice = advice;
        }

        return {
            price: formattedPrice,
            rawPrice: newPrice,
            difference,
        };
    } else {
        const errorMessage = `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ${coinName}`;
        console.log(errorMessage);
        adviceSetter(errorMessage);
        return null;
    }
}

async function updateBtc() {
    return await updatePrice(
        "bitcoin",
        (price) => (btc = price),
        formatNumber,
        previousBtc,
        "BTC",
        (advice) => (btcAdvice = advice)
    );
}

async function updateDog() {
    return await updatePrice(
        "dogecoin",
        (price) => (dog = price),
        formatDog,
        previousDog,
        "DOGE",
        (advice) => (dogAdvice = advice)
    );
}

async function updatePrices() {
    const btcResult = await updateBtc();
    const dogResult = await updateDog();

    if (btcResult) {
        previousBtc = btcResult.rawPrice;
    }
    if (dogResult) {
        previousDog = dogResult.rawPrice;
    }

    saveCursData(cursData);
}

setInterval(updatePrices, 60000);
updatePrices();

function calculatePriceChange(history, periodInHours) {
    const now = Date.now();
    const cutoff = now - periodInHours * 60 * 60 * 1000;

    const recentHistory = history.filter(item => item.timestamp >= cutoff);

    if (recentHistory.length < 2) {
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö";
    }

    const firstPrice = recentHistory[0].price;
    const lastPrice = recentHistory[recentHistory.length - 1].price;
    const change = lastPrice - firstPrice;

    return change > 0 ? `+${formatNumber(change)}` : formatNumber(change);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫—É—Ä—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
cmd.hear(/^(?:–∫—É—Ä—Å|üìà –ö—É—Ä—Å)$/i, (message, bot) => {
    return bot("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É—Ä—Å–∞:", {
        keyboard: JSON.stringify({
            inline: true,
            buttons: [
                [{
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: "–∫—É—Ä—Å –≤–∞–ª—é—Ç"
                        }),
                        label: "üìà –ö—É—Ä—Å –≤–∞–ª—é—Ç"
                    },
                    color: "positive"
                }],
                [{
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: "–∫—É—Ä—Å —Ä—É–¥—ã"
                        }),
                        label: "üíé –ö—É—Ä—Å —Ä—É–¥—ã"
                    },
                    color: "positive"
                }]
            ]
        })
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
cmd.hear(/^(?:–∫—É—Ä—Å –≤–∞–ª—é—Ç)$/i, (message, bot) => {
    const btcChange1h = calculatePriceChange(btcPriceHistory, 1);
    const btcChange24h = calculatePriceChange(btcPriceHistory, 24);

    let btcInfo = `
‚Çø BTC: ${btc}
üí° - ${btcAdvice}
üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ —á–∞—Å: ${btcChange1h} $
üìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞: ${btcChange24h} $
`;

    let dogInfo = `
üê∂ DOGE: ${dog}
üí° - ${dogAdvice}
`;

    return bot(btcInfo + dogInfo, {
        keyboard: JSON.stringify({
            inline: true,
            buttons: [
                [{
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: `–∏—Å—Ç–æ—Ä–∏—è`
                        }),
                        label: `üìà –ò—Å—Ç–æ—Ä–∏—è BTC`
                    },
                    color: "primary"
                }, {
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: `–∫—É—Ä—Å`
                        }),
                        label: `üîô –ù–∞–∑–∞–¥`
                    },
                    color: "secondary"
                }]
            ]
        })
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –∫—É—Ä—Å–∞ —Ä—É–¥—ã
cmd.hear(/^(?:–∫—É—Ä—Å —Ä—É–¥—ã|üíé –ö—É—Ä—Å —Ä—É–¥—ã)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let text = `–ö—É—Ä—Å —Ä—É–¥—ã:\n`;

    if (botinfo.kursplazma > 1400000)
      text += `üÜô –†—É–¥—É ¬´–ü–ª–∞–∑–º–∞¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursobsidian > 1100000)
      text += `üÜô –†—É–¥—É ¬´–û–±—Å–∏–¥–∏–∞–Ω¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursmateria > 1000000)
      text += `üÜô –†—É–¥—É ¬´–ú–∞—Ç–µ—Ä–∏—è¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kursalmaz > 700000)
      text += `üÜô –†—É–¥—É ¬´–ê–ª–º–∞–∑¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kurszoloto > 300000)
      text += `üÜô –†—É–¥—É ¬´–ó–æ–ª–æ—Ç–æ¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    if (botinfo.kurszhelezo > 100000)
      text += `üÜô –†—É–¥—É ¬´–ñ–µ–ª–µ–∑–æ¬ª —Å–µ–π—á–∞—Å –º–æ–∂–Ω–æ –ø—Ä–æ–¥–∞—Ç—å –∑–∞ –¥–æ—Ä–æ–≥–æ.\n`;

    text += `\n‚öôÔ∏è 1 –∂–µ–ª–µ–∑–æ - ${utils.sp(botinfo.kurszhelezo)} ${val1}`;

    text += `\nüèµ 1 –∑–æ–ª–æ—Ç–æ - ${utils.sp(botinfo.kurszoloto)} ${val1}`;

    text += `\nüíé 1 –∞–ª–º–∞–∑ - ${utils.sp(botinfo.kursalmaz)} ${val1}`;

    text += `\nüåå 1 –º–∞—Ç–µ—Ä–∏—è - ${utils.sp(botinfo.kursmateria)} ${val1}`;

    text += `\nüåå 1 –æ–±—Å–∏–¥–∏–∞–Ω - ${utils.sp(botinfo.kursobsidian)} ${val1}`;

    text += `\nüåå 1 –ø–ª–∞–∑–º–∞ - ${utils.sp(botinfo.kursplazma)} ${val1}`;

    text += `\n\nüîÑ –ö—É—Ä—Å —Ä—É–¥—ã –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ ${unixStampLefta(
      kursrudtime - Date.now()
    )} ‚è≥`;

    return bot(text, {
        keyboard: JSON.stringify({
            inline: true,
            buttons: [
                [{
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: `–∫—É—Ä—Å`
                        }),
                        label: `üîô –ù–∞–∑–∞–¥`
                    },
                    color: "secondary"
                }]
            ]
        })
    });
  }
});

setInterval(() => {
  if (kursrudtime > Date.now()) {
    kursrudtime -= 1;
  }
  if (kursrudtime <= Date.now()) {
    kursrudtime = Date.now() + 301000;
  }
}, 1000);

cmd.hear(/^(?:–∏—Å—Ç–æ—Ä–∏—è)$/i, (message, bot) => {
    if (btcPriceHistory.length === 0) {
        return bot("–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω BTC –ø—É—Å—Ç–∞.");
    }

    const historyLength = btcPriceHistory.length;
    const startIndex = Math.max(0, historyLength - 10);

    let historyText = "–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω BTC (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n";
    for (let i = startIndex; i < historyLength; i++) {
        const item = btcPriceHistory[i];
        const date = new Date(item.timestamp);
        historyText += `${date.toLocaleTimeString()}: ${formatNumber(item.price)}\n`;
    }

    return bot(historyText, {
        keyboard: JSON.stringify({
            inline: true,
            buttons: [
                [{
                    action: {
                        type: "text",
                        payload: JSON.stringify({
                            command: `–∫—É—Ä—Å –≤–∞–ª—é—Ç`
                        }),
                        label: `üîô –ù–∞–∑–∞–¥`
                    },
                    color: "secondary"
                }]
            ]
        })
    });
});

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ä–µ–π—Ç–∏–Ω–≥, –±–∏—Ç–∫–æ–∏–Ω) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
cmd.hear(/^(?:—Ä–µ–π—Ç–∏–Ω–≥)\s(.*)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        message.args[1] = message.args[1].replace(/([.,])/gi, "");
        message.args[1] = message.args[1].replace(/([–∫k])/gi, "000");
        message.args[1] = message.args[1].replace(/[–ºm]/gi, "000000");

        if (message.user.inf === true) return bot(`–í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

        if (!Number(message.args[1])) return bot("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");

        message.args[1] = Math.floor(Number(message.args[1]));

        if (message.args[1] <= 0) return bot("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.");

        const ratingCost = 1000000;
        const maxAffordableRating = Math.floor(message.user.balance / ratingCost);

        if (message.args[1] > maxAffordableRating) {
            return bot(
                `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º ${utils.sp(maxAffordableRating)} –µ–¥. —Ä–µ–π—Ç–∏–Ω–≥–∞.`, {
                    keyboard: JSON.stringify({
                        inline: true,
                        buttons: [
                            [{
                                action: {
                                    type: "text",
                                    payload: {
                                        command: `—Ä–µ–π—Ç–∏–Ω–≥ ${maxAffordableRating}`
                                    },
                                    label: `–ö—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º`,
                                },
                                color: "primary",
                            }, ],
                        ],
                    }),
                }
            );
        } else if (message.args[1] * ratingCost > message.user.balance) {
            return bot(
                `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º ${utils.sp(maxAffordableRating)} –µ–¥. —Ä–µ–π—Ç–∏–Ω–≥–∞.`, {
                    keyboard: JSON.stringify({
                        inline: true,
                        buttons: [
                            [{
                                action: {
                                    type: "text",
                                    payload: {
                                        command: `—Ä–µ–π—Ç–∏–Ω–≥ ${maxAffordableRating}`
                                    },
                                    label: `–ö—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º`,
                                },
                                color: "primary",
                            }, ],
                        ],
                    }),
                }
            );
        } else if (message.args[1] * ratingCost <= message.user.balance) {
            message.user.balance -= message.args[1] * ratingCost;
            message.user.rating += message.args[1];

            return bot(
                `–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–≤—ã—Å–∏–ª–∏ —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ ${utils.sp(message.args[1])} –µ–¥. üëë –∑–∞ ${utils.sp(message.args[1] * ratingCost)}${val1}\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\n` +
                `–í—ã –º–æ–≥–ª–∏ –∫—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º ${utils.sp(maxAffordableRating)} –µ–¥. —Ä–µ–π—Ç–∏–Ω–≥–∞.`
            );
        }
    }
});

cmd.hear(/^(?:–±–∏—Ç–∫–æ–∏–Ω)\s(.*)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type == 1) {
        message.args[1] = message.args[1].replace(/([.,])/gi, "");
        message.args[1] = message.args[1].replace(/(–∫|k)/gi, "000");
        message.args[1] = message.args[1].replace(/(–º|m)/gi, "000000");

        if (/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi.test(message.args[1])) {
            if (previousBtc) {
                message.args[1] = Math.floor(Number(message.user.balance / (previousBtc * 1.5)));
            } else {
                return bot("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC.");
            }
        } else {
            message.args[1] = Number(message.args[1]);
        }

        if (!Number(message.args[1]) && message.args[1] !== 0) return bot("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.");
        message.args[1] = Math.floor(Number(message.args[1]));

        if (message.user.inf === true) return bot(`–í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

        if (message.args[1] <= 0 && !/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi.test(message.args[1])) return bot("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.");

        if (!previousBtc) {
            return bot("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É BTC.");
        }
        const cost = message.args[1] * previousBtc * 1.5;

        if (cost > message.user.balance) {
            const maxAffordable = Math.floor(message.user.balance / (previousBtc * 1.5));
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n` +
                `–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º: ${utils.sp(maxAffordable)} BTC\n\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1} üíµ\n` +
                `üåê –ö—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞: ${(btc * 1.5).toFixed(2)} ${val1}`, {
                    keyboard: JSON.stringify({
                        inline: true,
                        buttons: [
                            [{
                                action: {
                                    type: "text",
                                    payload: {
                                        command: `–±–∏—Ç–∫–æ–∏–Ω ${maxAffordable}`
                                    },
                                    label: `–ö—É–ø–∏—Ç—å –º–∞–∫—Å–∏–º—É–º`,
                                },
                                color: "primary",
                            }, ],
                        ],
                    }),
                }
            );
        } else {
            message.user.balance -= cost;
            message.user.btc += message.args[1];

            return bot(
                `–í—ã –∫—É–ø–∏–ª–∏ ${utils.sp(message.args[1])} –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –∑–∞ ${utils.sp(cost)} ${val1}\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}`
            );
        }
    }
});

module.exports = commands;