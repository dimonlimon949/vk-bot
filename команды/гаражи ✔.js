let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};


const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 



const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5






cmd.hear(/^(?:–≥–∞—Ä–∞–∂|–≥–∞—Ä–∞–∂–∏|garage)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    const garagePrices = [10000000, 100000000, 1000000000, 200];
    const parkingSpaces = [1, 3, 5, 10]; 

    if (!message.user.garage) {
      return bot(`–≥–∞—Ä–∞–∂–∏:

üöô 1. –ì–∞—Ä–∞–∂ ‚û§ –û–±—ã—á–Ω—ã–π
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.sp(garagePrices[0])} ${val1}
üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç: ${parkingSpaces[0]}

üöô 2. –ì–∞—Ä–∞–∂ ‚û§ –°—Ä–µ–¥–Ω–∏–π
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.sp(garagePrices[1])} ${val1}
üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç: ${parkingSpaces[1]}

üöô 3. –ì–∞—Ä–∞–∂ ‚û§ –≠–ª–∏—Ç–Ω—ã–π
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.sp(garagePrices[2])} ${val1}
üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç: ${parkingSpaces[2]}

üöô 4. –ì–∞—Ä–∞–∂ ‚û§ –î–æ–Ω–∞—Ç–Ω—ã–π (–ª—é–∫—Å)
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.sp(garagePrices[3])} —Ä—É–±–ª–µ–π
üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–æ—á–Ω—ã—Ö –º–µ—Å—Ç: ${parkingSpaces[3]}

üõí –ö—É–ø–∏—Ç—å –≥–∞—Ä–∞–∂ ‚û§ –ì–∞—Ä–∞–∂ –∫—É–ø–∏—Ç—å [–Ω–æ–º–µ—Ä] ‚ôªÔ∏è`);
    } else {
      return bot(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –≥–∞—Ä–∞–∂–µ: ‚òÉÔ∏è

üõë –¢–∏–ø –≥–∞—Ä–∞–∂–∞ ‚û§ ${message.user.garage
          .toString()
          .replace(/1/gi, "–û–±—ã—á–Ω—ã–π")
          .replace(/2/gi, "–°—Ä–µ–¥–Ω–∏–π")
          .replace(/3/gi, "–≠–ª–∏—Ç–Ω—ã–π")
          .replace(/4/gi, "–î–æ–Ω–∞—Ç–Ω—ã–π (–õ—é–∫—Å)")}
üîí –ú–µ—Å—Ç ‚û§ [${message.user.parkedLength}/${message.user.garage
          .toString()
          .replace(/1/gi, "1")
          .replace(/2/gi, "3")
          .replace(/3/gi, "5")
          .replace(/4/gi, "10")}]
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üöô –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ –≥–∞—Ä–∞–∂–µ:
${message.user.parkedOne > 0
          ? `‚Ä¢ 1. ${cars[message.user.parkedOne - 1].name}`
          : ``}
${message.user.parkedTwo > 0
          ? `‚Ä¢ 2. ${cars[message.user.parkedTwo - 1].name}`
          : ``}
${message.user.parkedThree > 0
          ? `‚Ä¢ 3. ${cars[message.user.parkedThree - 1].name}`
          : ``}
${message.user.parkedFour > 0
          ? `‚Ä¢ 4. ${cars[message.user.parkedFour - 1].name}`
          : ``}
${message.user.parkedFive > 0
          ? `‚Ä¢ 5. ${cars[message.user.parkedFive - 1].name}`
          : ``}

üöó –í—ã–±—Ä–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å ‚û§ –ì–∞—Ä–∞–∂ –≤–∑—è—Ç—å [–Ω–æ–º–µ—Ä] ‚ùÑÔ∏è`);
    }
  }
});


cmd.hear(/^(?:–≥–∞—Ä–∞–∂ –∫—É–ø–∏—Ç—å)\s+(\d+)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    const garageId = parseInt(message.args[1]) - 1;
    const garagePrices = [10000000, 100000000, 1000000000, 200];
    const parkingSpaces = [1, 3, 5, 10];

    if (garageId < 0 || garageId > 3) {
      return bot(`–ì–∞—Ä–∞–∂ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 4.`);
    }

 
    if (garageId === 3) {

      if (message.user.rubli < garagePrices[garageId]) {
        return bot(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä—É–±–ª–µ–π –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –≥–∞—Ä–∞–∂–∞. –í–∞–º –Ω—É–∂–Ω–æ ${utils.sp(garagePrices[garageId])} —Ä—É–±–ª–µ–π.`);
      }

      message.user.rubli -= garagePrices[garageId];
    } else {

      if (message.user.balance < garagePrices[garageId]) {
        return bot(`–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –≥–∞—Ä–∞–∂–∞. –í–∞–º –Ω—É–∂–Ω–æ ${utils.sp(garagePrices[garageId])} $`);
      }

      message.user.balance -= garagePrices[garageId];
    }

    message.user.garage = garageId + 1;

    return bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${garageId + 1} –≥–∞—Ä–∞–∂ - ${garageId === 0 ? "–û–±—ã—á–Ω—ã–π" : garageId === 1 ? "–°—Ä–µ–¥–Ω–∏–π" : garageId === 2 ? "–≠–ª–∏—Ç–Ω—ã–π" : "–î–æ–Ω–∞—Ç–Ω—ã–π (–ª—é–∫—Å)"}!`);
  }
  });

  let tokensCache = null;

  setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
    }
  }, 1000);

module.exports = commands;
