let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è double –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —É–¥–∞–ª–∏–ª –µ–µ
// let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}


// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

let chatlogi = tokenData?.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
let spoler = tokenData?.spoler;

const {VK} = require('vk-io');
const vk = require('../vk-api.js'); 

let fink = true;

const businesses = require('../spisok/business spisok.js');
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js");


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

let tokenData3 = getToken3();

let val1 = tokenData3?.val1 || '—Ä—É–±.'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val2 = tokenData3?.val2 || '$'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val3 = tokenData3?.val3 || '‚Ç¨'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val4 = tokenData3?.val4 || '–≥–æ–ª–¥–æ–≤'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val5 = tokenData3?.val5 || '–∫–æ–∏–Ω–æ–≤'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å|–±–∏–∑|üè¢ –ë–∏–∑–Ω–µ—Å)$/i, async (message, bot) => {

    let helpText;
    let keyboardButtons = [];

    if (message.user.settings.busi === true) {

        helpText = `üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º üè¢

        üî• –ë–∏–∑–Ω–µ—Å 1/2 -  –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞.
        üìà –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1/2 -  –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.
    
        –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!`;

        keyboardButtons = [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å 1` }),
                    "label": `üî• –ë–∏–∑–Ω–µ—Å 1`
                },
                "color": "primary"
            },
            {
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å 2` }),
                    "label": `üî• –ë–∏–∑–Ω–µ—Å 2`
                },
                "color": "primary"
            }],
             [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1` }),
                    "label": `üìà –£–ª—É—á—à–∏—Ç—å –ë–∏–∑–Ω–µ—Å 1`
                },
                "color": "default"
            },
            {
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 2` }),
                    "label": `üìà –£–ª—É—á—à–∏—Ç—å –ë–∏–∑–Ω–µ—Å 2`
                },
                "color": "default"
            }]
        ];

    } else {

        helpText = `üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º üè¢

        üî• –ë–∏–∑–Ω–µ—Å 1 -  –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∏–∑–Ω–µ—Å–∞.
        üìà –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1 -  –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏.

        –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –±–∏–∑–Ω–µ—Å–æ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ!`;

        keyboardButtons = [
            [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å 1` }),
                    "label": `üî• –ë–∏–∑–Ω–µ—Å 1`
                },
                "color": "primary"
            }],
             [{
                "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å 1` }),
                    "label": `üìà –£–ª—É—á—à–∏—Ç—å –ë–∏–∑–Ω–µ—Å 1`
                },
                "color": "default"
            }]
        ];
    }

    const keyboard = JSON.stringify({
        "inline": true,
        "buttons": keyboardButtons
    });

    try {
        await message.send(`${message.user.mention ? `@id${message.user.id2} (${message.user.tag})` : `${message.user.tag}`}, ${helpText}`, { keyboard: keyboard });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å (–ø–æ–º–æ—â—å):", error);
        await bot("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–º–æ—â–∏ –ø–æ –±–∏–∑–Ω–µ—Å—É.");
    }

});

cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å)\s(\d)$/i, async (message, bot) => {
    try {
        let businessType;
        let businessArray;
        let businessesData;
        let currency;

        if (!message.isChat || message.chat.type === 1) {
            businessType = 2;
            businessArray = message.user.business2;
            businessesData = businesses2;
            currency = val1;
        } else if (message.isChat || message.chat.type === 2) {
            businessType = 1;
            businessArray = message.user.business;
            businessesData = businesses;
            currency = val4;
        }
        else {
            return bot("‚ö†Ô∏è –î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞");
        }

        if (!message.user.settings) {
            message.user.settings = {};
        }

        let businessIndex = Math.floor(Number(message.args[1]));
        let maxBusinesses = message.user.settings.busi === true ? 2 : 1;

        if (businessIndex < 1 || businessIndex > maxBusinesses) {
            return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å [–æ—Ç 1 –¥–æ ${maxBusinesses}].`);
        }

        if (!businessArray || businessArray.length < businessIndex) {
            return bot(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞.`);
        }

        businessIndex--;


        const bizData = businessArray[businessIndex];
        const biz = businessesData[bizData.id - 1][bizData.upgrade - 1];

        let text = '';
        if (!fink) {
            text += `‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏–±—ã–ª—å –≤ –±–∏–∑–Ω–µ—Å —Å–µ–π—á–∞—Å –Ω–µ –ø–æ—Å—Ç—É–ø–∞–µ—Ç. –í–µ–¥—É—Ç—Å—è —Ç–µ—Ö.—Ä–∞–±–æ—Ç—ã.\n`;
        }

        const currentProfit = Math.floor(biz.earn / biz.workers * bizData.workers);
        const availableUpgrade = businessesData[bizData.id - 1][bizData.upgrade];

        let businessStats = `üè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏–∑–Ω–µ—Å–∞ ¬´${biz.name}¬ª üè¢\n\n`;
        businessStats += `üí∞ –ü—Ä–∏–±—ã–ª—å: ${utils.sp(currentProfit)} ${currency} /—á\n`;
        businessStats += `üë∑‚Äç‚ôÇÔ∏è –†–∞–±–æ—á–∏—Ö: ${utils.sp(bizData.workers)}/${utils.sp(biz.workers)}\n`;
        businessStats += `üíµ –ù–∞ –±–∞–ª–∞–Ω—Å–µ –±–∏–∑–Ω–µ—Å–∞: ${utils.sp(bizData.moneys)} ${currency}\n\n`;
        businessStats += text + "\n";

        let keyboardButtons = [];

        if (availableUpgrade != null) {
            businessStats += `‚ú® –î–æ—Å—Ç—É–ø–Ω–æ —É–ª—É—á—à–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞!\nüí∞ –¶–µ–Ω–∞: ${utils.sp(availableUpgrade.cost)} ${currency}`;
            keyboardButtons.push([
                {
                    action: {
                        type: "text",
                        payload: JSON.stringify({command: `–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å ${businessIndex + 1}`}),
                        label: `‚ú® –£–ª—É—á—à–∏—Ç—å (${utils.sp(availableUpgrade.cost)} ${currency})`,
                    },
                    color: "positive",
                },
            ]);
        } else {
            businessStats += `üèÜ –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–µ–Ω –¥–æ –º–∞–∫—Å–∏–º—É–º–∞!`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–π–º–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–≥–æ –Ω–∞–Ω–∏–º–∞—Ç—å
        if (biz.workers - bizData.workers > 0) {
          keyboardButtons.push([
            {
                action: {
                    type: "text",
                    payload: {
                        command: `–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å ${businessIndex + 1} ${biz.workers - bizData.workers}`
                    },
                    "label": `+üë∑‚Äç‚ôÇ ${biz.workers - bizData.workers}`
                },
                color: "primary",
            },
          ]);
        }


        keyboardButtons.push([
            {
                action: {
                    type: "text",
                    payload: JSON.stringify({command: `–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å ${businessIndex + 1} –≤—Å–µ`}),
                    label: "üí∞ –°–Ω—è—Ç—å –¥–µ–Ω—å–≥–∏",
                },
                color: "primary",
            }
        ]);



        try {
            return bot(businessStats, {
                attachment: utils.pick([`${biz.photo}`]),
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: keyboardButtons,
                }),
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞):", error);
            await bot("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–∑–Ω–µ—Å–∞.");
        }


    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å:", error);
        await bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
});

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
        val5 = tokensCache.val5
    }
}, 1000);

module.exports = commands;