
const commands=[]

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};


const vk = require('../vk-api.js'); 

cmd.hear(/^(?:–ø–∏–Ω–≥|ping)$/i, async (message, bot) => {
    const startTime = Date.now();
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    const autoFixProblems = async (problems) => {
        const fixes = [];
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é
        if (problems.includes('memory')) {
            if (global.gc) {
                global.gc();
                fixes.push('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞');
            } else {
                fixes.push('‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∑–∞–ø—É—Å—Ç–∏ —Å —Ñ–ª–∞–≥–æ–º --expose-gc)');
            }
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é
        if (problems.includes('network')) {
            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ DNS
            try {
                const dns = require('dns');
                dns.resolve4('vk.com', () => {});
                dns.resolve4('google.com', () => {});
                fixes.push('‚úÖ –û—á–∏—â–µ–Ω DNS-–∫—ç—à –¥–ª—è VK –∏ Google');
            } catch (e) {}
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å CPU
        if (problems.includes('cpu')) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ event loop
            await new Promise(resolve => setTimeout(resolve, 100));
            fixes.push('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Ä–∞–∑–≥—Ä—É–∑–∫–∏ CPU');
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
        if (problems.includes('critical')) {
            const cacheKeys = Object.keys(require.cache);
            const botRelatedKeys = cacheKeys.filter(key => 
                key.includes('bot') || key.includes('command') || key.includes('handler')
            );
            
            if (botRelatedKeys.length > 0) {
                botRelatedKeys.forEach(key => {
                    delete require.cache[key];
                });
                fixes.push(`‚úÖ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${botRelatedKeys.length} –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞`);
            }
        }
        
        return fixes;
    };

    // –ó–∞–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ VK API
    const vkApiStart = Date.now();
    try {
        await vk.api.users.get({ user_ids: 1, fields: 'screen_name' });
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    }
    const vkApiPing = Date.now() - vkApiStart;

    // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const processingTime = Date.now() - startTime;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
    const messageSendStart = Date.now();
    await bot("üèì");
    const messageSendTime = Date.now() - messageSendStart;

    // –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    const totalTime = Date.now() - startTime;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
    const memoryUsage = process.memoryUsage();
    const uptime = process.uptime();

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor((uptime % 86400) / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    const uptimeString = [
        days > 0 ? `${days}–¥` : '',
        hours > 0 ? `${hours}—á` : '',
        minutes > 0 ? `${minutes}–º` : '',
        `${seconds}—Å`
    ].filter(Boolean).join(' ');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ CPU
    const cpuUsage = process.cpuUsage();
    const cpuUsagePercent = ((cpuUsage.user + cpuUsage.system) / 1000 / uptime).toFixed(1);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    const usedMemoryMB = Math.round(memoryUsage.heapUsed / 1024 / 1024);
    const totalMemoryMB = Math.round(memoryUsage.heapTotal / 1024 / 1024);
    const memoryUsagePercent = Math.round((memoryUsage.heapUsed / memoryUsage.heapTotal) * 100);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–∞–º—è—Ç–∏
    let systemMemoryInfo = '';
    let freeSystemMemory = '';
    try {
        const os = require('os');
        const totalSysMem = Math.round(os.totalmem() / 1024 / 1024);
        const freeSysMem = Math.round(os.freemem() / 1024 / 1024);
        const usedSysMem = totalSysMem - freeSysMem;
        const sysMemUsagePercent = Math.round((usedSysMem / totalSysMem) * 100);
        
        systemMemoryInfo = `‚ñ∏ üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: ${usedSysMem}MB/${totalSysMem}MB (${sysMemUsagePercent}%)`;
        freeSystemMemory = `‚ñ∏ üÜì –°–≤–æ–±–æ–¥–Ω–æ –û–ó–£: ${freeSysMem}MB`;
    } catch (e) {
        systemMemoryInfo = '‚ñ∏ üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –ø–∞–º—è—Ç—å: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        freeSystemMemory = '‚ñ∏ üÜì –°–≤–æ–±–æ–¥–Ω–æ –û–ó–£: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    const internetTestStart = Date.now();
    let internetSpeed = '–ü—Ä–æ–≤–µ—Ä–∫–∞...';
    let internetStatus = 'üîµ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è';
    
    try {
        const https = require('https');
        
        const checkWebsite = (url) => {
            return new Promise((resolve) => {
                const start = Date.now();
                const req = https.get(url, () => {
                    resolve(Date.now() - start);
                    req.destroy();
                }).on('error', () => resolve(null)).setTimeout(5000);
            });
        };

        const googlePing = await checkWebsite('https://www.google.com');
        const vkPing = await checkWebsite('https://vk.com');
        
        if (googlePing && vkPing) {
            const avgPing = Math.round((googlePing + vkPing) / 2);
            internetSpeed = `‚âà${avgPing}ms`;
            internetStatus = avgPing < 100 ? 'üü¢ –û—Ç–ª–∏—á–Ω–æ' : avgPing < 300 ? 'üü° –ù–æ—Ä–º–∞–ª—å–Ω–æ' : 'üü† –ú–µ–¥–ª–µ–Ω–Ω–æ';
        } else {
            internetSpeed = '‚ùå –û—à–∏–±–∫–∞';
            internetStatus = 'üî¥ –ù–µ—Ç —Å–≤—è–∑–∏';
        }
    } catch (e) {
        internetSpeed = '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
        internetStatus = 'üü° –ß–∞—Å—Ç–∏—á–Ω–æ';
    }

    const internetTestTime = Date.now() - internetTestStart;

    // –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const getTimeRating = (value, type) => {
        let thresholds;
        
        switch(type) {
            case 'total': thresholds = { excellent: 200, good: 400, average: 800 }; break;
            case 'vk': thresholds = { excellent: 100, good: 250, average: 500 }; break;
            case 'processing': thresholds = { excellent: 50, good: 100, average: 200 }; break;
            case 'sending': thresholds = { excellent: 100, good: 200, average: 400 }; break;
            case 'internet': thresholds = { excellent: 100, good: 300, average: 500 }; break;
            default: thresholds = { excellent: 200, good: 400, average: 800 };
        }

        if (value <= thresholds.excellent) return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω–æ' };
        if (value <= thresholds.good) return { emoji: 'üü°', text: '–•–æ—Ä–æ—à–æ' };
        if (value <= thresholds.average) return { emoji: 'üü†', text: '–ù–æ—Ä–º–∞–ª—å–Ω–æ' };
        return { emoji: 'üî¥', text: '–ú–µ–¥–ª–µ–Ω–Ω–æ' };
    };

    const getMemoryRating = (value) => {
        if (value <= 50) return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω–æ' };
        if (value <= 100) return { emoji: 'üü°', text: '–•–æ—Ä–æ—à–æ' };
        if (value <= 200) return { emoji: 'üü†', text: '–ù–æ—Ä–º–∞–ª—å–Ω–æ' };
        return { emoji: 'üî¥', text: '–ú–Ω–æ–≥–æ' };
    };

    const getCpuRating = (value) => {
        if (value <= 10) return { emoji: 'üü¢', text: '–ù–∏–∑–∫–∞—è' };
        if (value <= 30) return { emoji: 'üü°', text: '–°—Ä–µ–¥–Ω—è—è' };
        if (value <= 60) return { emoji: 'üü†', text: '–í—ã—Å–æ–∫–∞—è' };
        return { emoji: 'üî¥', text: '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è' };
    };

    const getUptimeRating = (uptimeSeconds) => {
        const hours = uptimeSeconds / 3600;
        if (hours >= 720) return { emoji: 'üèÜ', text: '–õ–µ–≥–µ–Ω–¥–∞' };
        if (hours >= 168) return { emoji: 'üü¢', text: '–û—Ç–ª–∏—á–Ω–æ' };
        if (hours >= 72) return { emoji: 'üü°', text: '–•–æ—Ä–æ—à–æ' };
        if (hours >= 24) return { emoji: 'üü†', text: '–ù–æ—Ä–º–∞–ª—å–Ω–æ' };
        return { emoji: 'üîµ', text: '–ó–∞–ø—É—â–µ–Ω' };
    };

    const totalRating = getTimeRating(totalTime, 'total');
    const vkApiRating = getTimeRating(vkApiPing, 'vk');
    const processingRating = getTimeRating(processingTime, 'processing');
    const sendingRating = getTimeRating(messageSendTime, 'sending');
    const internetRating = getTimeRating(internetTestTime, 'internet');
    const memoryRating = getMemoryRating(usedMemoryMB);
    const cpuRating = getCpuRating(parseFloat(cpuUsagePercent));
    const uptimeRating = getUptimeRating(uptime);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const detectedProblems = [];
    if (cpuRating.emoji === 'üî¥') detectedProblems.push('cpu');
    if (memoryRating.emoji === 'üî¥') detectedProblems.push('memory');
    if (internetRating.emoji === 'üî¥') detectedProblems.push('network');
    if (totalRating.emoji === 'üî¥' || sendingRating.emoji === 'üî¥') detectedProblems.push('critical');

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    let autoFixes = [];
    if (detectedProblems.length > 0) {
        autoFixes = await autoFixProblems(detectedProblems);
        
        // –ï—Å–ª–∏ –±—ã–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–º–µ—Ä
        if (autoFixes.length > 0) {
            await new Promise(resolve => setTimeout(resolve, 100));
            // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–º–µ—Ä –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
            const recheckStart = Date.now();
            await bot("üîß");
            const recheckTime = Date.now() - recheckStart;
            
            if (recheckTime < messageSendTime) {
                autoFixes.push(`‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ª—É—á—à–µ–Ω–∞: ${recheckTime}ms`);
            }
        }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    let pingMessage = `üèì **–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´** ${detectedProblems.length > 0 ? 'üîß' : '‚úÖ'}

üìä **–°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:**
‚ñ∏ üöÄ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms ${totalRating.emoji} ${totalRating.text}
‚ñ∏ ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞: ${processingTime}ms ${processingRating.emoji} ${processingRating.text}
‚ñ∏ üì® –û—Ç–ø—Ä–∞–≤–∫–∞: ${messageSendTime}ms ${sendingRating.emoji} ${sendingRating.text}

üåê **–°–µ—Ç–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:**
‚ñ∏ üî∑ VK API: ${vkApiPing}ms ${vkApiRating.emoji} ${vkApiRating.text}
‚ñ∏ üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç: ${internetSpeed} ${internetRating.emoji} ${internetStatus}
‚ñ∏ ‚è±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏: ${internetTestTime}ms

üìà **–°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã:**
‚ñ∏ ‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeString} ${uptimeRating.emoji} ${uptimeRating.text}
‚ñ∏ üß† –ü–∞–º—è—Ç—å Node.js: ${usedMemoryMB}MB/${totalMemoryMB}MB (${memoryUsagePercent}%) ${memoryRating.emoji} ${memoryRating.text}
${systemMemoryInfo}
${freeSystemMemory}
‚ñ∏ üî• CPU: ${cpuUsagePercent}% ${cpuRating.emoji} ${cpuRating.text}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
    if (autoFixes.length > 0) {
        pingMessage += `\n\nüõ†Ô∏è **–ê–í–¢–û–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:**
${autoFixes.map(fix => `‚ñ∏ ${fix}`).join('\n')}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = [];
    if (cpuRating.emoji === 'üî¥') recommendations.push('‚ñ∏ üî• –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU - –ø—Ä–æ–≤–µ—Ä—å —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã');
    if (memoryRating.emoji === 'üî¥') recommendations.push('‚ñ∏ üíæ –ú–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏ - –∑–∞–∫—Ä–æ–π –ª–∏—à–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    if (internetRating.emoji === 'üî¥') recommendations.push('‚ñ∏ üåê –ü–ª–æ—Ö–æ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏ Wi-Fi');
    
    if (recommendations.length > 0) {
        pingMessage += `\n\nüí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
${recommendations.join('\n')}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot(pingMessage);

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    console.log(`üìä Ping: ${totalTime}ms | CPU: ${cpuUsagePercent}% | Mem: ${usedMemoryMB}MB | Fixes: ${autoFixes.length}`);
});

// –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±–æ—Ä–∞ –º—É—Å–æ—Ä–∞
if (typeof global.gc !== 'function') {
    console.log('‚ö†Ô∏è  –î–ª—è –ª—É—á—à–µ–≥–æ –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ —Å —Ñ–ª–∞–≥–æ–º: --expose-gc');
}

module.exports = commands;