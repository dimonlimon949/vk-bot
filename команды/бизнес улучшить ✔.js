let utils = require('../utils.js')

const commands =[];

const fs = require('fs'); 

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 
let fink=true

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


const businesses = require('../spisok/business spisok.js')
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")

cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å)\s(?:—É–ª—É—á—à–∏—Ç—å)\s(.*)$/i, async (message, bot) => {
  try {
    if (!message.isChat || message.chat.type === 1) {
      await upgradeBusinessPrivate(message, bot);
    } else if (message.chat.type === 2) {
      await upgradeBusinessGroup(message, bot);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å:", error);
    await bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

async function upgradeBusinessPrivate(message, bot) {
  const businessIndex = parseInt(message.args[1], 10) - 1;

  if (isNaN(businessIndex) || businessIndex < 0) {
    return bot('üö´ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –æ—Ç 1. üî¢');
  }

  if (!message.user.business2 || !message.user.business2[businessIndex]) {
    return bot('üö´ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. üè¢');
  }

  let maxIndex = 4;
  if (message.user.settings && message.user.settings.busi === true) {
    maxIndex = 5;
  }

  if (businessIndex + 1 > maxIndex) {
    return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å —É–ª—É—á—à–∏—Ç—å [–æ—Ç 1 –¥–æ ${maxIndex}]. üî¢`);
  }

  const businessId = message.user.business2[businessIndex].id - 1;
  const upgradeLevel = message.user.business2[businessIndex].upgrade;

  if (!businesses2[businessId] || !businesses2[businessId][upgradeLevel]) {
    return bot('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå');
  }

  const cost = businesses2[businessId][upgradeLevel].cost;

  if (cost > message.user.balance) {
    return bot('üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! üí∞');
  }

  message.user.balance -= cost;
  message.user.business2[businessIndex].upgrade++;

  return bot(
    `‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ –±–∏–∑–Ω–µ—Å ‚Ññ${businessIndex + 1} üéâ\n üí∏ –° –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ: ${utils.sp(cost)} ${val1}\n üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}`
  );
}

async function upgradeBusinessGroup(message, bot) {
  const businessIndex = parseInt(message.args[1], 10) - 1;

  if (isNaN(businessIndex) || businessIndex < 0) {
    return bot('üö´ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ –æ—Ç 1. üî¢');
  }

  if (!message.user.business || !message.user.business[businessIndex]) {
    return bot('üö´ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. üè¢');
  }

  const businessId = message.user.business[businessIndex].id - 1;
  const upgradeLevel = message.user.business[businessIndex].upgrade;

  if (!businesses[businessId] || !businesses[businessId][upgradeLevel]) {
    return bot('üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå');
  }

  const cost = businesses[businessId][upgradeLevel].cost;

  if (cost > message.user.balance2) {
    return bot('üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! üí∞');
  }

  message.user.balance2 -= cost;
  message.user.business[businessIndex].upgrade++;

  return bot(
    `‚úÖ –í—ã —É–ª—É—á—à–∏–ª–∏ –±–∏–∑–Ω–µ—Å ‚Ññ${businessIndex + 1} üéâ\n üí∏ –° –í–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ: ${utils.sp(cost)} ${val4}\n üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance2)} ${val4}`
  );
}

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

module.exports = commands;
