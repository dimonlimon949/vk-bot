let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let users = require('../database/users.json') 
let chats = require('../database/chats.json')
let bossinfo = require('../database/bossinfo.json')
let botinfo = require('../database/botinfo.json')
let clans = require('../database/clans.json')
let val = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json')
let sal = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json')
let bog = require('../–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json')
 let help = "botinfo,val,sal,bog,"
const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}


function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}


const tokenData = getToken();

const chatlogi = tokenData.chatlogi;  
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 




cmd.hear(/^(?:eval|!eval|!)([^]+)$/i, async (message) => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const groupInfo = await vk.api.call('groups.getById', {
        access_token: tokenData.token,
        v: '5.131',
    });

    if (!groupInfo || groupInfo.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    }

    const groupId = groupInfo[0].id;
    const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

    if (!admins.items.find(x => x.id === message.senderId)) {
        return message.reply('‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.');
    }

    const startTime = Date.now();

    // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    const splitMessage = (text, maxLength = 4000) => {
        const parts = [];
        let currentPos = 0;

        while (currentPos < text.length) {
            if (currentPos + maxLength >= text.length) {
                parts.push(text.substring(currentPos));
                break;
            }

            let endPos = currentPos + maxLength;
            let lastBreak = text.lastIndexOf('\n', endPos);
            
            if (lastBreak < currentPos) {
                lastBreak = text.lastIndexOf(' ', endPos);
            }

            if (lastBreak < currentPos) {
                lastBreak = endPos;
            }

            parts.push(text.substring(currentPos, lastBreak).trim());
            currentPos = lastBreak;

            while (text[currentPos] === '\n' || text[currentPos] === ' ') {
                currentPos++;
            }
        }

        return parts;
    };

    try {
        const inputCode = message.args.slice(1).join(' ').trim();
        if (!inputCode) throw new Error("–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.");

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥
        const result = eval(inputCode);
        const executionTime = Date.now() - startTime;

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        let resultStr;
        try {
            // –î–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if (typeof result === 'object' && result !== null) {
                resultStr = JSON.stringify(result, null, 2);
            } else {
                resultStr = String(result);
            }
        } catch (e) {
            resultStr = String(result);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –µ–¥–∏–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        let responseMessage = `üìï –¢–∏–ø: ${typeof result}\nüÜö –ò—Ç–æ–≥:\n${resultStr}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if (responseMessage.length <= 4096) {
            // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            await message.send(responseMessage);
        } else {
            // –ï—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            const messageParts = splitMessage(responseMessage);
            for (let i = 0; i < messageParts.length; i++) {
                const partNumber = messageParts.length > 1 ? `[${i+1}/${messageParts.length}]\n` : '';
                await message.send(partNumber + messageParts[i]);
                
                if (i < messageParts.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        }

    } catch (e) {
        const executionTime = Date.now() - startTime;
        console.error('–û—à–∏–±–∫–∞ –≤ eval:', e);

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        let errorMessage = [
            `‚ùå –û—à–∏–±–∫–∞: ${e.message}`,
            `üìå –¢–∏–ø: ${e.name}`,
            ``,
            `üõ† –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:`,
            e.message.includes("is not defined") ? "- –ù–µ–æ–±—ä—è–≤–ª–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è/—Ñ—É–Ω–∫—Ü–∏—è" : "",
            e.message.includes("Unexpected token") ? "- –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞" : "",
            e.message.includes("Cannot read property") ? "- –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Å–≤–æ–π—Å—Ç–≤—É" : "",
            e.message.includes("Code ‚Ññ914") ? "- –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ" : "",
            ``,
            `‚è± –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} –º—Å.`
        ].filter(Boolean).join('\n');

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if (errorMessage.length <= 4096) {
            await message.send(errorMessage);
        } else {
            const errorParts = splitMessage(errorMessage);
            for (let i = 0; i < errorParts.length; i++) {
                await message.send(errorParts[i]);
                if (i < errorParts.length - 1) {
                    await new Promise(resolve => setTimeout(resolve, 1000));
                }
            }
        }
    }
});

cmd.hear(/^(?:zz)\s(\d+)(?:\s(\w+)(?:\s([+\-/]?=)\s*(-?\d+(\.\d+)?|true|false|.+))?)?$/i, async (message, bot) => {
  const groupInfo = await vk.api.call('groups.getById', {
    access_token: tokenData.token,
    v: '5.131',
  });

  if (!groupInfo || groupInfo.length === 0) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
  }


  const groupId = groupInfo[0].id;

  const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

   if (!admins.items.find(x => x.id === message.senderId)) return;
    const uid = parseInt(message.args[1], 10);
    const variableName = message.args[2];
    const operation = message.args[3];
    const value = message.args[4];
    const startTime = Date.now();

    const protectedVariables = ['uid', 'id']; 
    let foundUsers = users.filter(user => user.uid === uid);

    if (foundUsers.length === 0) {
      await message.send(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å UID ${uid} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
      return;
    }

    const user = foundUsers[0];

    const inputCode = message.args.slice(1).join(' ').trim();

    if (!variableName) {
      const userVariables = Object.keys(user)
        .map(key => {
          const value = user[key];
          let formattedValue;

          if (typeof value === 'string') {
            formattedValue = value; 
          } else if (typeof value === 'object' && value !== null) {
            formattedValue = JSON.stringify(value);
          } else {
            formattedValue = String(value); 
          }

          return `"${key}": *${formattedValue}*`;
        })
        .join('\n');
      await bot(`${userVariables}`);
      return;
    }



    if (!user.hasOwnProperty(variableName)) {
      await message.send(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variableName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.`);
      return;
    }

    let currentValue = user[variableName];
    const variableType = typeof currentValue;


    if (!operation) {
      let resultDisplay;
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      resultDisplay = variableType === 'number' ? utils.sp(currentValue.toString()) : currentValue.toString();

      await message.send(`üìï –¢–∏–ø: ${variableType}\nüÜö –†–µ–∑—É–ª—å—Ç–∞—Ç: ${resultDisplay}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`);
      return;
    }


    if (protectedVariables.includes(variableName)) {
      await message.send(`–ü–µ—Ä–µ–º–µ–Ω–Ω—É—é "${variableName}" –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å.`);
      return;
    }


    const sendResult = async (type, result, startTime) => {
      const endTime = Date.now();
      const executionTime = endTime - startTime;
      await message.send(`üìï –¢–∏–ø: ${type}\nüÜö –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result}\n\n‚úÖ –ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${executionTime} –º—Å.`);
    };

    if (variableType === 'number') {
      const parsedValue = parseFloat(value);
      if (isNaN(parsedValue)) {
        await message.send(`–û—à–∏–±–∫–∞: –ó–Ω–∞—á–µ–Ω–∏–µ "${value}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è "${variableName}" –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.`);
        return;
      }


      let result;

      switch (operation) {
        case '+=':
          user[variableName] = currentValue + parsedValue;
          result = user[variableName];
          break;
        case '-=':
          user[variableName] = currentValue - parsedValue;
          result = user[variableName];
          break;
        case '=':
          user[variableName] = parsedValue;
          result = user[variableName];
          break;
        case '*=':
          user[variableName] = currentValue * parsedValue;
          result = user[variableName];
          break;
        case '/=':
          if (parsedValue !== 0) {
            user[variableName] = currentValue / parsedValue;
            result = user[variableName];
          } else {
            await message.send(`–û—à–∏–±–∫–∞: –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.`);
            return;
          }
          break;
        default:
          await message.send(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation}`);
          return;
      }

      await sendResult('number', result, startTime);

    } else if (variableType === 'string') {
      if (operation === '=') {
        user[variableName] = value;
        await sendResult('string', `"${value}"`, startTime);
      } else {
        await message.send(`–û–ø–µ—Ä–∞—Ü–∏—è "${operation}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è —Å—Ç—Ä–æ–∫.`);
      }
    } else if (variableType === 'boolean') {

      if (operation === '=') {
        if (value === 'true') {
          user[variableName] = true;
          await sendResult('boolean', 'true', startTime);
        } else if (value === 'false') {
          user[variableName] = false;
          await sendResult('boolean', 'false', startTime);
        } else {
          await message.send(`–û—à–∏–±–∫–∞: –î–ª—è –±—É–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è "true" –∏–ª–∏ "false".`);
          return;
        }
      } else {
        await message.send(`–û–ø–µ—Ä–∞—Ü–∏—è "${operation}" –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –±—É–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.`);
      }
    }

});



module.exports = commands;
