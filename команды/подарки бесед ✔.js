let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let chats = require('../database/chats.json')

let double = require('../database/users.json')

let botinfo = require('../database/botinfo.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};



const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}



// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();


const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

function getToken2() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath2, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

const tokenData2 = getToken2();

const podarok = tokenData2.podarok;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

function unixStampLeft(stamp) {
  stamp = stamp / 1000;
  let s = stamp % 60;
  stamp = (stamp - s) / 60;
  let m = stamp % 60;
  stamp = (stamp - m) / 60;
  let h = stamp % 24;
  let d = (stamp - h) / 24;

  let text = ``;

  if (d > 0) text += Math.floor(d) + " –¥. ";
  if (h > 0) text += Math.floor(h) + " —á. ";
  if (m > 0) text += Math.floor(m) + " –º. ";
  if (s > 0) text += Math.floor(s) + " —Å.";
  return text;
}

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);




cmd.hear(/^(?:–ü–æ–¥–∞—Ä–æ–∫|üåü –ü–æ–¥–∞—Ä–æ–∫|üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫)$/i,

  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
      if (message.user.settings.adm > 1) return bot(`–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–ª—å–∑—è –∑–∞–±–∏—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –±–µ—Å–µ–¥.`)
      const chat = chats.find(chat => chat.id === message.chatId);
      if (chat) {
        if (message.chatId !== podarok)
          return message.send(`üéÅ @id${message.user.id} (${message.user.tag}), –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–µ—Å–µ–¥–µ!
üì© –ë–µ—Å–µ–¥–∞: `);

        if (chat.podarok === undefined) {
          chat.podarok = 3600000;
        }

        let user = double.find((x) => x.uid === botinfo.podarok);

        if (!message.isChat)
          return message.send(`üéÅ @id${message.user.id} (${message.user.tag}), –ø–æ–¥–∞—Ä–æ–∫ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—à–µ–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –±–µ—Å–µ–¥–µ!
üì© –ë–µ—Å–µ–¥–∞: `);



        if (chat.podarok > Date.now())
          return bot(`–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ! üí°

‚åõ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑: ${unixStampLeft(chat.podarok - Date.now())}
üì• –ü—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–±—Ä–∞–ª –∏–≥—Ä–æ–∫ ${user.mention ? `@id${user.id} (${user.tag})` : `${user.tag}`
            } (üÜî: ${user.uid})`);

        chat.podarok = Date.now() + 1800000;

        botinfo.podarok = message.user.uid;

        if (message.isChat) {
          setTimeout(() => {
            message.send({ sticker_id: utils.pick([108219, 108230, 79421, 108246, 62796, 52982, 110710, 110670]), });

            vk.api.messages.send({
              chat_id: podarok,
              random_id: 0,
              message: `@all
            ‚ñ∂Ô∏è –ü–æ–¥–∞—Ä–æ–∫ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è!`,

              keyboard: JSON.stringify({
                inline: true,
                buttons: [
                  [
                    {
                      action: {
                        type: "text",
                        payload: "{}",
                        label: "üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫",
                      },
                      color: "default",
                    },
                  ],
                ],
              }),
            });
          }, 1800000);
        }

        let prize = utils.pick([1, 1, 2, 2, 3, 3, 4, 4, 5,6,6]);

        if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && message.user.now.kv8 && message.user.now.kv9 && !message.user.now.kv10){

          message.user.now.kv10 = true;
          message.user.rubli += 50;
          await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ!
    
    –ù–∞–≥—Ä–∞–¥–∞ - 50 –¥–æ–Ω–∞—Ç-—Ä—É–±–ª–µ–π (–∏—Ö –Ω–µ–ª—å–∑—è –≤—ã–≤–µ—Å—Ç–∏) 
    
    üí° –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –ø—Ä–æ—à–ª–∏ –ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞!`, {
      keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
          [{
            "action": {
              "type": "text",
              payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
              "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
            },
            "color": "positive"
          }]
        ]
      })
    })
    
        }

        if (prize === 1) {
          let denga = utils.random(1000000, 7000000);

          message.user.balance += denga;

          return message.send(`üéÅ @id${message.user.id} (${message.user.tag
            }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(denga)} ${val1} üí∞

üí° –£–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å: ¬´–±–∞–ª–∞–Ω—Å¬ª`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–±–∞–ª–∞–Ω—Å` }),
          "label": `üí∞ –ë–∞–ª–∞–Ω—Å`
        },
        "color": "positive"
      }]
    ]
  })
});
        }

        if (prize === 2) {
          let rate = utils.random(1, 50);

          message.user.rating += rate;

          return message.send(`üéÅ @id${message.user.id} (${message.user.tag
            }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(rate)} üëë

üí° –£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥: ¬´—Ä–µ–π—Ç–∏–Ω–≥¬ª`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `—Ä–µ–π—Ç–∏–Ω–≥` }),
          "label": `üëë –†–µ–π—Ç–∏–Ω–≥`
        },
        "color": "positive"
      }]
    ]
  })
});
        }

        if (prize === 3) {
          let bitc = utils.random(100, 1000);

          message.user.btc += bitc;

          return message.send(`üéÅ @id${message.user.id} (${message.user.tag
            }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(bitc)} –±–∏—Ç–∫–æ–∏–Ω–æ–≤ üíæ

üí° –£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –±–∏—Ç–∫–æ–∏–Ω—ã: ¬´–±–∏—Ç–∫–æ–∏–Ω—ã¬ª`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–±–∏—Ç–∫–æ–∏–Ω—ã` }),
          "label": `üí∞ –ë–∏—Ç–∫–æ–∏–Ω—ã`
        },
        "color": "positive"
      }]
    ]
  })
});
        }

        if (prize === 4) {
          let dc = utils.random(1, 3);

          message.user.c3 += dc;

          return message.send(`üéÅ @id${message.user.id} (${message.user.tag
            }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(dc)} –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–æ–≤ üì¶

üí° –û—Ç–∫—Ä—ã—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã: ¬´–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3¬ª`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3` }),
          "label": `üéÅ –û—Ç–∫—Ä—ã—Ç—å –¥–æ–Ω–∞—Ç-–∫–µ–π—Å`
        },
        "color": "positive"
      }]
    ]
  })
});
        }

        if (prize === 5) {
          let rubl = utils.random(1, 5);

          message.user.rubli += rubl;

          return message.send(`üéÅ @id${message.user.id} (${message.user.tag
            }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(
              rubl
            )} –¥–æ–Ω–∞—Ç-—Ä—É–±–ª–µ–π! üí∏

üí° –ù–∞ —Ä—É–±–ª–∏ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –¥–æ–Ω–∞—Ç, –ø–æ –∫–æ–º–∞–Ω–¥–µ: ¬´–¥–æ–Ω–∞—Ç¬ª`);
        }

if (prize == 6) {
    let rands = utils.random(1, 25);

    message.user.rub += rands;

    return message.send(`üéÅ @id${message.user.id} (${message.user.tag
      }), –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –° –Ω–µ–≥–æ –í–∞–º –≤—ã–ø–∞–ª–æ ${utils.sp(
        rands
      )} ${val2} üí∏`);

  }

      }
    }
  }
);



module.exports = commands;
