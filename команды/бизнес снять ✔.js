let utils = require('../utils.js')

const commands = [];

const fs = require('fs');


const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}



// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


let double = require('../database/users.json')

cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å)\s(?:—Å–Ω—è—Ç—å)\s(\d)\s(.*)$/i, async (message, bot) => {
  try {
    if (!message.isChat || message.chat.type === 1) {
      await withdrawMoneyPrivate(message, bot);
    } else if (message.chat.type === 2) {
      await withdrawMoneyGroup(message, bot);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å:", error);
    await bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

async function withdrawMoneyPrivate(message, bot) {
  if (!message.user.settings) {
    message.user.settings = {};
  }

  let businessIndex = Math.floor(Number(message.args[1]));

  if (message.user.settings.busi === true) {
    if (businessIndex < 1 || businessIndex > 5)
      return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–æ—Ç 1 –¥–æ 5] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`);
  } else {
    if (businessIndex < 1 || businessIndex > 4)
      return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–æ—Ç 1 –¥–æ 4] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`);
  }

  if (message.user.business2.length < businessIndex)
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

  businessIndex--;

  let amountStr = message.args[2];
  amountStr = amountStr.replace(/(\.|\,)/gi, "");
  amountStr = amountStr.replace(/(–∫|k)/gi, "000");
  amountStr = amountStr.replace(/(–º|m)/gi, "000000");
  amountStr = amountStr.replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi, message.user.business2[businessIndex].moneys);


  let amount = Math.floor(Number(amountStr));

  if (isNaN(amount)) return;


  if (amount <= 0)
    return bot(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É —Å–æ —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ üòî`);

  if (amount > message.user.business2[businessIndex].moneys)
    return bot(
      `üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå\n\nüí∞ –ë–∞–ª–∞–Ω—Å –±–∏–∑–Ω–µ—Å–∞: ${utils.sp(
        message.user.business2[businessIndex].moneys
      )} ${val1} üè¶`
    );

  message.user.balance += amount;
  message.user.business2[businessIndex].moneys -= amount;

  return bot(
    `‚úÖ –í—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ ${utils.sp(
      amount
    )} ${val1} üíµ\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1} üí∏`
  );
}

async function withdrawMoneyGroup(message, bot) {
  if (!message.user.settings) {
    message.user.settings = {};
  }

  let businessIndex = Math.floor(Number(message.args[1]));

  if (message.user.settings.busi === true) {
    if (businessIndex < 1 || businessIndex > 5)
      return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–æ—Ç 1 –¥–æ 5] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`);
  } else {
    if (businessIndex < 1 || businessIndex > 4)
      return bot(`üö´ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ë–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å [–æ—Ç 1 –¥–æ 4] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]`);
  }

  if (message.user.business.length < businessIndex)
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

  businessIndex--;

  let amountStr = message.args[2];
  amountStr = amountStr.replace(/(\.|\,)/gi, "");
  amountStr = amountStr.replace(/(–∫|k)/gi, "000");
  amountStr = amountStr.replace(/(–º|m)/gi, "000000");
  amountStr = amountStr.replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi, message.user.business[businessIndex].moneys);

  let amount = Math.floor(Number(amountStr));

  if (isNaN(amount)) return;

  if (amount <= 0)
    return bot(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ç–∞–∫—É—é —Å—É–º–º—É —Å–æ —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ üòî`);

  if (amount > message.user.business[businessIndex].moneys)
    return bot(
      `üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á—ë—Ç–µ —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå\n\nüí∞ –ë–∞–ª–∞–Ω—Å –±–∏–∑–Ω–µ—Å–∞: ${utils.sp(
        message.user.business[businessIndex].moneys
      )} ${val4} üè¶`
    );

  message.user.balance2 += amount;
  message.user.business[businessIndex].moneys -= amount;

  return bot(
    `‚úÖ –í—ã —Å–Ω—è–ª–∏ —Å–æ —Å—á—ë—Ç–∞ –±–∏–∑–Ω–µ—Å–∞ ${utils.sp(
      amount
    )} ${val4} üíµ\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance2)} ${val4} üí∏`
  );
}

let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

module.exports = commands;