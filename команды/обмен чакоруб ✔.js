let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 
const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }



const tokenData3 = getToken3(); 


let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5



cmd.hear(new RegExp(`^(?:–æ–±–º–µ–Ω ${val2}|–æ–±–º–µ–Ω–Ω–∏–∫|–æ|üõë –û–±–º–µ–Ω ${val2})$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type == 1) {
    utils.pick([`üå∑`, `üå∏`, `üåπ`, `üå∫`, `üåº`, `üíê`, `‚ù§Ô∏è`, `üíì`, `üíï`]);
    return bot(`–û–±–º–µ–Ω ${val2}:

üèÜ ‚ûñ –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏
1&#8419; Titan | 10.000 ${val2}
2&#8419; Premium | 5.500 ${val2}
3&#8419; VIP | 1.000 ${val2}

üì¶ ‚ûñ –ö–µ–π—Å—ã
4&#8419; –î–æ–Ω–∞—Ç-–∫–µ–π—Å | 150 ${val2}

üí∞ ‚ûñ –í–∞–ª—é—Ç–∞
5&#8419; 350.000.000 ${val1} | 349 ${val2}
6&#8419; 300.000.000 ${val1} | 299 ${val2}
7&#8419; 100.000.000 ${val1} | 100 ${val2}
8&#8419; 20.000.000 ${val1} | 20 ${val2}
9&#8419; 15.000.000 ${val1}  | 15 ${val2}
1&#8419;0&#8419; 10.000.000 ${val1} | 10 ${val2}
1&#8419;1&#8419; 5.000.000 ${val1} | 5 ${val2}
1&#8419;2&#8419; 3.000.000 ${val1} | 3 ${val2}

üí¨ ‚ûñ –î—Ä—É–≥–æ–µ
1&#8419;3&#8419; –ö–∏–Ω–æ—Å—Ç—É–¥–∏—è - 3.000.000 ${val1}/—á–∞—Å | 2.999 ${val2}
1&#8419;4&#8419; –î–ª–∏–Ω–Ω—ã–π –Ω–∏–∫ | 14 ${val2}

üåü ‚ûñ –ù–æ–≤–∏–Ω–∫–∏
1&#8419;5&#8419; –î–æ–Ω–∞—Ç–Ω—ã–π –ì–∏–≥–∞–Ω—Ç - 30 ${val2}/—á–∞—Å | 15.000 ${val2}
1&#8419;6&#8419; TITAN VIP | 25.000 ${val2}

üì¶ ‚ûñ –ü–æ—Å—ã–ª–∫–∏
1&#8419;7&#8419; –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ | 250 ${val2}
1&#8419;8&#8419; –≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ | 1.000 ${val2}
1&#8419;9&#8419; –ü—Ä–µ–º–∏—É–º –ø–æ—Å—ã–ª–∫–∞ | 5.000 ${val2}

üíµ ‚ûñ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.rub)} ${val2}

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "${val2} [–Ω–æ–º–µ—Ä]".`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 1)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {

    if (30000 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}–π. ‚õî`);

    if (message.user.settings.titan == true) return bot(`—É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. ‚úÖ`);

    message.user.rub -= 10000;
    message.user.settings.titan = true;
    message.user.bantop = true;
    message.user.stock.status = 'TITAN';

    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -10.000 ${val2} üí∞\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ TITAN.`);

  }
  });

cmd.hear(new RegExp(`^(?:${val2} 2)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (1499 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    if (message.user.settings.premium) return bot(`—É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å [Premium]. ‚úÖ`);

    if (!message.user.settings.premium) {

      message.user.settings.premium = true;

      message.user.rub -= 5500;

      return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -5.500 ${val2} üí∞\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´PREMIUM¬ª! üéä\n\nüí¨ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´Premium help¬ª ü§ó`);

    } 
  }

});



cmd.hear(new RegExp(`^(?:${val2} 3)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (1149 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    if (message.user.settings.vip) return bot(`—É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å [VIP]. ‚úÖ`);

    if (!message.user.settings.vip) {

      message.user.settings.vip = true;

      message.user.rub -= 1000;

      return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -1.000 ${val2} üí∞\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´VIP¬ª! üéä\n\nüí¨ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´VIP help¬ª ü§ó`);

    }
  }

});

cmd.hear(new RegExp(`^(?:${val2} 4)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {

    if (150 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    message.user.c3 += 1

    message.user.rub -= 150

    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -150 ${val2} üí∞\n\nüí¨ –î–æ–Ω–∞—Ç-–∫–µ–π—Å —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç. üì¶`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 5)$`, 'i'), async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

    if (149 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 149;

    message.user.balance += 350000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -149 ${val2} üí∞\n\nüíµ +350.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 6)$`, 'i'), async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

    if (299 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 299;

    message.user.balance += 300000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -299 ${val2} üí∞\n\nüíµ +300.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 7)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (100 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ß–∞–∫–æ-—Ä—É–±–ª–µ–π. ‚õî`);



    message.user.rub -= 100;

    message.user.balance += 100000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -100 ${val2} üí∞\n\nüíµ +100.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 8)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (20 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 20;

    message.user.balance += 20000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -20 ${val2} üí∞\n\nüíµ +20.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 9)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (15 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 15;

    message.user.balance += 15000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -15 ${val2} üí∞\n\nüíµ +15.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 10)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (10 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 10;

    message.user.balance += 50000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -10 ${val2} üí∞\n\nüíµ +50.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 11)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (5 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 5;

    message.user.balance += 15000000;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -5 ${val2} üí∞\n\nüíµ +15.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 12)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {


    if (3 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 3;

    message.user.balance += 50000000;



  return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -3 ${val2} üí∞\n\nüíµ +5.000.000 ${val1} —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–∞–ª–∞–Ω—Å! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 13)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (2999 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    if (message.user.business2.length > 0) return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å`,
    {
      keyboard: JSON.stringify({
        inline: true,
        buttons: [
          [{
            action: {
              type: "text",
              payload: JSON.stringify({ command: "–ø—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å" }),
              label: "‚ùé –ü—Ä–æ–¥–∞—Ç—å"
            },
            color: "primary"
          }]
        ]
      })
    });



    message.user.rub -= 2999;

    message.user.business2.push({

      "id": 16,

      "upgrade": 1,

      "workers": 7500,

      "moneys": 0

    });



      return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -2999 ${val2} üí∞\n\nüé• –ë–∏–∑–Ω–µ—Å ¬´–ö–∏–Ω–æ—Å—Ç—É–¥–∏—è –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É¬ª –≤—ã–¥–∞–Ω–∞ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç! üéâ`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 14)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (14 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    if (message.user.nicklimit > 31) return bot(`—É –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä. ‚úÖ`);



    message.user.rub -= 14;

    message.user.nicklimit = 32;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -14 ${val2} üí∞\n\nüí¨ –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫-–Ω–µ–π–º, —Ç–µ–ø–µ—Ä—å –µ–≥–æ –¥–ª–∏–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 32 —Å–∏–º–≤–æ–ª–∞. üî•`);
  }
});



cmd.hear(new RegExp(`^(?:${val2} 15)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (message.user.stars5) return bot(`–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –¥–∞–Ω–Ω—É—é –∑–≤–µ–∑–¥—É ‚ùå`);

    if (message.user.rub >= 15000) {

      message.user.stars5 = true;

      message.user.rub -= 15000;

      return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -15.000 ${val2} üí∞\n\n‚≠ê –ó–≤–µ–∑–¥–∞ ¬´–î–æ–Ω–∞—Ç–Ω—ã–π –≥–∏–≥–∞–Ω—Ç¬ª –≤—ã–¥–∞–Ω–∞ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç! üéâ`);

    } else {

      return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    }


  }
});

cmd.hear(new RegExp(`^(?:${val2} 16)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (25000 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);



    message.user.rub -= 25000;

    message.user.settings.titan = true;

    message.user.limit.nicklimit = 48;

    message.user.level += 50;

    message.user.opit += 50000;

    message.user.limit.banklimit = 500000000000000;

    message.user.limit.farmlimit = 10000;

    message.user.limit.playerlimit = 300000000000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 100;



    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -25.000 ${val2} üí∞\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —Å—Ç–∞—Ç—É—Å ¬´TITAN¬ª! üéä\n\nüí¨ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ ¬´TITAN help¬ª ü§ó`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 17)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (250 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    message.user.possilka1 += 1;

    message.user.rub -= 250;

    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -250 ${val2} üí∞\n\nüì¶ –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç. –û—Ç–∫—Ä—ã—Ç—å: ¬´–ø–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 1¬ª üéâ`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 18)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (1000 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    message.user.possilka2 += 1;

    message.user.rub -= 1000;

    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -1000 ${val2} üí∞\n\nüì¶ –≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç. –û—Ç–∫—Ä—ã—Ç—å: ¬´–ø–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 2¬ª üéâ`);
  }
});

cmd.hear(new RegExp(`^(?:${val2} 19)$`, 'i'), async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (5000 > message.user.rub) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}. ‚õî`);

    message.user.possilka3 += 1;

    message.user.rub -= 5000;

    return message.send(`‚ñ∂Ô∏è –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞! -5000 ${val2} üí∞\n\nüì¶ –ü—Ä–µ–º–∏—É–º –ø–æ—Å—ã–ª–∫–∞ —É–∂–µ –≤—ã–¥–∞–Ω–∞ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç. –û—Ç–∫—Ä—ã—Ç—å: ¬´–ø–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 3¬ª üéâ`);
  }

});



// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–±–º–µ–Ω–∞
function createExchangeKeyboard(command, maxAmount, currency) {
  return JSON.stringify({
    inline: true,
    buttons: [[{
      action: {
        type: "text",
        payload: JSON.stringify({ command: `${command} ${maxAmount}` }),
        label: `üõí –ö—É–ø–∏—Ç—å ${maxAmount} (${currency})`,
      },
      color: "positive",
    }]]
  });
}

cmd.hear(/^(?:üìà –û–±–º–µ–Ω|–û–±–º–µ–Ω)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    await bot(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –æ–±–º–µ–Ω–∏–∫ –≤—ã –±—É–¥–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?`, {
      keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω 1" }),
              "label": "üíé –°—Ç–∞—Ä—ã–π"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–º–∞–Ω–∏—á–µ–∫ 2" }),
              "label": "üí∞ –ù–æ–≤—ã–π"
            },
            "color": "primary"
          }]
        

        ]
      })
    });
  }
})





cmd.hear(/^(?:üìà –û–±–º–µ–Ω 1|–û–±–º–µ–Ω 1)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    await bot(`üí∞ –û–±–º–µ–Ω–Ω–∏–∫ ${val4}

üí± –í–∞–ª—é—Ç–∞

1‚É£ 1.000 ${val4} ‚ûú 20.000.000 ${val1}

üéÅ Starr Drop

2‚É£ 150.000 ${val4} ‚ûú Starr Drop

üíµ –î–æ–Ω–∞—Ç ‚Äì –†—É–±–ª–∏

3‚É£ 1.000.000 ${val4} ‚ûú 10 —Ä—É–±–ª–µ–π

üí≥ –û–±–º–µ–Ω –Ω–∞ ${val4}

4‚É£ 60.000.000 ${val1} ‚ûú 1.000 ${val4}
5‚É£ 1.000 ${val2} ‚ûú 10.000 ${val4}
6‚É£ 1 –±–∏–ª–µ—Ç ‚ûú 5.000 ${val4}


üìä –í–∞—à –±–∞–ª–∞–Ω—Å –≤–∞–ª—é—Ç:

üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}

üí∏ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.rubli)} —Ä—É–±–ª–µ–π

üéüÔ∏è –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.bilet)} –±–∏–ª–µ—Ç–æ–≤

üí∏ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.rub)} ${val2}–æ–≤

üíæ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance2)} ${val4}

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–û–±–º–µ–Ω [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]"`)
  }
})
// –û–±–º–µ–Ω 1
cmd.hear(/^(?:–û–±–º–µ–Ω 1)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 1000;
        const gainPerExchange = 20000000;

        const maxAmount = Math.floor(message.user.balance2 / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.balance2 < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 1", maxAmount, val4);
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val4}!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.balance2.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.balance += totalGain;
        message.user.balance2 -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} ${val1}`
        );
    }
});

// –û–±–º–µ–Ω 2
cmd.hear(/^(?:–û–±–º–µ–Ω 2)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 150000;
        const gainPerExchange = 1;

        const maxAmount = Math.floor(message.user.balance2 / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.balance2 < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 2", maxAmount, val4);
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val4}!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.balance2.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.c4 += totalGain;
        message.user.balance2 -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} Starr Drop`
        );
    }
});

// –û–±–º–µ–Ω 3
cmd.hear(/^(?:–û–±–º–µ–Ω 3)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 1000000;
        const gainPerExchange = 10;

        const maxAmount = Math.floor(message.user.balance2 / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.balance2 < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 3", maxAmount, val4);
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val4}!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.balance2.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.rubli += totalGain;
        message.user.balance2 -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} ${val4}\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} —Ä—É–±–ª–µ–π`
        );
    }
});

// –û–±–º–µ–Ω 4
cmd.hear(/^(?:–û–±–º–µ–Ω 4)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 60000000;
        const gainPerExchange = 1000;

        const maxAmount = Math.floor(message.user.balance / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.balance < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 4", maxAmount, val1);
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val1}!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.balance.toLocaleString()} ${val1}\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} ${val1}\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.balance2 += totalGain;
        message.user.balance -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} ${val1}\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} ${val4}`
        );
    }
});

// –û–±–º–µ–Ω 5
cmd.hear(/^(?:–û–±–º–µ–Ω 5)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 1000;
        const gainPerExchange = 10000;

        const maxAmount = Math.floor(message.user.rub / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.rub < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 5", maxAmount, val2);
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ${val2}!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.rub.toLocaleString()} ${val2}\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} ${val2}\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.balance2 += totalGain;
        message.user.rub -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} ${val2}\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} ${val4}`
        );
    }
});

// –û–±–º–µ–Ω 6
cmd.hear(/^(?:–û–±–º–µ–Ω 6)(?: (\d+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const count = Number(message.args[1]) || 1;
        const costPerExchange = 1;
        const gainPerExchange = 5000;

        const maxAmount = Math.floor(message.user.bilet / costPerExchange);
        const totalCost = costPerExchange * count;
        const totalGain = gainPerExchange * count;

        if (message.user.bilet < totalCost) {
            const keyboard = createExchangeKeyboard("–û–±–º–µ–Ω 6", maxAmount, "–±–∏–ª–µ—Ç–æ–≤");
            return bot(
                `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤!\n` +
                `‚ñ∏ –£ –≤–∞—Å: ${message.user.bilet.toLocaleString()} –±–∏–ª–µ—Ç–æ–≤\n` +
                `‚ñ∏ –ù—É–∂–Ω–æ: ${totalCost.toLocaleString()} –±–∏–ª–µ—Ç–æ–≤\n` +
                `‚ñ∏ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å: ${maxAmount}`,
                { keyboard }
            );
        }

        message.user.balance2 += totalGain;
        message.user.bilet -= totalCost;

        return message.send(
            `‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ–±–º–µ–Ω!\n` +
            `‚ñ∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalCost.toLocaleString()} –±–∏–ª–µ—Ç–æ–≤\n` +
            `‚ñ∏ –ü–æ–ª—É—á–µ–Ω–æ: ${totalGain.toLocaleString()} ${val4}`
        );
    }
});



cmd.hear(/^(?:üìà –û–±–º–∞–Ω–∏—á–µ–∫ 2|–º–∞–Ω–∏—á–µ–∫ 2)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    await bot(`–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å:
    –í–∞—à –±–∞–ª–∞–Ω—Å - ${utils.sp(message.user.oval)} sealcoins
    
    sealcoins - –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–∞—Ö. –æ—Ç 1 –¥–æ 5.`, {
      keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω GB" }),
              "label": "üíé GB"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –í–∞–ª—é—Ç–∞" }),
              "label": "üí∞ –í–∞–ª—é—Ç–∞"
            },
            "color": "primary"
          }],
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –ö–µ–π–∞—Ä" }),
              "label": "üéÅ –ö–µ–π—Å—ã"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω Star Drop" }),
              "label": "‚≠ê Star Drop"
            },
            "color": "primary"
          }],
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –ë–∏–ª–µ—Ç—ã" }),
              "label": "üé´ –ë–∏–ª–µ—Ç—ã"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –†—É–±–ª–∏" }),
              "label": "‚ÇΩ –†—É–±–ª–∏"
            },
            "color": "primary"
          }],
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –°—Ç–∞—Ç—É—Å—ã" }),
              "label": "üèÜ –°—Ç–∞—Ç—É—Å—ã"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –§–µ—Ä–º—ã" }),
              "label": "üöú –§–µ—Ä–º—ã"
            },
            "color": "primary"
          }],
          [{
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω —Ä–∞–Ω–¥–æ–º" }),
              "label": "üé° Mystery Boxs"
            },
            "color": "primary"
          }, {
            "action": {
              "type": "text",
              "payload": JSON.stringify({ command: "–û–±–º–µ–Ω –†—É–¥–∞" }),
              "label": "‚õèÔ∏è –†—É–¥–∞"
            },
            "color": "primary"
          }],

        ]
      })
    });
  }
})

cmd.hear(/^(?:—Å–ø—Ä–∞–≤–∫–∞ –æ–≤–∞–ª–∞)$/i, async (message, bot) => {
return bot(`üí∞ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å SealCoins?

–ü—Ä–æ—Å—Ç–æ —É—á–∞—Å—Ç–≤—É–π –≤ –≥–æ–Ω–∫–∞—Ö üèÅ, –∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å:  
üéØ 1-5 SealCoins –∑–∞ –∑–∞–µ–∑–¥!  

–¢–∞–∫–∂–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –±—É–¥–µ—Ç —Å–∞–º –±–æ—Ç –¥–∞–≤–∞—Ç—å –æ—Ç 1-2 —à—Ç—É–∫  

–ß–µ–º —á–∞—â–µ –∏–≥—Ä–∞–µ—à—å ‚Äî —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–ª—É—á–∞–µ—à—å! üöÄ  
–£–¥–∞—á–∏ –Ω–∞ —Ç—Ä–µ–∫–µ! üèéÔ∏èüí® `)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –†—É–¥–∞)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

 1. –ñ–µ–ª–µ–∑–æ - 1 sealcoin
 2. –ó–æ–ª–æ—Ç–æ - 1 sealcoin
 3. –ê–ª–º–∞–∑—ã - 5 sealcoin
 4. –ú–∞—Ç–µ—Ä–∏—è - 10 sealcoin
 5. –û–±—Å–∏–¥–∏–∞–Ω - 15 sealcoin
 6. –ü–ª–∞–∑–º–∞ - 25 sealcoin

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ—Ä (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)

  `)

})

cmd.hear(/^(?:–û–±–º–µ–Ω —Ä–∞–Ω–¥–æ–º)$/i, async (message, bot) => {
return bot(`üéÅ –í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç:

1. Mystery Box üéÅ‚ú® - 50 sealcoin

   –í–Ω–∏–º–∞–Ω–∏–µ! –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –±–æ—Ç–∞: –æ—Ç –≤–∞–ª—é—Ç—ã üíµ –¥–æ —Å—Ç–∞—Ç—É—Å–∞ üëë.  

   üîπ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏:
   –æ–± 1 (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
 `)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –§–µ—Ä–º—ã)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. 1 —à—Ç - 20 sealcoin
  
  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ—Ñ 1 (–∫–æ–ª-–≤–æ)
  `)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –†—É–±–ª–∏)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. 1 –¥–æ–Ω–∞—Ç —Ä—É–±–ª—å - 10 sealcoin
  2. 10 ${val2} - 15 sealcoin

  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ—Ä—É (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –ë–∏–ª–µ—Ç—ã)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. 1 –±–∏–ª–µ—Ç - 5 sealcoin
  2. 5 –±–∏–ª–µ—Ç–æ–≤ - 23 sealcoin
  3. 10 –±–∏–ª–µ—Ç–æ–≤ - 45 sealcoin
  
  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ–± (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω Star Drop)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1.–†–µ–¥–∫–∏–π - 15 sealcoin
  2.–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π - 20 sealcoin
  3.–≠–ø–∏—á–µ—Å–∫–∏–π - 35 sealcoin
  4.–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π - 50 sealcoin
  5.–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π - 90 sealcoin

–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ—Å (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)
`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –ö–µ–π–∞—Ä)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. –û–±—ã—á–Ω—ã–π - 5 sealcoin
  2. –ó–æ–ª–æ—Ç–æ–π - 5 sealcoin
  3. –î–æ–Ω–∞—Ç–Ω—ã–π - 10 sealcoin
  4. Star Drop - 10 sealcoin
  5. Halloween - 20 sealcoin
  6. –°–µ–∫—Ä–µ—Ç–Ω—ã–π - 15 sealcoin
  7. –ê–≤—Ç–æ–∑–≤—É–∫ - 5 sealcoin
  8. –ù–æ–≤–æ–≥–æ–ª–¥–Ω–∏–π - 25 sealcoin
  9. –ü—Ä–µ–º–∏—É–º - 30 sealcoin
  10. –£–ª—å—Ç—Ä–∞ - 40 sealcoin
  11. –†–∞–Ω–¥–æ–º–Ω—ã–π - 20 sealcoin
  
  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ–∫ (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –í–∞–ª—é—Ç–∞)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. 1.000.000 ${val1} - 1 sealcoin
  2. 1.000.000.000 ${val1} - 700 sealcoin
  
  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ–≤ (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω GB)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:

  1. 1.000 ${val4} - 5 sealcoin
  2. 10.000 ${val4} - 8 sealcoin
  3. 50.000 ${val4} - 30 sealcoin
  4. 100.000 ${val4} - 60 sealcoin
  5. 1.000.000 ${val4} - 500 sealcoin
  
  –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ–≥ (–Ω–æ–º–µ—Ä) (–∫–æ–ª-–≤–æ)`)

})

cmd.hear(/^(?:–û–±–º–µ–Ω –°—Ç–∞—Ç—É—Å—ã)$/i, async (message, bot) => {
return bot(`–í—ã–±–µ—Ä–∏:
 
   1. VIP - 100 sealcoin
   2. PREMIUM - 200 sealcoin
   3. TITAN - 300 sealcoin
   4. JOKER - 400 sealcoin
   5. IMPERATOR - 500 sealcoin
   6. TOPDON - 600 sealcoin
   7. ADMIN - 1000 sealcoin

   –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –æ—Å—Ç–∞—Ç—É—Å (–Ω–æ–º–µ—Ä)
  `)

})
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ä—É–¥—ã
cmd.hear(/^(?:–æ—Ä|–û–†)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const item = parseInt(message.args[1] || 1);
    const amountInput = message.args[2];
    const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

    if (isNaN(item) || item < 1 || item > 6) {
      return bot("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä—É–¥—ã. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: 1-6");
    }

    if (isNaN(amount) || amount < 1) {
      return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
    }

    const prices = {
      1: 1,   // –ñ–µ–ª–µ–∑–æ
      2: 1,   // –ó–æ–ª–æ—Ç–æ
      3: 5,   // –ê–ª–º–∞–∑—ã
      4: 10,  // –ú–∞—Ç–µ—Ä–∏—è
      5: 15,  // –û–±—Å–∏–¥–∏–∞–Ω
      6: 25   // –ü–ª–∞–∑–º–∞
    };

    const itemNames = {
      1: "–ñ–µ–ª–µ–∑–æ",
      2: "–ó–æ–ª–æ—Ç–æ",
      3: "–ê–ª–º–∞–∑—ã",
      4: "–ú–∞—Ç–µ—Ä–∏—è",
      5: "–û–±—Å–∏–¥–∏–∞–Ω",
      6: "–ü–ª–∞–∑–º–∞"
    };

    const itemKeys = {
      1: "zhelezo",
      2: "zoloto",
      3: "almaz",
      4: "materia",
      5: "obsidian",
      6: "plazma"
    };

    const totalPrice = prices[item] * amount;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (message.user.oval < totalPrice) {
      return bot(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins. –ù—É–∂–Ω–æ: ${totalPrice}, —É –≤–∞—Å: ${message.user.oval}`);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä—É–¥
    message.user.ruds = message.user.ruds || {
      zhelezo: 0,
      zoloto: 0,
      almaz: 0,
      materia: 0,
      obsidian: 0,
      plazma: 0
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä—É–¥—ã
    const itemKey = itemKeys[item];
    message.user.ruds[itemKey] = (message.user.ruds[itemKey] || 0) + amount;
    
    // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    message.user.oval -= totalPrice;

    // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return bot(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!\n` +
               `‚ñ∏ –ö—É–ø–ª–µ–Ω–æ: ${amount} ${itemNames[item]}\n` +
               `‚ñ∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalPrice} sealcoins\n` +
               `‚ñ∏ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${message.user.ruds[itemKey]} ${itemNames[item]}\n` +
               `‚ñ∏ –û—Å—Ç–∞—Ç–æ–∫: ${message.user.oval} sealcoins`);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ä—É–¥—ã:", error);
    return bot("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –±–æ–∫—Å–æ–≤
cmd.hear(/^(?:–æ–±|–û–ë)(?:\s+1)?(?:\s+(\d+))?$/i, async (message, bot) => {
  const amountInput = message.args[1];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  if (isNaN(amount) || amount < 1) {
    return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
  }

  const pricePerBox = 50;
  const totalPrice = pricePerBox * amount;

  if (message.user.oval < totalPrice) {
    return bot(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins. –ù—É–∂–Ω–æ: ${totalPrice}, —É –≤–∞—Å: ${message.user.oval}`);
  }

  // –°–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
  message.user.oval -= totalPrice;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –µ—Å–ª–∏ –Ω–µ—Ç
  if (!message.user.ruds) {
    message.user.ruds = {
      zhelezo: 0, zoloto: 0, almaz: 0,
      materia: 0, obsidian: 0, plazma: 0
    };
  }
  if (!message.user.settings) {
    message.user.settings = {};
  }
  if (!message.user.misc) {
    message.user.misc = { farm_count: 0 };
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
  const statusData = {
    vip: { name: "VIP", price: 100 },
    premium: { name: "PREMIUM", price: 200 },
    titan: { name: "TITAN", price: 300 },
    joker: { name: "JOKER", price: 400 },
    imperator: { name: "IMPERATOR", price: 500 },
    topdon: { name: "TOPDON", price: 600 },
    adm: { name: "ADMIN", price: 1000 }
  };

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–¥–∫–æ—Å—Ç–µ–π —Å –≤–µ—Å–∞–º–∏ –¥–ª—è –ø—Ä–∏–∑–æ–≤
  const raritySystem = [
    { 
      name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è", 
      emoji: "üü°",
      chance: 1,
      prizes: [
        { name: "VIP —Å—Ç–∞—Ç—É—Å", field: "settings.vip", amount: 1, weight: 10 },
        { name: "PREMIUM —Å—Ç–∞—Ç—É—Å", field: "settings.premium", amount: 1, weight: 8 },
        { name: "TITAN —Å—Ç–∞—Ç—É—Å", field: "settings.titan", amount: 1, weight: 6 },
        { name: "JOKER —Å—Ç–∞—Ç—É—Å", field: "settings.joker", amount: 1, weight: 4 },
        { name: "IMPERATOR —Å—Ç–∞—Ç—É—Å", field: "settings.imperator", amount: 1, weight: 3 },
        { name: "TOPDON —Å—Ç–∞—Ç—É—Å", field: "settings.topdon", amount: 1, weight: 2 },
        { name: "ADMIN —Å—Ç–∞—Ç—É—Å", field: "settings.adm", amount: 1, weight: 1 }
      ]
    },
    {
      name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è",
      emoji: "üü†",
      chance: 4,
      prizes: [
        { name: "–û–±—ã—á–Ω—ã–π –∫–µ–π—Å", field: "c1", amount: 1, weight: 100 },
        { name: "–ó–æ–ª–æ—Ç–æ–π –∫–µ–π—Å", field: "c2", amount: 1, weight: 80 },
        { name: "–î–æ–Ω–∞—Ç–Ω—ã–π –∫–µ–π—Å", field: "c3", amount: 1, weight: 60 },
        { name: "Star Drop –∫–µ–π—Å", field: "c4", amount: 1, weight: 40 },
        { name: "Halloween –∫–µ–π—Å", field: "c5", amount: 1, weight: 30 },
        { name: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å", field: "c6", amount: 1, weight: 20 },
        { name: "–ê–≤—Ç–æ–∑–≤—É–∫ –∫–µ–π—Å", field: "c7", amount: 1, weight: 15 },
        { name: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–µ–π—Å", field: "c8", amount: 1, weight: 10 },
        { name: "–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å", field: "c9", amount: 1, weight: 5 },
        { name: "–£–ª—å—Ç—Ä–∞ –∫–µ–π—Å", field: "c10", amount: 1, weight: 2 },
        { name: "–†–µ–¥–∫–∏–π Star Drop", field: "c12", amount: 1, weight: 50 },
        { name: "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π Star Drop", field: "c13", amount: 1, weight: 30 },
        { name: "–≠–ø–∏—á–µ—Å–∫–∏–π Star Drop", field: "c14", amount: 1, weight: 20 },
        { name: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π Star Drop", field: "c15", amount: 1, weight: 10 },
        { name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π Star Drop", field: "c16", amount: 1, weight: 5 }
      ]
    },
    {
      name: "–≠–ø–∏—á–µ—Å–∫–∞—è",
      emoji: "üü£", 
      chance: 15,
      prizes: [
        { name: "150 –∂–µ–ª–µ–∑–∞", field: "ruds.zhelezo", amount: 150, weight: 100 },
        { name: "70 –∑–æ–ª–æ—Ç–∞", field: "ruds.zoloto", amount: 70, weight: 70 },
        { name: "50 –∞–ª–º–∞–∑–æ–≤", field: "ruds.almaz", amount: 50, weight: 50 },
        { name: "30 –º–∞—Ç–µ—Ä–∏–∏", field: "ruds.materia", amount: 30, weight: 30 },
        { name: "20 –æ–±—Å–∏–¥–∏–∞–Ω–∞", field: "ruds.obsidian", amount: 20, weight: 20 },
        { name: "10 –ø–ª–∞–∑–º–∞", field: "ruds.plazma", amount: 10, weight: 10 }
      ]
    },
    {
      name: "–†–µ–¥–∫–∞—è",
      emoji: "üîµ",
      chance: 30,
      prizes: [
        { name: "5 sealcoins", field: "oval", amount: 5, weight: 100 },
        { name: "10 sealcoins", field: "oval", amount: 10, weight: 70 },
        { name: "15 sealcoins", field: "oval", amount: 15, weight: 50 },
        { name: "2 –±–∏–ª–µ—Ç–∞", field: "bilet", amount: 2, weight: 80 },
        { name: "5 –±–∏–ª–µ—Ç–æ–≤", field: "bilet", amount: 5, weight: 50 },
        { name: "10 –±–∏–ª–µ—Ç–æ–≤", field: "bilet", amount: 10, weight: 30 },
        { name: "1 —Ñ–µ—Ä–º–∞", field: "misc.farm_count", amount: 1, weight: 90 },
        { name: "5 —Ñ–µ—Ä–º", field: "misc.farm_count", amount: 5, weight: 60 },
        { name: "10 —Ñ–µ—Ä–º", field: "misc.farm_count", amount: 10, weight: 40 },
        { name: "15 —Ñ–µ—Ä–º", field: "misc.farm_count", amount: 15, weight: 20 }
      ]
    },
    {
      name: "–û–±—ã—á–Ω–∞—è",
      emoji: "üü¢",
      chance: 50,
      prizes: [
        { name: "1.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 1000000, weight: 100 },
        { name: "5.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 5000000, weight: 60 },
        { name: "10.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 10000000, weight: 30 },
        { name: "30.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 30000000, weight: 15 },
        { name: "50.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 50000000, weight: 10 },
        { name: "100.000.000 –≤–∞–ª—é—Ç—ã", field: "balance", amount: 100000000, weight: 5 },
        { name: "1.000 GB", field: "balance2", amount: 1000, weight: 100 },
        { name: "5.000 GB", field: "balance2", amount: 5000, weight: 70 },
        { name: "10.000 GB", field: "balance2", amount: 10000, weight: 50 },
        { name: "25.000 GB", field: "balance2", amount: 25000, weight: 30 },
        { name: "50.000 GB", field: "balance2", amount: 50000, weight: 20 },
        { name: "100.000 GB", field: "balance2", amount: 100000, weight: 10 }
      ]
    }
  ];

  let results = [];
  let compensation = 0;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
  const selectPrize = (prizes) => {
    const totalWeight = prizes.reduce((sum, prize) => sum + prize.weight, 0);
    let random = Math.random() * totalWeight;
    let cumulativeWeight = 0;
    
    for (const prize of prizes) {
      cumulativeWeight += prize.weight;
      if (random <= cumulativeWeight) {
        return prize;
      }
    }
    return prizes[0];
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –±–æ–∫—Å–æ–≤
  for (let i = 0; i < amount; i++) {
    const roll = Math.random() * 100;
    let cumulativeChance = 0;
    let selectedRarity = null;

    // –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–¥–∫–æ—Å—Ç—å
    for (const rarity of raritySystem) {
      cumulativeChance += rarity.chance;
      if (roll <= cumulativeChance) {
        selectedRarity = rarity;
        break;
      }
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∏–∑
    const prize = selectPrize(selectedRarity.prizes);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
    if (prize.field.startsWith('settings.')) {
      const statusType = prize.field.split('.')[1];
      if (message.user.settings[statusType]) {
        // –í—ã–¥–∞–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
        compensation += statusData[statusType].price;
        results.push({
          name: `–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ ${statusData[statusType].name}`,
          amount: statusData[statusType].price,
          rarity: selectedRarity.name,
          emoji: selectedRarity.emoji
        });
        continue;
      }
    }

    // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑
    const fieldPath = prize.field.split('.');
    let target = message.user;
    
    for (let i = 0; i < fieldPath.length - 1; i++) {
      target = target[fieldPath[i]] = target[fieldPath[i]] || {};
    }
    
    target[fieldPath[fieldPath.length - 1]] = 
      (target[fieldPath[fieldPath.length - 1]] || 0) + prize.amount;
    
    results.push({
      name: prize.name,
      amount: prize.amount,
      rarity: selectedRarity.name,
      emoji: selectedRarity.emoji
    });
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
  if (compensation > 0) {
    message.user.oval += compensation;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  let responseText = `üéÅ –û—Ç–∫—Ä—ã—Ç–æ ${amount} –±–æ–∫—Å–æ–≤ –∑–∞ ${totalPrice} SC\n`;

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const rarityGroups = {};
  results.forEach(item => {
    if (!rarityGroups[item.rarity]) {
      rarityGroups[item.rarity] = {
        emoji: item.emoji,
        items: {}
      };
    }
    
    const key = item.name;
    if (!rarityGroups[item.rarity].items[key]) {
      rarityGroups[item.rarity].items[key] = {
        count: 0,
        total: 0
      };
    }
    
    rarityGroups[item.rarity].items[key].count++;
    rarityGroups[item.rarity].items[key].total += item.amount;
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —Ç–µ —Ä–µ–¥–∫–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏
  for (const [rarity, data] of Object.entries(rarityGroups)) {
    responseText += `\n${data.emoji} ${rarity}:\n`;
    
    for (const [item, info] of Object.entries(data.items)) {
      responseText += `‚Ä¢ ${item} √ó${info.count} (Œ£ ${info.total})\n`;
    }
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–¥–∫–æ—Å—Ç–µ–π
  const rarityStats = {};
  results.forEach(item => {
    rarityStats[item.rarity] = (rarityStats[item.rarity] || 0) + 1;
  });

  responseText += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
  for (const [rarity, count] of Object.entries(rarityStats)) {
    const emoji = raritySystem.find(r => r.name === rarity)?.emoji || '';
    responseText += `${emoji} ${rarity}: ${count} (${((count / amount) * 100).toFixed(1)}%)\n`;
  }

  // –ë–∞–ª–∞–Ω—Å –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è
  if (compensation > 0) {
    responseText += `\nüí∞ –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è: +${compensation} SC`;
  }
  responseText += `\nüíµ –ë–∞–ª–∞–Ω—Å: ${message.user.oval} SC`;

  return bot(responseText);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ñ–µ—Ä–º  
cmd.hear(/^(?:–æ—Ñ|–û–§)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {  
    // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const item = parseInt(message.args[1] || 1);
    const amountInput = message.args[2];
    const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

    if (isNaN(item) || item !== 1) {
      return bot("‚ùå –î–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç 1");
    }

    if (isNaN(amount) || amount < 1) {
      return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
    }

    const price = 20;  
    const totalPrice = price * amount;  

    if (message.user.oval < totalPrice) return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");  

    message.user.oval -= totalPrice;  
    message.user.misc = message.user.misc || {};
    message.user.misc.farm_count = (message.user.misc.farm_count || 0) + amount;  

    return bot(`üöú –í—ã –∫—É–ø–∏–ª–∏ ${amount} —Ñ–µ—Ä–º –∑–∞ ${totalPrice} sealcoins`);  
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Ä—É–±–ª–µ–π
cmd.hear(/^(?:–æ—Ä—É|–û–†–£)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  const prices = {
    1: {
      price: 10,        // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ sealcoins
      rubles: 1,        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –∑–∞ 1 –ø–æ–∫—É–ø–∫—É
      name: "–¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π"
    },
    2: {
      price: 15,        // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ sealcoins
      rubles: 10,       // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –∑–∞ 1 –ø–æ–∫—É–ø–∫—É
      name: `${val2}`    // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    }
  };

  if (!prices[item]) {
    return bot("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" +
      "1. 1 –¥–æ–Ω–∞—Ç —Ä—É–±–ª—å - 10 sealcoins\n" +
      `2. 10 ${val2} - 15 sealcoins`);
  }

  if (isNaN(amount) || amount < 1) {
    return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
  }

  const option = prices[item];
  const totalPrice = option.price * amount;
  const totalRubles = option.rubles * amount;

  if (message.user.oval < totalPrice) {
    return bot(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins. –ù—É–∂–Ω–æ: ${totalPrice}, —É –≤–∞—Å: ${message.user.oval}`);
  }

  // –°–ø–∏—Å–∞–Ω–∏–µ sealcoins –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä—É–±–ª–µ–π
  message.user.oval -= totalPrice;
  
  if (item == 1) {
    message.user.rubli = (message.user.rubli || 0) + totalRubles;
  } else {
    message.user.rub = (message.user.rub || 0) + totalRubles;
  }

  return bot(`‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ${totalRubles} ${option.name} –∑–∞ ${totalPrice} sealcoins\n` +
             `üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${item == 1 ? message.user.rubli : message.user.rub} ${option.name}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤
cmd.hear(/^(?:–æ–±|–û–ë)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  const prices = {
    1: 5,  // 1 –±–∏–ª–µ—Ç
    2: 23, // 5 –±–∏–ª–µ—Ç–æ–≤
    3: 45  // 10 –±–∏–ª–µ—Ç–æ–≤
  };

  const ticketAmounts = {
    1: 1,
    2: 5,
    3: 10
  };

  if (!prices[item]) return bot("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

  if (isNaN(amount) || amount < 1) {
    return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
  }

  const totalPrice = prices[item] * amount;
  if (message.user.oval < totalPrice) return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");

  // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –±–∏–ª–µ—Ç—ã
  message.user.oval -= totalPrice;
  message.user.bilet = (message.user.bilet || 0) + ticketAmounts[item] * amount;

  return bot(`üé´ –í—ã –∫—É–ø–∏–ª–∏ ${ticketAmounts[item] * amount} –±–∏–ª–µ—Ç–æ–≤ –∑–∞ ${totalPrice} sealcoins`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ Star Drop
cmd.hear(/^(?:–æ—Å|–û–°)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  const prices = {
    1: 15, // –†–µ–¥–∫–∏–π
    2: 20, // –°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π
    3: 35, // –≠–ø–∏—á–µ—Å–∫–∏–π
    4: 50, // –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π
    5: 90  // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π
  };

  const rarityNames = {
    1: "–†–µ–¥–∫–∏–π",
    2: "–°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π",
    3: "–≠–ø–∏—á–µ—Å–∫–∏–π",
    4: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π",
    5: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
  };

  if (!prices[item]) return bot("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

  if (isNaN(amount) || amount < 1) {
    return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
  }

  const totalPrice = prices[item] * amount;
  if (message.user.oval < totalPrice) return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");

  // –ü—Ä–æ—Å—Ç–æ —Å–ø–∏—Å—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É –∏ –≤—ã–¥–∞–µ–º Star Drop –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —è—á–µ–µ–∫
  message.user.oval -= totalPrice;
  
  // –ù–∞—á–∏—Å–ª—è–µ–º Star Drop (–ø—Ä–∏–º–µ—Ä –¥–ª—è 1 —Ç–∏–ø–∞, –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ –ø–æ–¥ –≤–∞—à—É –ª–æ–≥–∏–∫—É)
  message.user[`c${item + 11}`] = (message.user[`c${item + 11}`] || 0) + amount;

  return bot(`‚≠ê –í—ã –∫—É–ø–∏–ª–∏ ${amount} ${rarityNames[item]} Star Drop –∑–∞ ${totalPrice} sealcoins`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤
cmd.hear(/^(?:–æ–∫|–û–ö)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ–π—Å–æ–≤
  const caseData = {
    1: { id: 1, name: "–û–±—ã—á–Ω—ã–π", price: 5, rarity: "–û–±—ã—á–Ω—ã–π", emoji: "üì¶", weight: 6000 },
    2: { id: 2, name: "–ó–æ–ª–æ—Ç–æ–π", price: 5, rarity: "–†–µ–¥–∫–∏–π", emoji: "üèÜ", weight: 1500 },
    3: { id: 3, name: "–î–æ–Ω–∞—Ç–Ω—ã–π", price: 10, rarity: "–†–µ–¥–∫–∏–π+", emoji: "üí≥", weight: 1000 },
    4: { id: 4, name: "Star Drop", price: 10, rarity: "–ù–µ–æ–±—ã—á–Ω—ã–π", emoji: "‚≠ê", weight: 500 },
    5: { id: 5, name: "Halloween", price: 20, rarity: "–ù–µ–æ–±—ã—á–Ω—ã–π+", emoji: "üéÉ", weight: 400 },
    6: { id: 6, name: "–°–µ–∫—Ä–µ—Ç–Ω—ã–π", price: 15, rarity: "–≠–ø–∏—á–µ—Å–∫–∏–π", emoji: "üóùÔ∏è", weight: 300 },
    7: { id: 7, name: "–ê–≤—Ç–æ–∑–≤—É–∫", price: 5, rarity: "–≠–ø–∏—á–µ—Å–∫–∏–π+", emoji: "üöó", weight: 150 },
    8: { id: 8, name: "–ù–æ–≤–æ–≥–æ–¥–Ω–∏–π", price: 25, rarity: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", emoji: "üéÑ", weight: 100 },
    9: { id: 9, name: "–ü—Ä–µ–º–∏—É–º", price: 30, rarity: "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π", emoji: "üî•", weight: 40 },
    10: { id: 10, name: "–£–ª—å—Ç—Ä–∞", price: 40, rarity: "–£–ª—å—Ç—Ä–∞–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", emoji: "üíé", weight: 10 },
    11: { id: 11, name: "–†–∞–Ω–¥–æ–º–Ω—ã–π", price: 20, rarity: "–†–∞–Ω–¥–æ–º", emoji: "üé∞" }
  };

  if (!caseData[item]) return bot("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–µ–π—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  if (isNaN(amount) || amount < 1) return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");

  const totalPrice = caseData[item].price * amount;
  if (message.user.oval < totalPrice) return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");

  message.user.oval -= totalPrice;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–µ–π—Å–æ–≤
  if (item === 11) {
    let results = {};
    
    // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
    const getRandomCase = () => {
      const totalWeight = Object.values(caseData)
        .filter(c => c.id <= 10)
        .reduce((sum, data) => sum + data.weight, 0);
      
      let random = Math.random() * totalWeight;
      for (let i = 1; i <= 10; i++) {
        if (random < caseData[i].weight) return i;
        random -= caseData[i].weight;
      }
      return 1;
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–æ–≤
    for (let i = 0; i < amount; i++) {
      const randomCase = getRandomCase();
      message.user[`c${randomCase}`] = (message.user[`c${randomCase}`] || 0) + 1;
      results[randomCase] = (results[randomCase] || 0) + 1;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const sortedResults = Object.entries(results)
      .map(([caseId, count]) => ({
        ...caseData[caseId],
        count
      }))
      .sort((a, b) => b.count - a.count || b.id - a.id);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
    let responseText = `üé∞ –í—ã –∫—É–ø–∏–ª–∏ ${amount} —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –∫–µ–π—Å–æ–≤:\n\n`;
    for (const item of sortedResults) {
      responseText += `${item.emoji} [${item.rarity}] ${item.name} ‚Äî ${item.count} —à—Ç.\n`;
    }

    responseText += `\nüí∏ –ò—Ç–æ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: ${totalPrice} sealcoins`;
    return bot(responseText);
  }

  // –û–±—ã—á–Ω—ã–µ –∫–µ–π—Å—ã (1-10)
  message.user[`c${item}`] = (message.user[`c${item}`] || 0) + amount;
  return bot(
    `${caseData[item].emoji} –í—ã –∫—É–ø–∏–ª–∏ ${amount} [${caseData[item].rarity}] ` +
    `${caseData[item].name} –∫–µ–π—Å–æ–≤ –∑–∞ ${totalPrice} sealcoins`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã
cmd.hear(/^(?:–æ–≤|–û–í)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã
  const currencyOptions = {
    1: {
      price: 1,           // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ sealcoins
      amount: 1000000,    // 1.000.000 –≤–∞–ª—é—Ç—ã
      name: val1 || "$"   // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç val1 –∏–ª–∏ "$" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    },
    2: {
      price: 700,         // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ sealcoins
      amount: 1000000000, // 1.000.000.000 –≤–∞–ª—é—Ç—ã
      name: val1 || "$"   // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
    }
  };

  if (!currencyOptions[item]) return bot("‚ùå –¢–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
  if (isNaN(amount) || amount < 1) return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");

  const option = currencyOptions[item];
  const totalPrice = option.price * amount;
  const totalCurrency = option.amount * amount;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  if (message.user.oval < totalPrice) {
    return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");
  }

  // –°–ø–∏—Å–∞–Ω–∏–µ sealcoins –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
  message.user.oval -= totalPrice;
  message.user.balance = (message.user.balance || 0) + totalCurrency;

  return bot(
    `üí∞ –í—ã –∫—É–ø–∏–ª–∏ ${totalCurrency.toLocaleString()} ${option.name} ` +
    `–∑–∞ ${totalPrice} sealcoins\n` +
    `üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${message.user.balance.toLocaleString()} ${option.name}`
  );
});

cmd.hear(/^(?:–æ–≥|–û–ì)(?:\s+(\d+))?(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);
  const amountInput = message.args[2];
  const amount = amountInput ? Math.min(parseInt(amountInput), 1000000) : 1;

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã GB
  const currencyOptions = {
    1: {
      price: 5,          // 5 sealcoin
      amount: 1000,      // 1.000 GB
      name: "GB"
    },
    2: {
      price: 8,          // 8 sealcoin
      amount: 10000,     // 10.000 GB
      name: "GB"
    },
    3: {
      price: 30,         // 30 sealcoin
      amount: 50000,     // 50.000 GB
      name: "GB"
    },
    4: {
      price: 60,         // 60 sealcoin
      amount: 100000,    // 100.000 GB
      name: "GB"
    },
    5: {
      price: 500,        // 500 sealcoin
      amount: 1000000,   // 1.000.000 GB
      name: "GB"
    }
  };

  if (!currencyOptions[item]) {
    return bot("‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" +
      "1. 1.000 GB - 5 sealcoin\n" +
      "2. 10.000 GB - 8 sealcoin\n" +
      "3. 50.000 GB - 30 sealcoin\n" +
      "4. 100.000 GB - 60 sealcoin\n" +
      "5. 1.000.000 GB - 500 sealcoin");
  }

  if (isNaN(amount) || amount < 1) {
    return bot("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 1.000.000");
  }

  const option = currencyOptions[item];
  const totalPrice = option.price * amount;
  const totalCurrency = option.amount * amount;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  if (message.user.oval < totalPrice) {
    return bot(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins. –ù—É–∂–Ω–æ: ${totalPrice}, —É –≤–∞—Å: ${message.user.oval}`);
  }

  // –°–ø–∏—Å–∞–Ω–∏–µ sealcoins –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ GB
  message.user.oval -= totalPrice;
  message.user.balance2 = (message.user.balance2 || 0) + totalCurrency;

  return bot(
    `üí∞ –í—ã –∫—É–ø–∏–ª–∏ ${totalCurrency.toLocaleString()} ${option.name} ` +
    `–∑–∞ ${totalPrice} sealcoins\n` +
    `üìä –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${message.user.balance2.toLocaleString()} ${option.name}`
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
cmd.hear(/^(?:–æ—Å—Ç–∞—Ç—É—Å|–û–°–¢–ê–¢–£–°)(?:\s+(\d+))?$/i, async (message, bot) => {
  const item = parseInt(message.args[1] || 1);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
  const statusData = {
    1: {
      name: "VIP",
      price: 100,
      field: "vip"
    },
    2: {
      name: "PREMIUM",
      price: 200,
      field: "premium"
    },
    3: {
      name: "TITAN",
      price: 300,
      field: "titan"
    },
    4: {
      name: "JOKER",
      price: 400,
      field: "joker"
    },
    5: {
      name: "IMPERATOR",
      price: 500,
      field: "imperator"
    },
    6: {
      name: "TOPDON",
      price: 600,
      field: "topdon"
    },
    7: {
      name: "ADMIN",
      price: 1000,
      field: "adm"
    }
  };

  if (!statusData[item]) return bot("‚ùå –¢–∞–∫–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");

  const status = statusData[item];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
  if (message.user.oval < status.price) {
    return bot("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ sealcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏");
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è settings –µ—Å–ª–∏ –Ω–µ—Ç
  if (!message.user.settings) {
    message.user.settings = {};
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–∂–µ –∏–º–µ—é—â–∏–π—Å—è —Å—Ç–∞—Ç—É—Å
  if (message.user.settings[status.field]) {
    return bot(`‚Ñπ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å—Ç–∞—Ç—É—Å "${status.name}"`);
  }

  // –°–ø–∏—Å–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –∏ –≤—ã–¥–∞—á–∞ —Å—Ç–∞—Ç—É—Å–∞
  message.user.oval -= status.price;
  message.user.settings[status.field] = true;

  return bot(`üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å "${status.name}" –∑–∞ ${status.price} sealcoins`);
});











let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
    
  }, 1000);

module.exports = commands;
