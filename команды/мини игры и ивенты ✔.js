let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};



const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


const encryptionMap = {
  '–∞': '–±', '–±': '–≤', '–≤': '–≥', '–≥': '–¥',
  '–¥': '–µ', '–µ': '–∂', '–∂': '–∑', '–∑': '–∏',
  '–∏': '–π', '–π': '–∫', '–∫': '–ª', '–ª': '–º',
  '–º': '–Ω', '–Ω': '–æ', '–æ': '–ø', '–ø': '—Ä',
  '—Ä': '—Å', '—Å': '—Ç', '—Ç': '—É', '—É': '—Ñ',
  '—Ñ': '—Ö', '—Ö': '—Ü', '—Ü': '—á', '—á': '—à',
  '—à': '—â', '—â': '—ä', '—ä': '—ã', '—ã': '—å',
  '—å': '—ç', '—ç': '—é', '—é': '—è', '—è': '–∞'
};

// –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
const decryptionMap = Object.fromEntries(Object.entries(encryptionMap).map(([key, value]) => [value, key]));

// –í—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞
const alphabet = Object.keys(encryptionMap);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –æ—Ç 3 –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤
function getRandomWord() {
  const length = Math.floor(Math.random() * 6) + 5; // –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç 3 –¥–æ 10
  let word = '';

  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * alphabet.length);
    word += alphabet[randomIndex]; // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –±—É–∫–≤
  }

  return word;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
function encryptWord(word) {
  return word.split('').map(char => {
    return encryptionMap[char] || char; // –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—É—é –±—É–∫–≤—É
  }).join('');
}
/*
// –ò–≥—Ä–∞ "–û—Ç–≥–∞–¥–∞–π —Å–ª–æ–≤–æ"
cmd.hear(/^(?:–∑–∞–≥–∞–¥–∫–∞)$/i, async (message, bot) => {
  const originalWord = getRandomWord(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
  const encryptedWord = encryptWord(originalWord); // –®–∏—Ñ—Ä—É–µ–º —Å–ª–æ–≤–æ

  message.user.secretWord = originalWord; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

  const explanation = `
–®–∏—Ñ—Ä: –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ:
–∞ -> —è,
–± -> –∞,
–≤ -> –±,
–≥ -> –≤,
–¥ -> –≥,
–µ -> –¥,
–∂ -> –µ,
–∑ -> –∂,
–∏ -> –∑,
–π -> –∏,
–∫ -> –π,
–ª -> –∫,
–º -> –ª,
–Ω -> –º,
–æ -> –Ω,
–ø -> –æ,
—Ä -> –ø,
—Å -> —Ä,
—Ç -> —Å,
—É -> —Ç,
—Ñ -> —É,
—Ö -> —Ñ,
—Ü -> —Ö,
—á -> —Ü,
—à -> —á,
—â -> —à,
—ä -> —â,
—ã -> —ä,
—å -> —ã,
—ç -> —å,
—é -> —ç,
—è -> —é
`;

  await bot(`${explanation}
    
    
    
    –æ—Ç–≥–∞–¥–∞–π - "${encryptedWord}"?
    –ù–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–ø–∏—à–∏ - —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∞—Ä–∫`);
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
const prizes = [
  '–æ–±—ã—á–Ω—ã–π –∫–µ–π—Å',
  '–∑–æ–ª–æ—Ç–æ–π –∫–µ–π—Å',
  '–¥–æ–Ω–∞—Ç –∫–µ–π—Å',
  'Starr Drops',
  'Halloween –∫–µ–π—Å',
  '—Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å',
  '–∞–≤—Ç–æ–∑–≤—É–∫ –∫–µ–π—Å',
  '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –∫–µ–π—Å',
  '–ø—Ä–µ–º–∏—É–º –∫–µ–π—Å',
  '—É–ª—å—Ç—Ä–∞ –∫–µ–π—Å'
];

const dailyPrizesLimit = 5;
const userPrizes = {};

cmd.hear(/^(?:—Ä–µ—à–µ–Ω–∏–µ)\s+(.+)$/i, async (message, bot) => {
  if (!message.user.secretWord) {
    await bot('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã "–∑–∞–≥–∞–¥–∫–∞" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞.');
    return;
  }

  const playerAnswer = message.args[1].trim();

  if (playerAnswer === message.user.secretWord) {
    await bot('–í–µ—Ä–Ω–æ! –í—ã —É–≥–∞–¥–∞–ª–∏ —Å–ª–æ–≤–æ!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–∑–æ–≤ –∏–≥—Ä–æ–∫ —É–∂–µ –ø–æ–ª—É—á–∏–ª —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toDateString();
    if (!userPrizes[message.user.id]) {
      userPrizes[message.user.id] = { count: 0, lastClaim: today };
    }

    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–∏–∑—ã —Å–µ–≥–æ–¥–Ω—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    if (userPrizes[message.user.id].lastClaim === today && userPrizes[message.user.id].count >= dailyPrizesLimit) {
      await bot('–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.');
    } else {
      // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–∑–∞
      const rewardIndex = Math.floor(Math.random() * 10); // —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 9
      const randomPrize = prizes[rewardIndex];

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø—Ä–∏–∑–æ–≤
      userPrizes[message.user.id].count++;
      userPrizes[message.user.id].lastClaim = today;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤ C1 –¥–æ C10
      const rewardKey = `c${rewardIndex + 1}`; // +1, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç 1 –¥–æ 10

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      message.user[rewardKey] = (message.user[rewardKey] || 0) + 1;

      await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–∑: "${randomPrize}".`);
    }
  } else {
    await bot(`–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${message.user.secretWord}`);
  }

  delete message.user.secretWord; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
});
*/
const prizes2 = {
  1: { amount: 100000000000000000, field: 'balance', name: '–Ω–∞ –±–∞–ª–∞–Ω—Å' },
  2: { amount: 5, field: 'c8', name: '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –∫–µ–π—Å–æ–≤' },
  3: { amount: 15, field: 'rubli', name: '–¥–æ–Ω–∞—Ç —Ä—É–±–ª–µ–π' },
  4: { amount: 50000, field: 'balance2', name: 'GB' },
  5: { amount: 30, field: 'bilet', name: '–±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ñ–æ—Ä—Ç—É–Ω—ã' },
  6: { amount: 700, field: 'rub', name: '–ß–∞–∫–æ–†—É–±–ª–µ–π' },
  7: { amount: 2000, field: 'c2', name: '—Å—É–º–º–∞ –Ω–∞ –ø–æ–ª–µ c2' },
  8: { amount: 2000, field: 'c2', name: '—Å—É–º–º–∞ –Ω–∞ –ø–æ–ª–µ c2' },
  9: { amount: 2000, field: 'c2', name: '—Å—É–º–º–∞ –Ω–∞ –ø–æ–ª–µ c2' },
  10: { amount: 2000, field: 'c2', name: '—Å—É–º–º–∞ –Ω–∞ –ø–æ–ª–µ c2' },
};


const path = require('path');

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç
const datesFilePath = path.join(__dirname, '../database/–¥–∞—Ç—ã.json');

const manualStartDate = new Date(2025, 0, 6, 19, 40);
const manualEndDate = new Date(2025, 0, 6, 19, 42);

let randomStartDate;
let randomEndDate;


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞—Ç –∏–∑ —Ñ–∞–π–ª–∞
function loadRandomDates() {
  if (fs.existsSync(datesFilePath)) {
    const data = JSON.parse(fs.readFileSync(datesFilePath));
    randomStartDate = new Date(data.start);
    randomEndDate = new Date(data.end);
  } else {
    generateRandomDates();
  }
}

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞—Ç
function generateRandomDates() {
  const randomDays = Math.floor(Math.random() * 10) + 1; // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç 1 –¥–æ 10 –¥–Ω–µ–π
  randomStartDate = new Date(manualStartDate);
  randomStartDate.setDate(randomStartDate.getDate() + randomDays);

  randomEndDate = new Date(randomStartDate);
  randomEndDate.setDate(randomEndDate.getDate() + randomDays); // –°–¥–≤–∏–≥ –Ω–∞ —Ç–æ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
  randomEndDate.setHours(23, 2); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è 23:02 –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç–µ

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
  const data = {
    start: randomStartDate,
    end: randomEndDate,
  };

  // –ü–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const dir = path.dirname(datesFilePath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });

  }

  fs.writeFileSync(datesFilePath, JSON.stringify(data));
  console.log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞—Ç:", {
    randomStart: randomStartDate,
    randomEnd: randomEndDate,
  });
}


// –§—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –¥–∞—Ç–Ω—ã–µ –ø–∞—Ä—ã
function getDates() {
  return {
    manual: {
      start: manualStartDate,
      end: manualEndDate,
    },
    random: {
      start: randomStartDate,
      end: randomEndDate,
    }
  };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–∞—Ç
loadRandomDates();


let allowGenerateRandomDates = true;

// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã
let { manual, random } = getDates();
cmd.hear(/^(?:–ø–æ–ª—É—á–∏—Ç—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    const currentDate = new Date();

    if (currentDate < manualStartDate) {
      return bot(`–ò–≤–µ–Ω—Ç –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è! –û–Ω –Ω–∞—á–Ω–µ—Ç—Å—è ${formatDate(manualStartDate)} üéâ`);
    }

    if (currentDate > manualEndDate) {
      if (allowGenerateRandomDates) {
        generateRandomDates();
        allowGenerateRandomDates = false; // –∑–∞–ø—Ä–µ—â–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      }
      double.forEach(user => {
        user.days = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      });
      return bot(`–ò–≤–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è! –°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç –Ω–∞—á–Ω–µ—Ç—Å—è ${formatDate(randomStartDate)} üéâ`);
    }
    // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const timeDiff = currentDate - manual.start; // –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const daysReceived = Math.floor(timeDiff / (1000 * 60 * 60 * 24)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –¥–Ω–∏

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if (message.user.days === undefined) {
      message.user.days = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ
    }

    // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑
    const currentDay = daysReceived + 1;

    if (prizes2[currentDay] && currentDay > message.user.days) {
      const { amount, field, name } = prizes2[currentDay];

      message.user[field] = (message.user[field] || 0) + amount; // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${utils.sp(amount)} ${name} –Ω–∞ –¥–µ–Ω—å ${currentDay} üéâ`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–Ω—è—Ö
      message.user.days = currentDay;
    } else {
      bot(`–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –ø—Ä–∏–∑—ã –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç–∞–ª –æ—á–µ—Ä–µ–¥–Ω–æ–π –¥–µ–Ω—å! üéì`);
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
function formatDate(date) {
  const months = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
  ];
  const day = date.getDate();
  const month = months[date.getMonth()]; // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
  const year = date.getFullYear();
  const hours = String(date.getHours()).padStart(2, '0'); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∞—Å—ã
  const minutes = String(date.getMinutes()).padStart(2, '0'); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã

  return `${day} ${month} ${year} –≤ ${hours}:${minutes}`;
}

cmd.hear(/^(?:–≤—Ä–µ–º—è)$/i, async (message, bot) => {
  const currentDateTime = new Date(); // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è

  const formattedDate = currentDateTime.toLocaleDateString('ru-RU', {
    day: 'numeric',
    month: 'long',
    year: 'numeric'
  });

  const formattedTime = currentDateTime.toLocaleTimeString('ru-RU', {
    hour: 'numeric',
    minute: 'numeric',
    second: 'numeric'
  });

  // –ü–æ–ª—É—á–∞–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –∏—Ö –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
  const milliseconds = currentDateTime.getMilliseconds();
  const roundedMilliseconds = Math.round(milliseconds / 10); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –¥–µ—Å—è—Ç—ã—Ö

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  const timeMessage = `–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${formattedDate} ${formattedTime}.${roundedMilliseconds}–º—Å`;

  return bot(timeMessage); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
});







module.exports = commands;
