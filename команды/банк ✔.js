let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        // console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

let tokensCache = null;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


cmd.hear(/^(?:–±–∞–Ω–∫|üè¶ –ë–∞–Ω–∫|üí≥ –ë–∞–Ω–∫)$/i, async (message, bot) => {

  if (message.user.astats.tema === 2) {
    if (!message.isChat || message.chat.type == 1) {
        let amount = message.user.bank || 0;
        let formattedAmount = utils.sp(amount);
        
        let response;
        if (amount === 0) {
            response = `üè¶ –¢–í–û–ô –ë–ê–ù–ö–û–í–°–ö–ò–ô –°–ß–Å–¢ –ü–£–°–¢, –ö–ê–ö –¢–í–û–Ø –ì–û–õ–û–í–ê! 0 ${val1} ‚Äî –¢–´ –°–ï–†–¨–Å–ó–ù–û –¢–ê–ö–û–ô –ù–ò–©–ò–ô? ü§°`;
        } else if (amount < 1000) {
            response = `üè¶ ${formattedAmount} ${val1} –ù–ê –°–ß–Å–¢–£ ‚Äî –≠–¢–û –ß–¢–û, –®–£–¢–ö–ê? –î–ê–ñ–ï –ë–ï–ó–î–û–ú–ù–´–ï –ë–û–ì–ê–ß–ï! üêÄ`;
        } else if (amount < 10000) {
            response = `üè¶ ${formattedAmount} ${val1} ‚Äî –ù–£ –•–û–¢–¨ –ß–¢–û-–¢–û –ï–°–¢–¨, –ù–û –í–°–Å –†–ê–í–ù–û –ñ–ò–í–Å–®–¨ –í –ö–û–†–¢–û–ß–ö–ê–•! üì¶`;
        } else if (amount < 100000) {
            response = `üè¶ ${formattedAmount} ${val1} ‚Äî –ù–ï–ü–õ–û–•–û, –ù–û –î–û –û–õ–ò–ì–ê–†–•–ê –¢–ï–ë–ï –ö–ê–ö –î–û –õ–£–ù–´! üåï`;
        } else {
            response = `üè¶ ${formattedAmount} ${val1} ‚Äî –û–ì–û, –î–ê –¢–´ –ù–ê–°–¢–û–Ø–©–ò–ô –ë–û–ì–ê–¢–´–ô –ü–ò–ó–î... –≠–ú... –ë–û–ì–ê–ß! üí∞`;
        }
        
        await bot(response);
        return;
    }
    if (message.chat.type === 2) {
        const chat = message.chat;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—É–Ω–¥–∞
        if (chat.gametime <= 5) {
            return bot(`üñï –ë–õ–Ø–¢–¨, –û–ü–Ø–¢–¨ –ü–†–û–°–†–ê–õ –ú–û–ú–ï–ù–¢, –î–ê–£–ù? ${chat.gametime} –°–ï–ö–£–ù–î –û–°–¢–ê–õ–û–°–¨ - –ò–î–ò –ù–ê–•–£–ô –° –¢–ê–ö–ò–ú–ò –¢–ò–ú–ò–ù–ì–ê–ú–ò!`);
        }
    
        const currentGame = message.chat.games[message.chat.games.length - 1];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–≤–æ–∫
        if (!currentGame.stavki[0]) {
            return bot(`üí© –ù–ò–ö–¢–û –ù–ï –°–¢–ê–í–ò–¢, –ö–ê–ö –ò –¢–´, –ü–ò–î–û–†–ê–° –ë–ï–ó–Ø–ò–¶–û–í–´–ô!\n\nüîê –•–µ—à –∏–≥—Ä—ã: ${currentGame.hash}\n\n`);
        }
    
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ –º–∞—Ç–µ—Ä–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
        let stakes = {
            x2: { text: '\nüü¢ –°–¢–ê–í–ö–ò –ù–ê x2 (–ù–ò–©–ï–¢–ê –ü–†–û–¢–û–ö–û–õ–ò–†–£–ï–¢–°–Ø):\n', hasBets: false },
            x3: { text: '\nüü° –°–¢–ê–í–ö–ò –ù–ê x3 (–í–°–Å –†–ê–í–ù–û –ü–†–û–°–†–ï–®–¨):\n', hasBets: false },
            x5: { text: '\nüî¥ –°–¢–ê–í–ö–ò –ù–ê x5 (–ù–ê–î–ï–Æ–°–¨, –≠–¢–û –ù–ï –¢–í–û–ò –î–ï–ù–¨–ì–ò?):\n', hasBets: false },
            x50: { text: '\nüí£ –°–¢–ê–í–ö–ò –ù–ê x50 (–û–•–£–ï–¢–¨, –î–ê –¢–´ –ü–û–õ–ù–´–ô –î–ï–ì–ï–ù–ï–†–ê–¢!):\n', hasBets: false }
        };
    
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫ —Å –º–∞—Ç–µ—Ä–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
        for (let id in currentGame.stavki) {
            let user = currentGame.stavki[id];
            let userTag = `[id${user.id}|${double.find(x => x.id === user.id).tag}] - ${utils.sp(user.amount)} ${val4} `;
            userTag += user.amount < 1000 ? 'ü§è (–ù–ê –ß–¢–û –≠–¢–ò –ì–†–û–®–ò? –ù–ê –ü–†–ï–ó–ï–†–í–ê–¢–ò–í?)' : 'üí∞ (–ù–ê–ö–û–ù–ï–¶-–¢–û –ù–û–†–ú–ê–õ–¨–ù–´–ô –î–û–ù–ê–¢, –ù–û –í–°–Å –†–ê–í–ù–û –ü–†–û–°–†–Å–®–¨)';
    
            switch (user.type) {
                case 2:
                    stakes.x2.text += userTag + '\n';
                    stakes.x2.hasBets = true;
                    break;
                case 3:
                    stakes.x3.text += userTag + '\n';
                    stakes.x3.hasBets = true;
                    break;
                case 5:
                    stakes.x5.text += userTag + '\n';
                    stakes.x5.hasBets = true;
                    break;
                case 50:
                    stakes.x50.text += userTag + '\n';
                    stakes.x50.hasBets = true;
                    break;
            }
        }
    
        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞–≤–∫–∞–º–∏
        let text = '';
        if (stakes.x2.hasBets) text += stakes.x2.text;
        if (stakes.x3.hasBets) text += stakes.x3.text;
        if (stakes.x5.hasBets) text += stakes.x5.text;
        if (stakes.x50.hasBets) text += stakes.x50.text;
    
        const totalStaked = currentGame.stavki.reduce((sum, stake) => sum + stake.amount, 0);
        const totalComment = totalStaked < 10000 
            ? 'ü§Æ (–≠–¢–û –í–°–Å? –°–¢–´–î–ù–û –î–ê–ñ–ï –°–ú–û–¢–†–ï–¢–¨, –£–Å–ë–ò–©–ï!)' 
            : 'ü§ë (–ù–ê –≠–¢–ò –î–ï–ù–¨–ì–ò –ú–û–ñ–ù–û –ë–´–õ–û –ö–£–ü–ò–¢–¨ –°–ï–ë–ï –ú–û–ó–ì–ò, –ù–û –¢–´ –ñ–ï –ü–ò–î–û–†!)';
    
        bot(`üí∏ –í–°–ï–ì–û –ü–†–û–°–†–ê–ù–û: ${utils.sp(totalStaked)} ${val4} ${totalComment}\n${text}\nüîê –•–µ—à –∏–≥—Ä—ã: ${currentGame.hash}\n\n‚è≥ –î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: ${message.chat.gametime} —Å–µ–∫. (–ì–û–¢–û–í–¨–°–Ø –ö –†–ê–ó–û–ß–ê–†–û–í–ê–ù–ò–Æ, –õ–û–•)`);
        return;
    }
}
  if (message.user.astats.tema === 1) {
    if (!message.isChat || message.chat.type == 1 ) {
        await bot(`üè¶ –ù–∞ –≤–∞—à–µ–º –±–∞–Ω–∫–æ–≤—Å–∫–æ–º —Å—á–µ—Ç—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è ${utils.sp(message.user.bank)} ${val1} üåßÔ∏è`)
        return
    }
if (message.chat.type === 2) {
    const chat = message.chat;
    const currency = message.user.reshim == 1 ? val4 : val1;
    
    if (chat.gametime <= 5) {
        return bot(`–¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ –ø—è—Ç–∏ —Å–µ–∫—É–Ω–¥, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è`);
    }

    const currentGame = message.chat.games[message.chat.games.length - 1];
    if (!currentGame.stavki[0]) {
        return bot(`–≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª\n\n–•–µ—à –∏–≥—Ä—ã: ${currentGame.hash}\n\n`);
    }

    let stakes = {
        x2: '\n–°—Ç–∞–≤–∫–∏ –Ω–∞ x2:\n',
        x3: '\n–°—Ç–∞–≤–∫–∏ –Ω–∞ x3:\n',
        x5: '\n–°—Ç–∞–≤–∫–∏ –Ω–∞ x5:\n',
        x50: '\n–°—Ç–∞–≤–∫–∏ –Ω–∞ x50:\n'
    };

    for (let id in currentGame.stavki) {
        let user = currentGame.stavki[id];
        let dbUser = double.find(x => x.id === user.id);
        let userTag = `[id${user.id}|${dbUser.tag}] - ${utils.sp(user.amount)} ${currency}\n`;

        switch (user.type) {
            case 2:
                stakes.x2 += userTag;
                break;
            case 3:
                stakes.x3 += userTag;
                break;
            case 5:
                stakes.x5 += userTag;
                break;
            case 50:
                stakes.x50 += userTag;
                break;
        }
    }

    let text = '';
    if (stakes.x2.length > 15) text += stakes.x2;
    if (stakes.x3.length > 15) text += stakes.x3;
    if (stakes.x5.length > 15) text += stakes.x5;
    if (stakes.x50.length > 16) text += stakes.x50;

    const totalStaked = utils.sp(currentGame.stavki.reduce((sum, stake) => sum + stake.amount, 0));

    bot(`–≤—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${totalStaked} ${currency} üí∏
${text}
–•–µ—à –∏–≥—Ä—ã: 
${currentGame.hash}

–î–æ –∫–æ–Ω—Ü–∞ —Ä–∞—É–Ω–¥–∞: ${message.chat.gametime} —Å–µ–∫.
    `);
    return;
}
}





});


cmd.hear(/^(?:–±–∞–Ω–∫)\s(?:—Å–Ω—è—Ç—å)\s(.*)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type == 1) {
        message.args[1] = message.args[1].replace(/([.,])/gi, "");

        message.args[1] = message.args[1].replace(/([–∫k])/gi, "000");

        message.args[1] = message.args[1].replace(/([–ºm])/gi, "000000");

        message.args[1] = message.args[1].replace(
            /(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi,
            message.user.bank
        );

        if (message.user.inf === true) return bot(`–≤—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

        if (!Number(message.args[1])) return;

        message.args[1] = Math.floor(Number(message.args[1]));

        if (message.args[1] <= 0) return;

        if (message.args[1] > message.user.bank) return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã`);
        else if (message.args[1] <= message.user.bank) {
            message.user.balance += message.args[1];

            message.user.bank -= message.args[1];

            return bot(
                `–≤—ã —É—Å–ø–µ—à–Ω–æ —Å–Ω—è–ª–∏ ${utils.sp(
                    message.args[1]
                )} ${val1} —Å–æ —Å–≤–æ–µ–≥–æ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞ üí≥

‚ñ∂Ô∏è –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å—á—ë—Ç–µ: ${utils.sp(message.user.bank)} ${val1}
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}`,
                { attachment: `photo-228669263_457239017` }
            );
        }
    }
});

cmd.hear(/^(?:–±–∞–Ω–∫)\s(.*)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type == 1) {
        message.args[1] = message.args[1].replace(/([.,])/gi, "");
        message.args[1] = message.args[1].replace(/([–∫k])/gi, "000");
        message.args[1] = message.args[1].replace(/([–ºm])/gi, "000000");
        message.args[1] = message.args[1].replace(
            /(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi,
            message.user.balance
        );
        if (message.user.inf === true) return bot(`–≤—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

        if (!Number(message.args[1])) return;

        message.args[1] = Math.floor(Number(message.args[1]));

        if (message.args[1] <= 0) return;
        if (message.args[1] <= 14) return bot(`–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ 50 ${val1}`);
        if (message.user.banklim === undefined) {
            message.user.banklim = false;
        }

        if (!message.user.settings.imperator) {
            if (
                message.args[1] + message.user.bank - 1 >= message.user.limit.banklimit &&
                !message.user.banklim
            )
                return bot(
                    `–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ ${utils.sp(message.user.limit.banklimit)} ${val1}`
                );
            if (
                message.args[1] + message.user.bank - 1 >= 100000000000000000 &&
                message.user.banklim
            )
                return bot(`–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤–∫–ª–∞–¥–∞ 100.000.000.000.000.000 ${val1} ‚ùå`);
        }

        if (message.args[1] > message.user.balance)
            return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã`);
        else if (message.args[1] <= message.user.balance) {
            message.user.balance -= message.args[1];
            message.user.bank += message.args[1];
            return bot(
                `–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª–æ–∂–∏–ª–∏ –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç ${utils.sp(
                    message.args[1]
                )} ${val1} üíµüí∞`
            );
        }
    }
});

setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
  }, 1000);

module.exports = commands;
