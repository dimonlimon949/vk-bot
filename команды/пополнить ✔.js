let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}


const tokenData4 = getToken4(); 

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const spoler = tokenData4;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


cmd.hear(/^(?:–ø–æ–ø–æ–ª–Ω–∏—Ç—å|–ø–æ–ø|–ø)\s+(\d+)$/i, async (message, bot) => {
  const amount = parseFloat(message.args[1]);

  if (amount < 10) {
    await bot(`—Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 10 —Ä—É–±–ª–µ–π.`)
    return;
  }

  if (isNaN(amount) || amount <= 0) {
    return message.send('üëâ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.');
  }


  const requestId = Math.floor(100000 + Math.random() * 900000);


  await message.send(`‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É ${utils.sp(amount)}‚ÇΩ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${requestId}.`);

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üïµÔ∏è‚Äç‚ôÇÔ∏è
  let user = double.find(x => x.id === message.user.id);
  if (!user) {
    console.log('üö´ –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:', message.user.id);
    return message.send('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
  }

  const userName = user ? user.tag : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
  const userId = user ? user.id : '';

  const notificationMessage = `
    üéâ –£–≤–∞–∂–∞–µ–º—ã–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! üéâ
    
    ‚úÖ –ß–µ–∫ –Ω–æ–º–µ—Ä: ${requestId} 
    –û—Ç: [id${userId}|${userName}] 
    –°—É–º–º–∞: ${utils.sp(amount)} ‚ÇΩ üí∞
`;

  for (const key in spoler) {
    if (spoler.hasOwnProperty(key)) {
      const userId2 = spoler[key];

      if (user.notifications) {
        try {
          await vk.api.messages.send({
            user_id: userId2,
            message: notificationMessage,
            random_id: 0
          });
        } catch (error) {

        }
      }
    }
  }

});


module.exports = commands;
