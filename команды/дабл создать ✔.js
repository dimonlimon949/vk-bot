let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;

cmd.hear(/^(?:–î–∞–±–ª —Å–æ–∑–¥–∞—Ç—å)$/i, async (message, bot) => {

 if(message.chat.type == 2) return message.send(`–û—à–∏–±–∫–∞ —á–∞—Ç –∏—Ç–∞–∫ DOUBLE.`)

     if (message.user.settings.adm >= 6) {
        message.chat.type = 2
       return message.send('–û–±–Ω–æ–≤–ª—è—é...',
            {
                keyboard: JSON.stringify(
                    {
                        "one_time": false, "buttons": [
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–Ω–∫" }, "color": "positive" },
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–ª–∞–Ω—Å" }, "color": "positive" }
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "x2" }, "color": "primary" },
                                { "action": { "type": "text", "payload": "{}", "label": "x3" }, "color": "primary" },
                                { "action": { "type": "text", "payload": "{}", "label": "x5" }, "color": "primary" }
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "x50" }, "color": "positive" }
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "–†–µ–π—Ç–∏–Ω–≥" }, "color": "negative" },
                                { "action": { "type": "text", "payload": "{}", "label": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" }, "color": "default" },
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–æ–Ω—É—Å" }, "color": "default" }
                            ]
                        ]
                    })
            })
     }



    if (message.user.balance2 < 100000) return bot(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ 1–û–û.–û–û–û ${val4}.`)
    message.user.balance2 -= 100000
    message.chat.type = 2


  return  message.send('–û–±–Ω–æ–≤–ª—è—é...',
        {
            keyboard: JSON.stringify(
                {
                    "one_time": false, "buttons": [
                        [
                            { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–Ω–∫" }, "color": "positive" },
                            { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–ª–∞–Ω—Å" }, "color": "positive" }
                        ],
                        [
                            { "action": { "type": "text", "payload": "{}", "label": "x2" }, "color": "primary" },
                            { "action": { "type": "text", "payload": "{}", "label": "x3" }, "color": "primary" },
                            { "action": { "type": "text", "payload": "{}", "label": "x5" }, "color": "primary" }
                        ],
                        [
                            { "action": { "type": "text", "payload": "{}", "label": "x50" }, "color": "positive" }
                        ],
                        [
                            { "action": { "type": "text", "payload": "{}", "label": "–†–µ–π—Ç–∏–Ω–≥" }, "color": "negative" },
                            { "action": { "type": "text", "payload": "{}", "label": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" }, "color": "default" },
                            { "action": { "type": "text", "payload": "{}", "label": "–ë–æ–Ω—É—Å" }, "color": "default" }
                        ]
                    ]
                })
        })

    return bot(`‚ö° –ß–∞—Ç –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º –¥–∞–±–ª–∞! üöÄ`)

})

cmd.hear(/^(?:–î–∞–±–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç)$/i, async (message, bot) => {

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ
    const isAdmin = await checkAdmin(message.peerId, message.senderId);

    if (!isAdmin) {
        return message.send("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }

    message.chat.type = 1

    return bot(`‚ö° –ß–∞—Ç –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Ä–µ–∂–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç! üöÄ`)

})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ
async function checkAdmin(peerId, userId) {
  try {
    const chatMembers = await vk.api.messages.getConversationMembers({
      peer_id: peerId,
    });

    const member = chatMembers.items.find((item) => item.member_id === userId);

    if (!member) {
      return false; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ.
    }
    
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —á–∞—Ç–∞
    if(chatMembers.owner_id === userId){
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –≤—ã—à–µ
    return member.is_admin === true;

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", error);
    return false; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø—Ä–∞–≤ –Ω–µ—Ç.
  }
}


setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
  }, 1000);

module.exports = commands;
