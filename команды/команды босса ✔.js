let utils = require('../utils.js');
const commands = [];
const fs = require('fs');
let double = require('../database/users.json');

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData3 = getToken3();
let val1 = tokenData3.val1;
let val2 = tokenData3.val2;
let val3 = tokenData3.val3;
let val4 = tokenData3.val4;

let tokensCache = null;
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }
}, 1000);

let chats = require('../database/chats.json');
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
let bossinfo = require('../database/bossinfo.json');

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

// üî• –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Å—Å–∞

cmd.hear(/^(?:üòà –ë–æ—Å—Å|–±–æ—Å—Å)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (message.user.sataka >= 200 && message.user.questbosspower === false) {
            await bot(`–í–∞—à–∞ —Å–∏–ª–∞ –±–æ–ª—å—à–µ 200, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å –∑–∞ —Å–≤–æ—é —Å–∏–ª—É –≤ –≤–∏–¥–µ 2.–û–û–û.–û–û–û.OOO ${val1}`);
            message.user.balance += 2000000000;
            message.user.questbosspower = true;
        }

        return bot(
            `–±–æ—Å—Å ¬´${bossinfo.boss_name}¬ª ‚ùÑÔ∏è\n` +
            `üíö –ñ–∏–∑–Ω–∏ –±–æ—Å—Å–∞: ${utils.sp(bossinfo.boss)} –∏–∑ ${utils.sp(bossinfo.boss_max)}\n` +
            `üó°Ô∏è –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: ${utils.sp(message.user.bossyr)} –µ–¥.\n` +
            `üí™ –í–∞—à–∞ —Å–∏–ª–∞: ${utils.sp(message.user.sataka)}\n` +
            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
            `‚ôªÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É —É–¥–∞—Ä–∞: ¬´–±–æ—Å—Å —Å–∏–ª–∞ [–∫–æ–ª-–≤–æ]¬ª\n` +
            `‚ñ∂Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å: ${utils.sp(50000000 * message.user.sataka)}$ üíµ\n` +
            `üëä –£–¥–∞—Ä–∏—Ç—å –±–æ—Å—Å–∞: ¬´–±–æ—Å—Å –∞—Ç–∞–∫–∞ [–∫–æ–ª-–≤–æ]¬ª\n\n` +
            `üîù –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–Ω—É: ¬´–±–æ—Å—Å —Ç–æ–ø¬ª`,
            {
                attachment: `${bossinfo.photo}`,
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: [
                        [
                            { action: { type: "text", payload: "{}", label: "üëä –ë–æ—Å—Å —Å–∏–ª–∞" }, color: "default" },
                            { action: { type: "text", payload: "{}", label: "‚öî –ê—Ç–∞–∫–∞" }, color: "default" }
                        ],
                        [
                            { action: { type: "text", payload: "{}", label: "üòà –ë–æ—Å—Å —Ç–æ–ø" }, color: "default" }
                        ]
                    ]
                })
            }
        );
    }
});

cmd.hear(/^(?:–±–æ—Å—Å —Å–∏–ª–∞|üëä –ë–æ—Å—Å —Å–∏–ª–∞)(?:\s([0-9]+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        const upgradeAmount = message.args[1] ? Number(message.args[1]) : 1; // –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Ç–æ +1

        if (Number(message.user.sataka) + upgradeAmount > 1500) {
            return bot(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø—Ä–æ–∫–∞—á–∫–∏ —Å–∏–ª—ã (–º–∞–∫—Å–∏–º—É–º 1.500). –í–∞—à–∞ —Å–∏–ª–∞: ${message.user.sataka}`);
        }

        const cost = 50000000 * message.user.sataka * upgradeAmount;
        if (message.user.balance < cost) {
            return bot("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.");
        }

        message.user.sataka += upgradeAmount;
        message.user.balance -= cost;

        if (message.user.sataka >= 200 && message.user.questbosspower === false) {
            await bot(`–í–∞—à–∞ —Å–∏–ª–∞ –±–æ–ª—å—à–µ 200, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –±–æ–Ω—É—Å: 2.000.000.000 ${val1}`);
            message.user.balance += 2000000000;
            message.user.questbosspower = true;
        }

        return bot(
            `–°–∏–ª–∞ –≤–∞—à–µ–π –∞—Ç–∞–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ ${utils.sp(upgradeAmount)} –µ–¥. –∑–∞ ${utils.sp(cost)} ${val1}\n` +
            `üí∞ –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}`,
            {
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: [
                        [
                            { action: { type: "text", payload: "{}", label: "üëä –ë–æ—Å—Å —Å–∏–ª–∞" }, color: "positive" }
                        ]
                    ]
                })
            }
        );
    }
});

cmd.hear(/^(?:–±–æ—Å—Å –∞—Ç–∞–∫–∞|‚öî –ê—Ç–∞–∫–∞)(?:\s+([0-9]+))?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (bossinfo.boss < 1) return bot(`–ë–æ—Å—Å –º–µ—Ä—Ç–≤, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏. üëä`);
        if (message.user.settings.adm >= 2) return bot(`–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –∞—Ç–∞–∫–æ–≤–∞—Ç—å –±–æ—Å—Å–∞. üíö`);

        // –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∞—Ç–∞–∫—É–µ–º 1 —Ä–∞–∑
        const attackCount = message.args[1] ? parseInt(message.args[1]) : 1;
        const energyCost = 2 * attackCount;

        if (message.user.energy < energyCost) {
            message.send({ sticker_id: utils.pick([108227, 108218, 52986, 110673, 110695]) });
            return bot(`–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å —ç–Ω–µ—Ä–≥–∏—è! üîã\nüí§ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω.`);
        }

        // –ö–≤–µ—Å—Ç "–£–±–∏–π—Ü–∞ –±–æ—Å—Å–æ–≤"
        if (message.user.questdamagedealer === false) {
            const damageDealt = Math.floor(message.user.sataka);
            message.user.bossyr += damageDealt;
            if (message.user.bossyr >= 100000) {
                message.user.questdamagedealer = true;
                await bot(`üéâ –í—ã –Ω–∞–Ω–µ—Å–ª–∏ 100.000 —É—Ä–æ–Ω–∞! –ù–∞–≥—Ä–∞–¥–∞: 150.000.000 ${val1}`);
                message.user.balance += 150000000;
            }
        }

        const damage = Math.floor(message.user.sataka) * attackCount;
        message.user.bossyr += damage;
        bossinfo.boss -= damage;
        message.user.energy -= energyCost;

        return bot(
            `–í—ã –Ω–∞–Ω–µ—Å–ª–∏ –±–æ—Å—Å—É ${utils.sp(damage)} —É—Ä–æ–Ω–∞! üëäüó°Ô∏è\n` +
            `‚ù§ –ñ–∏–∑–Ω–∏ –±–æ—Å—Å–∞: ${utils.sp(bossinfo.boss)} –∏–∑ ${utils.sp(bossinfo.boss_max)}\n` +
            `‚ö° –í–∞—à–∞ —ç–Ω–µ—Ä–≥–∏—è: ${message.user.energy} –µ–¥.`,
            {
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: [
                        [
                            { action: { type: "text", payload: "{}", label: "‚öî –ê—Ç–∞–∫–∞" }, color: message.user.energy >= 2 ? "positive" : "negative" },
                            { action: { type: "text", payload: "{}", label: "üòà –ë–æ—Å—Å —Ç–æ–ø" }, color: "secondary" }
                        ]
                    ]
                })
            }
        );
    }
});


cmd.hear(/^(?:–±–æ—Å—Å —Ç–æ–ø|üòà –ë–æ—Å—Å —Ç–æ–ø)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let top = [];

    double
      .filter((x) => x.settings.adm === 0)
      .map((x) => {
        top.push({ bossyr: x.bossyr, tag: x.tag, id: x.id, mention: x.mention });
      });

    top.sort((a, b) => {
      return b.bossyr - a.bossyr;
    });

    let text = ``;

    const find = () => {
      let pos = 1000;

      for (let i = 0; i < top.length; i++) {
        if (top[i].id === message.senderId) return (pos = i);
      }

      return pos;
    };

    const maxTopEntries = Math.min(10, double.filter((x) => x.settings.adm === 0).length);

    for (let i = 0; i < maxTopEntries; i++) {
      if (!top[i]) {
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
      }

      const user = top[i];

      text += `\n${i === 9 ? `üîü` : `${i + 1}‚É£`} ${user.mention ? `@id${user.id} (${user.tag})` : `${user.tag}`} ‚Äî –Ω–∞–Ω—ë—Å ${utils.sp(user.bossyr)} —É—Ä–æ–Ω–∞.`;
    }

    return bot(
      `—Ç–æ–ø –ø–æ –æ–±—â–µ–º—É —É—Ä–æ–Ω—É:${text}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${utils.gi(find() + 1)} ${message.user.tag} ‚Äî –Ω–∞–Ω—ë—Å ${utils.sp(
        message.user.bossyr
      )} —É—Ä–æ–Ω–∞.`,
      {
        keyboard: JSON.stringify({
          inline: true,
          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üîÖ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üòà –ë–æ—Å—Å —Ç–æ–ø",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üë• –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üåê –¢–æ–ø –±–∏—Ç–∫–æ–∏–Ω—ã",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "„ÄΩÔ∏è –¢–æ–ø –æ–ø—ã—Ç",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üèéÔ∏è –¢–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üí∞ –¢–æ–ø –±–∞–ª–∞–Ω—Å",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üíå –¢–æ–ø —Å–æ–æ–±—â–µ–Ω–∏—è",
                },
                color: "default",
              },
            ],
          ],
        }),
      }
    );
  }
});

// –ö–æ–º–∞–Ω–¥—ã –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è









module.exports = commands;
