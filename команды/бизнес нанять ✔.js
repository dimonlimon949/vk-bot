let utils = require('../utils.js')

const commands =[];

const fs = require('fs'); 

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    // console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

let fink=true

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5



const businesses=require('../spisok/business spisok.js')

cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å)\s(?:–Ω–∞–Ω—è—Ç—å)\s([0-9]+)\s([0-9]+)$/i, async (message, bot) => {
  try {
    if (!message.isChat || message.chat.type === 1) {
      await hireWorkersPrivate(message, bot);
    } else if (message.isChat || message.chat.type === 2) {
      await hireWorkersGroup(message, bot);
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å:", error);
    await bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–π–º–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

async function hireWorkersPrivate(message, bot) {
  if (!message.user.settings) {
    message.user.settings = {};
  }

  let businessIndex = Math.floor(Number(message.args[1]));
  let workersToHire = Math.floor(Number(message.args[2].replace(/(\.|\,)/gi, "").replace(/(–∫|k)/gi, "000").replace(/(–º|m)/gi, "000000").replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi, "1")));

  let maxBusinesses = message.user.settings.busi === true ? 5 : 4;

  if (businessIndex < 1 || businessIndex > maxBusinesses) {
    return bot(`üö´ –û—à–∏–±–∫–∞, –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å [–æ—Ç 1 –¥–æ ${maxBusinesses}] [–∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤]¬ª ‚ùì`);
  }

  if (message.user.business2.length < businessIndex) {
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå`);
  }

  businessIndex--;

  const bizData = message.user.business2[businessIndex];
  const biz = businesses2[bizData.id - 1][bizData.upgrade - 1];

  if (bizData.workers + workersToHire > biz.workers) {
    return bot(`üö´ –í –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è —Å—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤! ‚ùå\n\n‚ñ∂Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ.`);
  }
  const cost1 = 0
  const cost = workersToHire * cost1;


  if (cost > message.user.balance) {
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—á–∏—Ö! 1 —Ä–∞–±–æ—Ç–Ω–∏–∫ - ${utils.sp(cost1)} ${val1}`);
  }

  message.user.balance -= cost;
  message.user.business2[businessIndex].workers += workersToHire;

  return bot(`‚úÖ –í—ã –Ω–∞–Ω—è–ª–∏ ${utils.sp(workersToHire)} —Ä–∞–±–æ—á–∏—Ö üë∑‚Äç‚ôÇÔ∏è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Ññ${businessIndex + 1} üéâ`);
}

async function hireWorkersGroup(message, bot) {
  if (!message.user.settings) {
    message.user.settings = {};
  }

  let businessIndex = Math.floor(Number(message.args[1]));
  let workersToHire = Math.floor(Number(message.args[2].replace(/(\.|\,)/gi, "").replace(/(–∫|k)/gi, "000").replace(/(–º|m)/gi, "000000").replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi, "1")));

  let maxBusinesses = message.user.settings.busi === true ? 5 : 4;

  if (businessIndex < 1 || businessIndex > maxBusinesses) {
    return bot(`üö´ –û—à–∏–±–∫–∞, –¥–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ¬´–ë–∏–∑–Ω–µ—Å –Ω–∞–Ω—è—Ç—å [–æ—Ç 1 –¥–æ ${maxBusinesses}] [–∫–æ–ª-–≤–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤]¬ª ‚ùì`);
  }

  if (message.user.business.length < businessIndex) {
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞! ‚ùå`);
  }

  businessIndex--;

  const bizData = message.user.business[businessIndex];
  const biz = businesses[bizData.id - 1][bizData.upgrade - 1];

  if (bizData.workers + workersToHire > biz.workers) {
    return bot(`üö´ –í –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è —Å—Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤! ‚ùå\n\n‚ñ∂Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ.`);
  }
  const cost1 = 0 
  const cost = workersToHire * cost1; 


  if (cost > message.user.balance2) {
    return bot(`üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–∞–±–æ—á–∏—Ö! 1 —Ä–∞–±–æ—Ç–Ω–∏–∫ - ${utils.sp(cost1)} ${val4}`);
  }

  message.user.balance2 -= cost;
  message.user.business[businessIndex].workers += workersToHire;

  return bot(`‚úÖ –í—ã –Ω–∞–Ω—è–ª–∏ ${utils.sp(workersToHire)} —Ä–∞–±–æ—á–∏—Ö üë∑‚Äç‚ôÇÔ∏è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ ‚Ññ${businessIndex + 1} üéâ`);
}

let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

module.exports = commands;