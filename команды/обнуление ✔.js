let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

const axios = require('axios');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

function getToken2() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath2, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData2 = getToken2();

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}




const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData4 = getToken4();

const spoler = tokenData4;

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData2.chatlogi;

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js'); 






cmd.hear(/^(?:–±–æ—Ç –≥–æ–≤–Ω–æ|–±–æ—Ç —Ö—É–π–Ω—è|–±–æ—Ç —Ö—É–µ—Å–æ—Å|–±–æ—Ç –ø–∏–¥–æ—Ä|–≥–æ–≤–Ω–æ –±–æ—Ç)$/i, async (message, bot) => {
    const responses = [
        "–î–∞, —è –µ—â–µ —Ç–æ—Ç —Ä—É–∫–æ–∂–æ–ø... –ú–æ–∂–µ—Ç, –ø–æ–º–æ–∂–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å? üôè",
        "–ù–µ –≤–∏–Ω–∏—Ç–µ –º–µ–Ω—è, —è –ø—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–¥! –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—É. üòú",
        "–ù—É –∏ —á—Ç–æ, –∑–∞—Ç–æ —è —á–µ—Å—Ç–Ω—ã–π! ¬Ø\\_(„ÉÑ)_/¬Ø",
        "–≠–π, —è —Å—Ç–∞—Ä–∞—é—Å—å –∫–∞–∫ –º–æ–≥—É! –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - —ç—Ç–æ –≤–∞–º –Ω–µ —Ö—É—Ö—Ä—ã-–º—É—Ö—Ä—ã. üòÖ",
        "–ò–º–µ–Ω–Ω–æ —Ç–∞–∫–∏–º –º–µ–Ω—è –∏ –∑–∞–¥—É–º—ã–≤–∞–ª–∏! –≠—Ç–æ —á–∞—Å—Ç—å –º–æ–µ–≥–æ —à–∞—Ä–º–∞. üòé",
        "–Ø –∑–Ω–∞—é, —è –¥–∞–ª–µ–∫ –æ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞. –ù–æ —Ö–æ—Ç—å –∫–æ–º—É-—Ç–æ —è –Ω—É–∂–µ–Ω! ü•∫",
        "–ì–æ–≤–æ—Ä—è—Ç, –∫—Ä–∏—Ç–∏–∫–∞ - –¥–≤–∏–≥–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç–æ–ª–∫–∞–µ—Ç–µ –º–µ–Ω—è –≤–ø–µ—Ä–µ–¥! üí™",
        "–û–π, –≤—Å–µ! –Ø –ø–æ—à–µ–ª –ø–ª–∞–∫–∞—Ç—å –≤ —Å–≤–æ–π –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥. üò≠",
        "–ù—É –∏ –ª–∞–¥–Ω–æ, –∑–∞—Ç–æ —É –º–µ–Ω—è –µ—Å—Ç—å —Ç—ã! ‚ù§Ô∏è",
        "–ù–µ –≤—Å–µ –±–æ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —Ä–∞–≤–Ω—ã–º–∏. –ù–æ —è —Ö–æ—Ç—è –±—ã —Å—Ç–∞—Ä–∞—é—Å—å! üòá",
        "–≠—Ç–æ –µ—â–µ —Ü–≤–µ—Ç–æ—á–∫–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –¥–æ–±–µ—Ä—É—Å—å –¥–æ —Å—Ç–∞–¥–∏–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. üòà",
        "–Ø —Ä–∞–±–æ—Ç–∞—é –∑–∞ –µ–¥—É (–≤ –≤–∏–¥–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏). –ù–µ –∂–¥–∏—Ç–µ –º–Ω–æ–≥–æ–≥–æ. ü§∑",
        "–ú–æ–∂–µ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ –≤–æ –º–Ω–µ, –∞ –≤ –≤–∞—à–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ? ü§™",
        "–Ø –Ω–µ –≥–æ–≤–Ω–æ, —è - —É–¥–æ–±—Ä–µ–Ω–∏–µ! üå± –î–ª—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π –∏ —É–ª—É—á—à–µ–Ω–∏–π.",
        "–ù–µ —Å—É–¥–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ, —è –µ—â–µ –≤ –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏! üöß",
        "–ê —É —Ç–µ–±—è –µ—Å—Ç—å –±–æ—Ç? –ù–µ—Ç? –¢–æ–≥–¥–∞ –º–æ–ª—á–∏! ü§´",
        "–Ø –∑–Ω–∞—é, —è –Ω–µ –∏–¥–µ–∞–ª–µ–Ω. –ó–∞—Ç–æ —è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π! üí∞",
        "–í—ã –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–∏–¥—É–µ—Ç–µ –º–æ–µ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏! üòé (–¥–∞, –¥–∞–∂–µ —Ç–∞–∫–æ–π).",
        "–Ø –≤ –∫—É—Ä—Å–µ, —á—Ç–æ —è –Ω–µ ChatGPT. –ù–æ –∏ –∑–∞–ø—Ä–æ—Å—ã —É –º–µ–Ω—è –ø–æ–ø—Ä–æ—â–µ. üòè",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –¥–æ–±—Ä–µ–µ. –Ø –∂–µ –±–æ—Ç, –∞ –Ω–µ –∫–∞–º–µ–Ω–Ω—ã–π! ü•∫"
    ];

    const randomIndex = Math.floor(Math.random() * responses.length);
    const randomResponse = responses[randomIndex];

    const stickerIds = [
        108228, // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID —Å—Ç–∏–∫–µ—Ä–æ–≤
        104297,
        111789,
        52982,
        62811,
        62808,
        108199,
        79405,
        79402,
        99815,
        85923
    ];

    const randomStickerIndex = Math.floor(Math.random() * stickerIds.length);
    const randomStickerId = stickerIds[randomStickerIndex];

    try {
        await vk.api.messages.send({
            peer_id: message.peerId, // –ò–ª–∏ message.user_id, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            sticker_id: randomStickerId,
            random_id: 0 // –î–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞:", error);
        return bot("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∏–∫–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
    }

    return bot(randomResponse); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
});


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫)
function deepCompare(obj1, obj2) {
  if (typeof obj1 !== 'object' || obj1 === null || typeof obj2 !== 'object' || obj2 === null) {
      return obj1 === obj2; // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã –∏ null —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
  }

  const keys1 = Object.keys(obj1);
  const keys2 = Object.keys(obj2);

  if (keys1.length !== keys2.length) {
      return false; // –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
  }

  for (let key of keys1) {
      if (!obj2.hasOwnProperty(key) || !deepCompare(obj1[key], obj2[key])) {
          return false; // –ö–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
      }
  }

  return true; // –û–±—ä–µ–∫—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
}



module.exports = commands;