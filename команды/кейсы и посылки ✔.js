let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

const tokensFilePath5 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}



// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();
const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken5() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath5, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData4 = getToken4(); 

const spoler = tokenData4;

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 
const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }



const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5
const tokenData5 = getToken5(); 
let sallka = tokenData5.titan

function getRandomWithRare(min, max) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã min –±—ã–ª–æ –º–µ–Ω—å—à–µ max
  if (min >= max) {
    throw new Error("min –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ max");
  }

  const rand = Math.random(); // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1

  if (rand < 0.02) { // –®–∞–Ω—Å 5% –Ω–∞ —á–∏—Å–ª–æ 3
    return 3;
  } else if (rand < 0.03) { // –®–∞–Ω—Å 2% –Ω–∞ —á–∏—Å–ª–æ 4 (5% + 2% = 7%)
    return 4;
  } else {
    // –û—Å—Ç–∞–≤—à–∏–µ—Å—è 93% —Å–ª—É—á–∞–µ–≤ - –æ–±—ã—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É min –∏ max
    const remainingRange = max - min + 1 - 2; // –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ 3 –∏ 4
    let randomNumber = Math.floor(Math.random() * remainingRange) + min;

    // –ï—Å–ª–∏ randomNumber >= 3, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 3
    if (randomNumber >= 3) {
      randomNumber++;
    }
    // –ï—Å–ª–∏ randomNumber >= 4, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 4
    if (randomNumber >= 4) {
      randomNumber++;
    }

    return randomNumber;
  }
}


cmd.hear(/(?:–∫–µ–π—Å—ã|üì¶ –°–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤|üì¶ –ö–µ–π—Å—ã üé∞|@chakobot üì¶ –ö–µ–π—Å—ã|üì¶ –ö–µ–π—Å—ã)$/i, async (message, bot) => {
  console.log('–ö–æ–º–∞–Ω–¥–∞ "–ö–µ–π—Å—ã" –≤—ã–∑–≤–∞–Ω–∞');

  if (!message.isChat || message.chat.type === 1) {
      //–°—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–π —Ä–∞–∑
      double = JSON.parse(fs.readFileSync('./database/users.json', 'utf8'));

      const userId = message.user.id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
      console.log(`ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É: ${userId}`);

      const userUid = message.user.uid; // –ü–æ–ª—É—á–∞–µ–º uid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
      console.log(`UID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É: ${userUid}`);

      const user = double.find((x) => x.uid === userUid); // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ uid
      console.log(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user ? '–î–∞' : '–ù–µ—Ç'}`);

      let text = `üì¶ –í–∞—à–∏ –∫–µ–π—Å—ã:`;

      if (message.user.c1 == 0) {

        if (message.user.c2 == 0) {

            if (message.user.c3 == 0) {

                if (message.user.c4 == 0) {

                    if (message.user.c5 == 0) {

                        if (message.user.c6 == 0) {

                            if (message.user.c7 == 0) {

                                if (message.user.c8 == 0) {

                                    if (message.user.c9 == 0) {

                                        if (message.user.c10 == 0) {

                                            if (message.user.c11 == 0) {

                                                if (message.user.c12 == 0) {

                                                    if (message.user.c13 == 0) {

                                                        if (message.user.c14 == 0) {

                                                            if (message.user.c15 == 0) {

                                                                if (message.user.c16 == 0) {

                                                                    text += `–£ –≤–∞—Å –Ω–µ—Ç –∫–µ–π—Å–æ–≤.\n`;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
      if (message.user.c1 > 0) {
          text += `\nüîπ 1. –û–±—ã—á–Ω—ã–π –ö–µ–π—Å (${utils.sp(message.user.c1)} —à—Ç.)`;
      }

      if (message.user.c2 > 0) {
          text += `\nüîπ 2. –ó–æ–ª–æ—Ç–æ–π –ö–µ–π—Å (${utils.sp(message.user.c2)} —à—Ç.)`;
      }

      if (message.user.c3 > 0) {
          text += `\nüîπ 3. –î–æ–Ω–∞—Ç-–∫–µ–π—Å (${utils.sp(message.user.c3)} —à—Ç.)`;
      }

      if (message.user.c4 > 0) {
          text += `\nüîπ 4. Starr Drops (${utils.sp(message.user.c4)} —à—Ç.)`;
      }

      if (message.user.c5 > 0) {
          text += `\nüîπ 5. Halloween –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c5)} —à—Ç.)`;
      }

      if (message.user.c6 > 0) {
          text += `\nüîπ 6. –°–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c6)} —à—Ç.)`;
      }

      if (message.user.c7 > 0) {
          text += `\nüîπ 7. –ê–≤—Ç–æ–∑–≤—É–∫ –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c7)} —à—Ç.)`;
      }

      if (message.user.c8 > 0) {
          text += `\nüîπ 8. –ù–æ–≤–æ–≥–æ–¥–Ω–∏—Ö –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c8)} —à—Ç.)`;
      }

      if (message.user.c9 > 0) {
          text += `\nüîπ 9. –ü—Ä–µ–º–∏—É–º –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c9)} —à—Ç.)`;
      }

      if (message.user.c10 > 0) {
          text += `\nüîπ 10. –£–ª—å—Ç—Ä–∞ –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c10)} —à—Ç.)`;
      }

      if (message.user.c11 > 0) {
          text += `\nüîπ 11. –ê–¥–º–∏–Ω –∫–µ–π—Å–æ–≤ (${utils.sp(message.user.c11)} —à—Ç.)`;
      }

      if (message.user.c12 > 0) {
          text += `\nüîπ 12. –†–µ–¥–∫–∏–π Starr Drops (${utils.sp(message.user.c12)} —à—Ç.)`;
      }

      if (message.user.c13 > 0) {
          text += `\nüîπ 13. –°–≤–µ—Ä—Ö—Ä–µ–¥–∫–∏–π Starr Drops (${utils.sp(message.user.c13)} —à—Ç.)`;
      }

      if (message.user.c14 > 0) {
          text += `\nüîπ 14. –≠–ø–∏—á–µ—Å–∫–∏–π Starr Drops (${utils.sp(message.user.c14)} —à—Ç.)`;
      }

      if (message.user.c15 > 0) {
          text += `\nüîπ 15. –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π Starr Drops (${utils.sp(message.user.c15)} —à—Ç.)`;
      }

      if (message.user.c16 > 0) {
          text += `\nüîπ 16. –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π Starr Drops (${utils.sp(message.user.c16)} —à—Ç.)`;
      }

      text += `\n‚ùì –ü–æ–∫—É–ø–∫–∞: ¬´–ö–µ–π—Å [–Ω–æ–º–µ—Ä] [–∫–æ–ª-–≤–æ]¬ª ‚ùÑÔ∏è\nüîë –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å: ¬´–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å [–Ω–æ–º–µ—Ä]¬ª üî•`;
      console.log("–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É —Ç–µ–∫—Å—Ç" + text);

      return bot(`–∫–µ–π—Å—ã:

üì¶ 1. –û–±—ã—á–Ω—ã–π –ö–µ–π—Å ‚Äî 20.000.000 ${val1}
üì¶ 2. –ó–æ–ª–æ—Ç–æ–π –ö–µ–π—Å ‚Äî 50.000.000 ${val1}
üì¶ 3. –î–æ–Ω–∞—Ç-–∫–µ–π—Å ‚Äî 50 —Ä—É–±.

${text}`);
  }
});

cmd.hear(/^(?:üì¶ –∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1|–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

  if (message.user.c1 < 1) return bot(`–£ –í–∞—Å –Ω–µ—Ç ¬´–û–±—ã—á–Ω–æ–≥–æ –∫–µ–π—Å–∞¬ª ‚ùå`)

  message.user.c1 -= 1

  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  let rand = utils.random(1, 4)

  if (rand == 1) {

    let bon = utils.random(1, 30)

    bon *= 1000000

    message.user.balance += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val1} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    let bon = utils.random(10, 100)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞! üèÜ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {

    let bon = utils.random(1, 60)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 4) {

    let bon = utils.random(1, 300)

    message.user.btc += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –±–∏—Ç–∫–æ–∏–Ω–æ–≤! üåê`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 1" },

          "color": "positive"

        }],]

      })

    })

  }
}
});


cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2|üì¶ –∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

  if (message.user.c2 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç ¬´–ó–æ–ª–æ—Ç–æ–≥–æ –∫–µ–π—Å–∞¬ª ‚ùå`)

  message.user.c2 -= 1
  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  let rand = utils.random(1, 3)

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
   await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  if (rand == 1) {

    let bon = utils.random(1, 70)

    bon *= 1000000

    message.user.balance += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val1} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    let bon = utils.random(500, 4500)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞! üìà`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {

    let bon = utils.random(1, 65)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2" },

          "color": "positive"

        }],]

      })

    })

  }



  return bot(`–≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.`, {

    keyboard: JSON.stringify({

      "inline": true,

      "buttons": [[{

        "action": { "type": "text", "payload": "{}", "label": "üì¶ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 2" },

        "color": "positive"

      }],]

    })

  })
}
});

cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {


  if (message.user.c3 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "–î–æ–Ω–∞—Ç-–∫–µ–π—Å–∞".`)

    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
      message.user.now.kv5 = true;
      message.user.balance2 += 50000;
      await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}
  
  üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
    keyboard: JSON.stringify({
      "inline": true,
      "buttons": [
        [{
          "action": {
            "type": "text",
            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
          },
          "color": "positive"
        }]
      ]
    })
  })
      
    }


  message.user.c3 -= 1
  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  if (typeof message.user.questdonat === "number") {

    message.user.questdonat++;

    if (message.user.questdonat >= 5) {

      message.user.questdonat = true;

      await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã 5 —Ä–∞–∑ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ–Ω–∞—Ç-–∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 1 –î–æ–Ω–∞—Ç-–∫–µ–π—Å.`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

      message.user.c3 += 1;

    }

  } 

  if (typeof message.user.questdonat2 === "number" && message.user.questallfucker == true) {

    message.user.questdonat2++;

    if (message.user.questdonat2 >= 50) {

      message.user.questdonat2 = true;

      await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã 50 —Ä–∞–∑ –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ–Ω–∞—Ç-–∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ 2 –î–æ–Ω–∞—Ç-–∫–µ–π—Åa.`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

      message.user.c3 += 2;

    }

  } 



  let rand = getRandomWithRare(1, 15);

  if (rand == 1) {

    let bon = utils.random(1, 65)

    bon *= 1000000

    message.user.balance += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val1} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    let bon = utils.random(1, 60)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üìà`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {



    if (message.user.settings.vip !== false) {

      message.user.c3++;

      return bot('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ VIP —Å—Ç–∞—Ç—É—Å!\n‚ôªÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å VIP, –≤—ã–¥–∞–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤ –≤–∏–¥–µ –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–∞', {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

    }

    if (message.user.settings.premium || message.user.settings.titan) {

      message.user.settings.vip = true;

      return bot('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ VIP —Å—Ç–∞—Ç—É—Å! ü§ó\n\n‚ñ∂Ô∏è –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ VIP: ¬´VIP help¬ª', {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

    }

    message.user.settings.vip = true

    message.user.stock.status = "VIP"

    message.user.limit.nicklimit = 21

    message.user.level += 5

    message.user.limit.banklimit = 100000000;

    message.user.limit.farmlimit = 200;

    message.user.limit.videocardlimit = 50;

    message.user.limit.playerlimit = 100000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 20;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ VIP —Å—Ç–∞—Ç—É—Å! ü§ó\n\n‚ñ∂Ô∏è –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ VIP: ¬´VIP help¬ª`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 4) {



    if (message.user.settings.premium !== false) {

      message.user.c3++;

      return bot('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ PREMIUM —Å—Ç–∞—Ç—É—Å!\n‚ôªÔ∏è –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å PREMIUM, –≤—ã–¥–∞–Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –≤ –≤–∏–¥–µ –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–∞', {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

    }

    if (message.user.settings.premium || message.user.settings.titan) {

      message.user.settings.premium = true;

      message.user.stock.status = "Premium";

      message.user.limit.nicklimit = 32;
  
      message.user.opit += 5000;
  
      message.user.level += 35;
  
      message.user.bilet += 5;
  
      message.user.limit.banklimit = 200000000;
  
      message.user.limit.farmlimit = 500;
  
      message.user.limit.videocardlimit = 75;
  
      message.user.limit.playerlimit = 200000000;
  
      message.user.limit.sent = 0;
  
      message.user.maxenergy = 30;

      return bot('–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Premium —Å—Ç–∞—Ç—É—Å! ü§ó\n\n‚ñ∂Ô∏è –£–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ Premium: ¬´Premium help¬ª', {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

            "color": "positive"

          }],]

        })

      });

    }

  }

  if (rand == 5) {

    message.user.balance += 1000000

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1.000.000 ${val1} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 6) {
let bon = utils.random(10, 20)
    message.user.rub += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${bon}  ${val2} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 7) {

    message.user.opit += 500

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 500 –æ–ø—ã—Ç–∞! üìà`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 8) {

    message.user.c3 += 1

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –î–æ–Ω–∞—Ç-–∫–µ–π—Å! üì¶`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 9) {

    let bon = utils.random(1, 55)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 10) {

    message.user.opit += 3500

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 3.500 –æ–ø—ã—Ç–∞! üìà`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 11) {

    let bon = utils.random(1, 55)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 12) {

    let bon = utils.random(1000, 5000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 13) {

    let bon = utils.random(3000, 15000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 14) {

    let bon = utils.random(5000, 10000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}! üëë`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 15) {

    let bon = utils.random(1, 60)

    bon *= 1000000

    message.user.balance += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val1} üíµ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 3" },

          "color": "positive"

        }],]

      })

    })

  }
}
});


cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.user.c7 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "–ö–µ–π—Å–∞ –ê–≤—Ç–æ–∑–≤—É–∫–∞".`) // (—Å–æ–≤–µ—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—é –∫–æ–º–∞–Ω–¥—É –ø–æ–¥ —Å–µ–±—è)

  message.user.c7 -= 1

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  let rand = utils.random(1, 6)

  if (rand == 1) {

    let bon = utils.random(1, 30)

    bon *= 1000000

    message.user.balance += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val1}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    let bon = utils.random(100, 1200)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {

    let bon = utils.random(1, 30)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 4) {

    return bot(`–≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 5) {

    message.user.balance += 4000000

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 4.000.000 ${val1}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 6) {

    message.user.balance += 0

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 0 ${val1}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 7" },

          "color": "positive"

        }],]

      })

    })

  }
}
});

cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5)$/i, async (message, bot) => {


  if (!message.isChat || message.chat.type === 1) {
  if (message.user.c5 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "Halloween –∫–µ–π—Å–∞".`)

  message.user.c5 -= 1

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  let rand = utils.random(1, 8)

  if (rand == 1) {

    message.user.balance += 0

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 0 ${val1}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    if (message.user.tree == 4) {
      message.user.c5 += 1;

      return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –î–µ—Ä–µ–≤–æ, –Ω–æ —É –≤–∞—Å —É–∂–µ —Ç–∞–∫–æ–µ –µ—Å—Ç—å, –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {
        

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

            "color": "positive"

          }],]

        })

      });



    }

    message.user.tree = 4;

    message.user.irrigation = 100;

    message.user.leafpribil = 100;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–µ–∑–ª–∏—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {

    let bon = utils.random(1, 100)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 5) {

    if (message.user.business.length >= 4) {

      message.user.c5 += 1;

      return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 4 –±–∏–∑–Ω–µ—Å–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

            "color": "positive"

          }],]

        })

      });

    }

    message.user.business2.push({

      "id": 17,

      "upgrade": 1,

      "workers": 1,

      "moneys": 0

    });

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 6) {

    let bon = utils.random(1000, 1200)

    message.user.rub += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val2}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": `–û–±–º–µ–Ω ${val2}` },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 7) {

    if (message.user.business2.length >= 4) {

      message.user.c5 += 1;

      return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å 4 –±–∏–∑–Ω–µ—Å–∞, –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

            "color": "positive"

          }],]

        })

      });

    }

    message.user.business2.push({

      "id": 14,

      "upgrade": 1,

      "workers": 1,

      "moneys": 0

    });

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –±–∏–∑–Ω–µ—Å`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 8) {

    if (message.user.settings.premium == true) {

      message.user.c5 += 1;

      return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Premium –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

            "color": "positive"

          }],]

        })

      });

    }



    if (message.user.settings.titan == true) {

      message.user.settings.premium = true;

      return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Premium`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

            "color": "positive"

          }],]

        })

      });

    }



    message.user.settings.premium = true;

    message.user.stock.status = "Premium";

    message.user.limit.nicklimit = 32;

    message.user.opit += 5000;

    message.user.level += 35;

    message.user.bilet += 5;

    message.user.limit.banklimit = 200000000;

    message.user.limit.farmlimit = 500;

    message.user.limit.videocardlimit = 75;

    message.user.limit.playerlimit = 200000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 30;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Premium`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    });

  } else {

    return bot(`–≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.`, {
      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 5" },

          "color": "positive"

        }],]

      })

    });

  }
}
});

cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.user.c6 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "–°–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞".`) // (—Å–æ–≤–µ—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—é –∫–æ–º–∞–Ω–¥—É –ø–æ–¥ —Å–µ–±—è)

  message.user.c6 -= 1


  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  let rand = utils.random(1, 15)

  if (rand == 1) {

    message.user.balance += 100000000

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100.000.000 ${val1}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 2) {

    let bon = utils.random(4000, 6000)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 3) {

    let bon = utils.random(1, 30)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 4) {

    let bon = utils.random(1000, 10000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 5) {

    let bon = utils.random(1000, 10000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 6) {

    let bon = utils.random(1000, 10000)

    message.user.rub += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 7) {

    let bon = utils.random(500, 800)

    message.user.rub += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val2}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": `–û–±–º–µ–Ω ${val2}`},

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 8) {

    if (message.user.settings.premium == true) {

      message.user.c6 += 1;

      return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å Premium –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

            "color": "positive"

          }],]

        })

      });

    }



    if (message.user.settings.titan == true) {

      message.user.settings.premium = true;

      return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Premium`, {

        keyboard: JSON.stringify({

          "inline": true,

          "buttons": [[{

            "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

            "color": "positive"

          }],]

        })

      });

    }



    message.user.settings.premium = true;

    message.user.stock.status = "Premium";

    message.user.limit.nicklimit = 32;

    message.user.opit += 5000;

    message.user.level += 35;

    message.user.bilet += 5;

    message.user.limit.banklimit = 200000000;

    message.user.limit.farmlimit = 500;

    message.user.limit.videocardlimit = 75;

    message.user.limit.playerlimit = 200000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 30;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ Premium`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    });

  }

  if (rand == 9) {

    message.user.balance += 100000000

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100.000.000 ${val1} `, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 10) {

    message.user.balance += 100000000

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 100.000.000 ${val1} `, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 11) {

    let bon = utils.random(4000, 6000)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 12) {

    let bon = utils.random(1, 30)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 13) {

    let bon = utils.random(1000, 3000)

    message.user.opit += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 14) {

    let bon = utils.random(1, 60)

    message.user.rating += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }

  if (rand == 15) {

    let bon = utils.random(1000, 10000)

    message.user.balance2 += bon

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`, {

      keyboard: JSON.stringify({

        "inline": true,

        "buttons": [[{

          "action": { "type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 6" },

          "color": "positive"

        }],]

      })

    })

  }
}
});

cmd.hear(/^(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8)$/i, async (message, bot) => {


    if (!message.isChat || message.chat.type === 1) {
  if (message.user.c8 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "–ù–æ–≤–æ–≥–æ–¥–Ω–µ–≥–æ –∫–µ–π—Å–∞".`); // (—Å–æ–≤–µ—Ç—É—é –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å—é –∫–æ–º–∞–Ω–¥—É –ø–æ–¥ —Å–µ–±—è)

  message.user.c8 -= 1;

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  let rand = utils.random(1, 10);

  if (rand === 1) {
    let bon = utils.random(2000, 10000);

    message.user.balance2 += bon;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` },
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }



  if (rand === 2) {
    if (message.user.transport.car == 21) {
      message.user.c8 += 1;

      return bot(`—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ª—ã–∂–∏, –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞—Ä–∏–º –≤–∞–º –µ—â–µ 1 –∫–µ–π—Å`, {
        keyboard: JSON.stringify({
          inline: true,

          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                  label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
                },

                color: "positive",
              },
            ],
          ],
        }),
      });
    }

    message.user.transport.car = 21;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ª—ã–∂–∏`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 3) {
    let bon = utils.random(1, 35);

    message.user.rating += bon;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} —Ä–µ–π—Ç–∏–Ω–≥–∞`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 4) {
    message.user.balance += 50000000;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 50.000.000 ${val1}`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 5) {
    let bon = utils.random(100, 1000);

    message.user.opit += bon;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} –æ–ø—ã—Ç–∞`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` },
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 6) {
    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–∏—Ö—É—è`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: { command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` },
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 7) {
    message.user.c3 += 1;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ–Ω–∞—Ç –∫–µ–π—Å`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 8) {
    message.user.c6 += 1;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand === 9) {
    message.user.c6 += 1;

    return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å`, {
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });
  }

  if (rand == 10) {

  	message.user.prazdnikbussines=true;

  	return bot(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–π –±–∏–∑–Ω–µ—Å, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –≤–∞–º –ø–æ 500.000 $ –≤ –º–∏–Ω—É—Ç—É –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ`,{keyboard: JSON.stringify({"inline": true,"buttons": [[{"action": {"type": "text", "payload": "{}", "label": "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 8"}, "color": "positive"}],]})})

  }
}
});

cmd.hear(/(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9|–û—Ç–∫—Ä—ã—Ç—å üî• Premium –∫–µ–π—Å)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.user.c9 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "üî• Premium-–∫–µ–π—Å–∞".`);

  if (message.user.questallfucker && !message.user.questpremcase) {

    message.user.questpremcase = true;

    await bot(`–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–µ–º–∏—É–º –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ 50.000.000 ${val1}`);

    message.user.balance += 50000000;

  }

  let rand = utils.random(1, 100)

  message.user.c9 -= 1;

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  if (rand <= 40) {

    let mon = utils.random(1, 30);

    mon = mon * 1000000;

    message.user.balance += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} ${val1}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 40 && rand <= 60) {

    let mon = utils.random(1, 100);

    mon = mon * 100;

    message.user.opit += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} –æ–ø—ã—Ç–∞üìà`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 60 && rand <= 70) {

    let mon = utils.random(1, 100);

    mon = mon * 1;

    message.user.rating += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} —Ä–µ–π—Ç–∏–Ω–≥–∞üëë`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 70 && rand <= 71) {

    let bon = utils.random(1000, 10000)

    message.user.balance2 += bon

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 71 && rand <= 73) {

    let bon = utils.random(1000, 15000)

    message.user.balance2 += bon

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 73 && rand <= 85) {

    let bon = utils.random(1000, 15000)

    message.user.balance2 += bon

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 85 && rand <= 98) {

    let mon = utils.random(1, 500);

    mon = mon * 1;

    message.user.btc += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} –±–∏—Ç–∫–æ–∏–Ω–æ–≤üí∏`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 98 && rand <= 100) {

    try {
      for (const key in spoler) {
          if (spoler.hasOwnProperty(key)) {
              const userId = spoler[key];

              if (userId !== "" && !isNaN(parseInt(userId))) {
                  try {
                      await vk.api.messages.send({
                          user_id: userId,
                          message: `‚ñ∂Ô∏è –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:

‚ôªÔ∏è –ò–≥—Ä–æ–∫ @id${message.user.id} (${message.user.tag}) | vk.com/id${message.senderId} –≤—ã–∏–≥—Ä–∞–ª TITAN ü§ó`,
                          random_id: 0
                      });
                  } catch (sendError) {
                      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendError);
                  }
              } else {

              }
          }
      }
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  } catch (error) {
      console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ spoler:', error);
  }

    message.user.settings.titan = true;

    message.user.limit.nicklimit = 48;

    message.user.level += 50;

    message.user.opit += 5000;

    message.user.limit.banklimit = 500000000;

    message.user.limit.farmlimit = 1000;

    message.user.limit.playerlimit = 300000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 100;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ Premium-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ TITAN VIPüî•`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 9` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });



  }
}
});

cmd.hear(/(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 11)$/i, async (message, bot) => {

    if (!message.isChat || message.chat.type === 1) {

  if (message.user.c11 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "–ê–¥–º–∏–Ω-–∫–µ–π—Å–∞".`);

  message.user.c11 -= 1;
  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  let rand = utils.random(1, 10000000);

  mon = rand * 10;

  message.user.limitadd.playerlimitadd += mon;

  return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ê–¥–º–∏–Ω-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ +${utils.sp(mon)} ${val1} –∫ –≤—ã–¥–∞—á–µ\nüèÜ–õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ —á–∞—Å!`,{
    keyboard: JSON.stringify({
      inline: true,

      buttons: [
        [
          {
            action: {
              type: "text",
              payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 11` }),
              label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
            },

            color: "positive",
          },
        ],
      ],
    }),
  });
}
});

cmd.hear(/(?:–∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10|–û—Ç–∫—Ä—ã—Ç—å üî• –£–ª—å—Ç—Ä–∞ –∫–µ–π—Å)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.user.c10 < 1) return bot(`–£ –≤–∞—Å –Ω–µ—Ç "üî• –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å–∞".`);

  let rand = utils.random(1, 1000)

  message.user.c10 -= 1;

  if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && !message.user.now.kv5){
    message.user.now.kv5 = true;
    message.user.balance2 += 50000;
    await bot(`‚úî —Ç—ã –æ—Ç–∫—Ä—ã–ª –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 50.000 ${val4}

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π –∫–µ–π—Å –ø—Ä–∏–Ω–æ—Å–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –±–æ–Ω—É—Å—ã –≤ –±–æ—Ç–µ!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})
    
  }

  if (message.user.otkr == undefined) {
    message.user.otkr = 0;
  }
  message.user.otkr += 1;

  if (rand <= 300) {

    let mon = utils.random(1, 30);

    mon = mon * 1000000;

    message.user.balance += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} ${val1}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 300 && rand <= 500) {

    let mon = utils.random(1, 50);

    mon = mon * 100;

    message.user.opit += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} –æ–ø—ã—Ç–∞üìà`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 500 && rand <= 700) {

    let mon = utils.random(1, 65);

    mon = mon * 1;

    message.user.rating += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} —Ä–µ–π—Ç–∏–Ω–≥–∞ üëë`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 700 && rand <= 750) {

    let mon = utils.random(1, 20);

    message.user.rubli += Number(mon);

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} —Ä—É–±–ª–µ–π –Ω–∞ –¥–æ–Ω–∞—Ç-—Å—á–µ—Ç`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 750 && rand <= 780) {

    let bon = utils.random(1000, 15000)

    message.user.balance2 += bon

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }



  if (rand > 780 && rand <= 820) {

    let bon = utils.random(1000, 15000)

    message.user.balance2 += bon

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bon)} ${val4}`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 820 && rand <= 970) {

    let mon = utils.random(1, 100);

    mon = mon * 1;

    message.user.btc += mon;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(mon)} –±–∏—Ç–∫–æ–∏–Ω–æ–≤üí∏`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 970 && rand <= 990) {

    vk.api.messages.send({

      user_id: message.user.id,

      message: `–£–í–ï–î–û–ú–õ–ï–ù–ò–ï ‚úÖ\nüî•–°—Å—ã–ª–∫–∞ –Ω–∞ Titan –±–µ—Å–µ–¥—É: ${sallka} `,

      random_id: 0

    });

    try {
      for (const key in spoler) {
          if (spoler.hasOwnProperty(key)) {
              const userId = spoler[key];

              if (userId !== "" && !isNaN(parseInt(userId))) {
                  try {
                      await vk.api.messages.send({
                          user_id: userId,
                          message: `‚ñ∂Ô∏è –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:

‚ôªÔ∏è –ò–≥—Ä–æ–∫ @id${message.user.id} (${message.user.tag}) | vk.com/id${message.senderId} –≤—ã–∏–≥—Ä–∞–ª TITAN ü§ó`,
                          random_id: 0
                      });
                  } catch (sendError) {
                      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendError);
                  }
              } else {

              }
          }
      }
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  } catch (error) {
      console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ spoler:', error);
  }

    message.user.settings.titan = true;

    message.user.limit.nicklimit = 48;

    message.user.level += 50;

    message.user.opit += 50000;

    message.user.limit.banklimit = 500000000000000;

    message.user.limit.farmlimit = 10000;

    message.user.limit.playerlimit = 300000000000000;

    message.user.limit.sent = 0;

    message.user.maxenergy = 100;

    return bot(`üî•–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ TITAN VIPüî•`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }

  if (rand > 990 && rand <= 1000) {

    try {
      for (const key in spoler) {
          if (spoler.hasOwnProperty(key)) {
              const userId = spoler[key];

              if (userId !== "" && !isNaN(parseInt(userId))) {
                  try {
                      await vk.api.messages.send({
                          user_id: userId,
                          message: `‚ñ∂Ô∏è –£–í–ï–î–û–ú–õ–ï–ù–ò–ï:

‚ôªÔ∏è –ò–≥—Ä–æ–∫ @id${message.user.id} (${message.user.tag}) | vk.com/id${message.senderId} –≤—ã–∏–≥—Ä–∞–ª –î–æ–Ω–∞—Ç –≥–∏–≥–∞–Ω—Ç–∞ ü§ó`,
                          random_id: 0
                      });
                  } catch (sendError) {
                      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`, sendError);
                  }
              } else {

              }
          }
      }
      console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.');
  } catch (error) {
      console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ spoler:', error);
  }

    message.user.stars5 = true;

    return bot(`üî•–≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –£–ª—å—Ç—Ä–∞-–∫–µ–π—Å –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ –î–æ–Ω–∞—Ç–Ω–æ–≥–æ –≥–∏–≥–∞–Ω—Ç–∞ üí∞`,{
      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",
                payload: JSON.stringify({ command: `–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç—å 10` }),
                label: `üì¶ –û—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞`,
              },

              color: "positive",
            },
          ],
        ],
      }),
    });

  }
}
});

cmd.hear(/^(?:–∫–µ–π—Å 1)\s([0-9]+)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.args[1] < 0) return;

  if (message.user.inf == true) return bot(`–≤—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`)

  message.args[1] = Number(message.args[1])

  let s = message.args[1] * 20000000

  s = Number(s)

  if (message.user.balance < s) return bot(`—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî `)

  message.user.c1 += message.args[1]

  message.user.balance -= s

  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–û–±—ã—á–Ω—ã–π –ö–µ–π—Å¬ª (${utils.sp(message.args[1])} —à—Ç.) –∑–∞ ${utils.sp(s)} ${val1} üíµüí∞`)
}
});

cmd.hear(/^(?:–∫–µ–π—Å 2)\s([0-9]+)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.args[1] < 0) return;

  if (message.user.inf == true) return bot(`–≤—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`)

  message.args[1] = Number(message.args[1])

  let s = message.args[1] * 50000000

  s = Number(s)

  if (message.user.balance < s) return bot(` —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî `)

  message.user.c2 += message.args[1]

  message.user.balance -= s

  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–ó–æ–ª–æ—Ç–æ–π –ö–µ–π—Å¬ª (${utils.sp(message.args[1])} —à—Ç.) –∑–∞ ${utils.sp(s)} ${val1} üíµüí∞`)
}
});

cmd.hear(/^(?:–∫–µ–π—Å 3)\s([0-9]+)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.args[1] < 0) return;

  if (message.user.inf == true) return bot(`–≤—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`)

  message.args[1] = Number(message.args[1])

  let s = message.args[1] * 150

  s = Number(s)

  if (message.user.rub < s) return bot(`—É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî `)

  message.user.c3 += message.args[1]

  message.user.rub -= s;

  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–î–æ–Ω–∞—Ç –ö–µ–π—Å¬ª (${utils.sp(message.args[1])} —à—Ç.) –∑–∞ ${utils.sp(s)} ${val2} üíµüí∞`)
}
});


cmd.hear(/^(?:–∫–µ–π—Å 1|üóÇ –û–±—ã—á–Ω—ã–π –∫–µ–π—Å)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {
  if (message.user.balance < 20000000) return bot(` —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî `)

  if (message.user.inf == true) return bot(`–í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`)

  message.user.c1 += 1

  message.user.balance -= 520000000

  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–û–±—ã—á–Ω—ã–π –ö–µ–π—Å¬ª (1 —à—Ç.) üì¶üí∞`)
}
});

cmd.hear(/^(?:–∫–µ–π—Å 2|üóÇ –ó–æ—Ç–æ–ª–æ—Ç–æ–π –∫–µ–π—Å)$/i, async (message, bot) => {

    if (!message.isChat || message.chat.type === 1) {
  if (message.user.balance < 100000000) return bot(`—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî`)
  if (message.user.inf == true) return bot(`–í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`)
  message.user.c2 += 1
  message.user.balance -= 100000000
  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–ó–æ–ª–æ—Ç–æ–π –ö–µ–π—Å¬ª (1 —à—Ç.) üì¶üí∞`)
}
});

cmd.hear(/^(?:–∫–µ–π—Å 3|üóÇ –î–æ–Ω–∞—Ç –∫–µ–π—Å)$/i, async (message, bot) => {

    if (!message.isChat || message.chat.type === 1) {

  if (message.user.rub < 250) return bot(` —É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ üòî `)

  message.user.c3 += 1

  message.user.rub -= 250

  return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´–î–æ–Ω–∞—Ç –ö–µ–π—Å¬ª (1 —à—Ç.) üì¶üí∞`)
}

});



cmd.hear(/^(?:–ü–æ—Å—ã–ª–∫–∏|üì¶ –°–ø–∏—Å–æ–∫ –ø–æ—Å—ã–ª–æ–∫|üì¶–ü–æ—Å—ã–ª–∫–∏|üì¶ –ü–æ—Å—ã–ª–∫–∞)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  if (typeof message.user.possilka1 != "number") message.user.possilka1 = 0;

  if (typeof message.user.possilka2 != "number") message.user.possilka2 = 0;

  if (typeof message.user.possilka3 != "number") message.user.possilka3 = 0;

  let text = `–í–∞—à–∏ –ø–æ—Å—ã–ª–∫–∏:`;

  if (message.user.possilka1 > 0) {

    text += `üíµ 1. –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞: (${utils.sp(message.user.possilka1)} —à—Ç.)`;

  }

  if (message.user.possilka2 > 0) {

    text += `üì© 2. –≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞: (${utils.sp(message.user.possilka2)} —à—Ç.)`;

  }

  if (message.user.possilka3 > 0) {

    text += `üîÆ 3. –ü—Ä–µ–º–∏—É–º –ø–æ—Å—ã–ª–∫–∞: (${utils.sp(message.user.possilka3)} —à—Ç.)`;

  }



  return bot(`–ü–æ—Å—ã–ª–∫–∏:

üì¶ 1. –î–µ–Ω–µ–∂–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ ‚Äî 250 –ß–∞–∫–æ–†—É–± [15 rub]
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 1.000.000 –¥–æ 90.000.000 –≤–∏—Ä—Çüíµ
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì¶ 2. –≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ - 1.000 –ß–∞–∫–æ–†—É–± [50 rub]
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 1.000.000 –¥–æ 90.000.000 –≤–∏—Ä—Çüíµ
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 1 —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–æ 100 —Ä–µ–π—Ç–∏–Ω–≥–∞üëë
üõë –í—ã–ø–∞–¥–∞–µ—Ç –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–º–µ—Å—Ç–µ!
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì¶ 3. –ü—Ä–µ–º–∏—É–º –ø–æ—Å—ã–ª–∫–∞ - 5.000 –ß–∞–∫–æ–†—É–± [100 rub]
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 1.000.000 –¥–æ 100.000.000 –≤–∏—Ä—Çüíµ
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 1.000 –¥–æ 100.000 ${val4} üëë
‚ûñ –ü–∞–¥–∞–µ—Ç: –æ—Ç 500 –ß–∞–∫–æ–†—É–± –¥–æ 10.000 –ß–∞–∫–æ–†—É–±‚ÅâÔ∏è
üõë –í—ã–ø–∞–¥–∞–µ—Ç —Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–º–µ—Å—Ç–µ!
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìÇ –û—Ç–∫—Ä—ã—Ç—å: –ü–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å [–Ω–æ–º–µ—Ä]
üõí –ü–æ–∫—É–ø–∫–∞ –∑–∞ –ß–∞–∫–æ–†—É–±: –ß–∞–∫–æ–†—É–± [17/18/19]
üîπ –ü–æ–∫—É–ø–∫–∞ –∑–∞ –¥–æ–Ω–∞—Ç-—Ä—É–±–ª–∏: ¬´–î–æ–Ω–∞—Ç¬ª

${text}`);
}
});



cmd.hear(/^(?:–ü–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 1)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  if (message.user.possilka1 < 1) return bot(`üõë–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏.`);

  message.user.possilka1 -= 1;

  let t = utils.random(1, 90);

  message.user.balance += t * 1000000;

  return bot(`–î–µ–Ω–µ–∂–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!\n\n‚úÖ ‚ûñ –í–∞–º –≤—ã–ø–∞–ª–æ: ${utils.sp(t * 0)} ${val1}`);

}
});

cmd.hear(/^(?:–ü–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 2)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  if (message.user.possilka2 < 1) return bot(`üõë–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏.`)

  message.user.possilka2 -= 1;

  let t = utils.random(1, 90);

  let t1 = utils.random(1, 100);

  message.user.balance += t * 1000000;

  message.user.rating += t1 * 1;

  return bot(`–≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!\n\n‚úÖ ‚ûñ –í–∞–º –≤—ã–ø–∞–ª–æ:\nüí∞ –î–µ–Ω—å–≥–∏: ${utils.sp(t)} ${val1}\nüëë –†–µ–π—Ç–∏–Ω–≥: ${utils.sp(t1)}`);


}
});

cmd.hear(/^(?:–ü–æ—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å 3)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  if (message.user.possilka3 < 1) return bot(`üõë–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ—Å—ã–ª–∫–∏.`)

  message.user.possilka3 -= 1;

  let t = utils.random(1, 100);

  let t1 = utils.random(1000, 100000);

  let t2 = utils.random(1, 10);

  message.user.balance += t * 1000000;

  message.user.balance2 += t1 * 1;

  message.user.rub += t2 * 500;

  return bot(`–≠–ª–∏—Ç–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!\n\n‚úÖ ‚ûñ –í–∞–º –≤—ã–ø–∞–ª–æ:\nüí∞ –î–µ–Ω—å–≥–∏: ${utils.sp(t)} ${val1}\nüëë ${val4}: ${utils.sp(t1)}\n‚ÅâÔ∏è ${val2}: ${utils.sp(t2)}`);
}
});

let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

module.exports = commands;
