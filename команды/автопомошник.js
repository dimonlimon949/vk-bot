let utils = require('../utils.js')
const fs = require('fs'); 
let chats = require('../database/chats.json')
let double = require('../database/users.json')
let botinfo = require('../database/botinfo.json')
let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let phones = require('../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')

const commands = [];

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; 
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; 
  }
}

function getToken3() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–∞–ª—é—Ç:', error);
    return null;
  }
}

const tokenData = getToken();
const tokenData3 = getToken3(); 

const chatlogi = tokenData?.chatlogi; 
const spoler = tokenData?.spoler;
const val4 = tokenData3?.val4 || "$"; // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const val1 = tokenData3?.val1 || "‚Ç¨"; // –≤—Ç–æ—Ä–∞—è –≤–∞–ª—é—Ç–∞

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
const userNotificationState = new Map();

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getOreAdvice
function getOreAdvice(user, botinfo) {
    const advice = [];
    const oreButtons = []; // –ù–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    
    const oreChecks = [
        { condition: user.ruds?.plazma > 0 && botinfo.kursplazma > 1400000, key: 'ore_plazma', name: 'plazma', emoji: '‚ö°', label: '–ø–ª–∞–∑–º–∞' },
        { condition: user.ruds?.obsidian > 0 && botinfo.kursobsidian > 1100000, key: 'ore_obsidian', name: 'obsidian', emoji: 'üåë', label: '–æ–±—Å–∏–¥–∏–∞–Ω' },
        { condition: user.ruds?.materia > 0 && botinfo.kursmateria > 1000000, key: 'ore_materia', name: 'materia', emoji: 'üîÆ', label: '–º–∞—Ç–µ—Ä–∏—è' },
        { condition: user.ruds?.almaz > 0 && botinfo.kursalmaz > 700000, key: 'ore_almaz', name: 'almaz', emoji: 'üíé', label: '–∞–ª–º–∞–∑' },
        { condition: user.ruds?.zoloto > 0 && botinfo.kurszoloto > 300000, key: 'ore_zoloto', name: 'zoloto', emoji: 'üü®', label: '–∑–æ–ª–æ—Ç–æ' },
        { condition: user.ruds?.zhelezo > 0 && botinfo.kurszhelezo > 100000, key: 'ore_zhelezo', name: 'zhelezo', emoji: '‚öôÔ∏è', label: '–∂–µ–ª–µ–∑–æ' }
    ];

    oreChecks.forEach(check => {
        if (check.condition) {
            const amount = user.ruds[check.name] || 0;
            const price = botinfo[`kurs${check.name}`] || 0;
            advice.push(`${check.emoji} –ü—Ä–æ–¥–∞—Ç—å ${check.label} (${amount} —à—Ç. –ø–æ ${utils.sp(price)} ${val1}) ‚Üí –ø—Ä–æ–¥–∞—Ç—å ${check.label}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            oreButtons.push({
                emoji: check.emoji,
                name: check.label,
                command: `–ø—Ä–æ–¥–∞—Ç—å ${check.label}`
            });
        }
    });

    return { advice, oreButtons };
}



cmd.hear(/^(?:—Å–∫—É—á–Ω–æ|—Å–∫—É–∫–∞|—á–µ–º –∑–∞–Ω—è—Ç—å—Å—è|—Ö–µ–ª–ø–º–∏|—è –∑–∞–±—ã–ª|–∏–Ω—Ñ–æ –º–Ω–µ)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let text = `ü§î –¢–µ–±–µ —Å–∫—É—á–Ω–æ? –î–∞–≤–∞–π —è –ø–æ–¥—Å–∫–∞–∂—É, —á–µ–º –º–æ–∂–Ω–æ –∑–∞–Ω—è—Ç—å—Å—è!\n\n`;
    
    const advice = [];
    const now = Date.now();
    
    // –ú–∞—Å—Å–∏–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8)
    const keyboardButtons = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
    const bonusTypes = [
      { timer: 'bonus', available: true, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å', cooldown: 3600000, command: '–±–æ–Ω—É—Å' },
      { timer: 'vipbonus', available: message.user.settings?.vip, name: 'VIP –±–æ–Ω—É—Å', cooldown: 86400000, command: '–≤–∏–ø –±–æ–Ω—É—Å' },
      { timer: 'prembonus', available: message.user.settings?.premium, name: 'PREMIUM –±–æ–Ω—É—Å', cooldown: 86400000, command: '–ø—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å' },
      { timer: 'titanbonus', available: message.user.settings?.titan, name: 'TITAN –±–æ–Ω—É—Å', cooldown: 86400000, command: '—Ç–∏—Ç–∞–Ω –±–æ–Ω—É—Å' },
      { timer: 'imperatorbonus', available: message.user.settings?.imperator, name: 'IMPERATOR –±–æ–Ω—É—Å', cooldown: 86400000, command: '–∏–º–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–Ω—É—Å' }
    ];
    
    let hasAvailableBonus = false;
    bonusTypes.forEach(bonus => {
      if (bonus.available && (!message.user.timers?.[bonus.timer] || message.user.timers[bonus.timer] <= now)) {
        hasAvailableBonus = true;
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –±–æ–Ω—É—Å–∞
        if (keyboardButtons.length < 8) {
          keyboardButtons.push({
            action: {
              type: "text",
              payload: JSON.stringify({ command: "–±–æ–Ω—É—Å" }),
              label: `üéÅ –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å`
            },
            color: "positive"
          });
        }
      }
    });
    
    if (hasAvailableBonus) {
      advice.push(`üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å (–¥–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å!) ‚Üí –±–æ–Ω—É—Å`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–µ–π—Å–æ–≤
    const caseTypes = ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16'];
    let hasCases = false;
    
    caseTypes.forEach(caseType => {
      if (message.user[caseType] > 0) {
        hasCases = true;
      }
    });
    
    if (hasCases && keyboardButtons.length < 8) {
      advice.push(`üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã ‚Üí –∫–µ–π—Å—ã`);
      keyboardButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: "–∫–µ–π—Å—ã" }),
          label: "üì¶ –ö–µ–π—Å—ã"
        },
        color: "secondary"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–µ
    if (message.user.transport?.car && message.user.scar?.gontime <= now && keyboardButtons.length < 8) {
      advice.push(`üèÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ ‚Üí –≥–æ–Ω–∫–∞`);
      keyboardButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: "–≥–æ–Ω–∫–∞" }),
          label: "üèÅ –ì–æ–Ω–∫–∞"
        },
        color: "primary"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –Ω–∞ —Ñ–µ—Ä–º–µ
    if (message.user.misc?.farm && message.user.farm_btc > 0 && keyboardButtons.length < 8) {
      let btc_ = message.user.farm_btc * (message.user.misc?.farm_count || 1);
      if (message.user.farm_count >= 10000000) {
        btc_ = Math.floor(btc_ / 2);
      }
      advice.push(`üí∞ –°–Ω—è—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã —Å —Ñ–µ—Ä–º—ã (${utils.sp(btc_)} ‚Çø –¥–æ—Å—Ç—É–ø–Ω–æ!) ‚Üí —Ñ–µ—Ä–º–∞`);
      keyboardButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: "—Ñ–µ—Ä–º–∞" }),
          label: `üí∞ –§–µ—Ä–º–∞`
        },
        color: "positive"
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –∏–º—É—â–µ—Å—Ç–≤–∞
    const rentActions = [
      { condition: message.user.realty?.home && message.user.arend?.dom <= now, 
        emoji: 'üè†', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º', 
        amount: homes[message.user.realty?.home - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.transport?.yacht && message.user.arend?.yaxta <= now, 
        emoji: 'üõ•Ô∏è', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É', 
        amount: yachts[message.user.transport?.yacht - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.minertool && message.user.arend?.instrm <= now, 
        emoji: '‚õèÔ∏è', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', 
        amount: minertool[message.user.minertool - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.misc?.computer && message.user.arend?.pk <= now, 
        emoji: 'üíª', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø', 
        amount: computers[message.user.misc?.computer - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.realty?.apartment && message.user.arend?.kvar <= now, 
        emoji: 'üè¢', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É', 
        amount: apartments[message.user.realty?.apartment - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.misc?.phone && message.user.arend?.tel <= now, 
        emoji: 'üì±', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω', 
        amount: phones[message.user.misc?.phone - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.transport?.airplane && message.user.arend?.sam <= now, 
        emoji: 'üõ©Ô∏è', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç', 
        amount: airplanes[message.user.transport?.airplane - 1]?.cost * 0.02 || 0 },
      
      { condition: message.user.transport?.helicopter && message.user.arend?.vert <= now, 
        emoji: 'üöÅ', name: '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç', command: '–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç', 
        amount: helicopters[message.user.transport?.helicopter - 1]?.cost * 0.02 || 0 }
    ];
    
    rentActions.forEach(rent => {
      if (rent.condition && keyboardButtons.length < 8) {
        const rentAmount = Math.floor(rent.amount);
        advice.push(`${rent.emoji} ${rent.name} (+${utils.sp(rentAmount)} ${val1}) ‚Üí ${rent.command}`);
        keyboardButtons.push({
          action: {
            type: "text",
            payload: JSON.stringify({ command: rent.command }),
            label: `${rent.emoji} ${rent.name.split(' ')[0]}`
          },
          color: "secondary"
        });
      }
    });


    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É–¥
const oreResult = getOreAdvice(message.user, botinfo);
if (oreResult.advice.length > 0) {
    advice.push(...oreResult.advice);
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Ä—É–¥—ã
    oreResult.oreButtons.forEach(oreBtn => {
        if (keyboardButtons.length < 8) {
            keyboardButtons.push({
                action: {
                    type: "text",
                    payload: JSON.stringify({ command: oreBtn.command }),
                    label: `${oreBtn.emoji} ${oreBtn.name}`
                },
                color: "secondary"
            });
        }
    });
}
    

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç—ã –≤ —Ç–µ–∫—Å—Ç
    if (advice.length > 0) {
      text += `üéØ –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:\n`;
      advice.forEach((item, index) => {
        text += `${index + 1}. ${item}\n`;
      });
      
      text += `\nüí° –ü—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ ‚Üí`;
    } else {
      const randomPhrases = [
        `üéÆ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥!`,
        `üé≤ –ò–≥—Ä–∞–π—Ç–µ –≤ DOUBLE –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!`,
        `üéÅ –ó–∞–±–∏—Ä–∞–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –≤ –±–µ—Å–µ–¥–µ!`,
        `üí± –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ –≤–∞–ª—é—Ç—ã –Ω–∞ –±–∏—Ä–∂–µ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏!`,
        `üèÜ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö!`,
        `üõí –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ —Ä—ã–Ω–∫–µ!`,
        `ü§ù –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏!`,
        `‚ö° –ü–æ–≤—ã—à–∞–π—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!`
      ];
      
      const randomPhrase = randomPhrases[Math.floor(Math.random() * randomPhrases.length)];
      text += `üìù –ü–æ–∫–∞ –æ—Å–æ–±—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ—Ç. ${randomPhrase}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
      if (keyboardButtons.length < 8) {
        keyboardButtons.push({
          action: {
            type: "text",
            payload: JSON.stringify({ command: "–ø–æ–º–æ—â—å" }),
            label: "‚ùì –ü–æ–º–æ—â—å"
          },
          color: "primary"
        });
      }
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
    if (keyboardButtons.length > 0) {
      const keyboard = {
        inline: true,
        buttons: [keyboardButtons.slice(0, 8)] // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 8 –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
      };
      
      await bot(text, {
        keyboard: JSON.stringify(keyboard)
      });
    } else {
      await bot(text);
    }
  }
});

// –°–∏—Å—Ç–µ–º–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
setInterval(async () => {
  try {
    const users = require('../database/users.json')
    const botinfo = require('../database/botinfo.json')
    
    for (const user of users) {
      if (!user.id) continue;
      
      const currentState = [];
      const now = Date.now();
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞
      const bonusTypes = [
        { timer: 'bonus', available: true, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å', cooldown: 3600000 },
        { timer: 'vipbonus', available: user.settings?.vip, name: 'VIP –±–æ–Ω—É—Å', cooldown: 86400000 },
        { timer: 'prembonus', available: user.settings?.premium, name: 'PREMIUM –±–æ–Ω—É—Å', cooldown: 86400000 },
        { timer: 'titanbonus', available: user.settings?.titan, name: 'TITAN –±–æ–Ω—É—Å', cooldown: 86400000 },
        { timer: 'imperatorbonus', available: user.settings?.imperator, name: 'IMPERATOR –±–æ–Ω—É—Å', cooldown: 86400000 }
      ];
      
      let hasAvailableBonus = false;
      bonusTypes.forEach(bonus => {
        if (bonus.available && (!user.timers?.[bonus.timer] || user.timers[bonus.timer] <= now)) {
          hasAvailableBonus = true;
          currentState.push(`bonus_${bonus.timer}`);
        }
      });
      
      if (hasAvailableBonus) {
        currentState.push('has_bonus');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–µ–π—Å–æ–≤
      const caseTypes = ['c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'c10', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16'];
      let hasCases = false;
      
      caseTypes.forEach(caseType => {
        if (user[caseType] > 0) {
          hasCases = true;
          currentState.push(`case_${caseType}_${user[caseType]}`);
        }
      });
      
      if (hasCases) {
        currentState.push('has_cases');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–Ω–∫–µ
      if (user.transport?.car && user.scar?.gontime <= now) {
        currentState.push('race_available');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –Ω–∞ —Ñ–µ—Ä–º–µ
      if (user.misc?.farm && user.farm_btc > 0) {
        let btc_ = user.farm_btc * (user.misc?.farm_count || 1);
        if (user.farm_count >= 10000000) {
          btc_ = Math.floor(btc_ / 2);
        }
        currentState.push(`farm_btc_${btc_}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã
      const rentChecks = [
        { condition: user.realty?.home && user.arend?.dom <= now, key: 'rent_home', type: 'home' },
        { condition: user.transport?.yacht && user.arend?.yaxta <= now, key: 'rent_yacht', type: 'yacht' },
        { condition: user.minertool && user.arend?.instrm <= now, key: 'rent_tools', type: 'tools' },
        { condition: user.misc?.computer && user.arend?.pk <= now, key: 'rent_computer', type: 'computer' },
        { condition: user.realty?.apartment && user.arend?.kvar <= now, key: 'rent_apartment', type: 'apartment' },
        { condition: user.misc?.phone && user.arend?.tel <= now, key: 'rent_phone', type: 'phone' },
        { condition: user.transport?.airplane && user.arend?.sam <= now, key: 'rent_airplane', type: 'airplane' },
        { condition: user.transport?.helicopter && user.arend?.vert <= now, key: 'rent_helicopter', type: 'helicopter' }
      ];
      
      rentChecks.forEach(check => {
        if (check.condition) {
          currentState.push(check.key);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤
      if (user.business2 && Array.isArray(user.business2)) {
        user.business2.forEach((biz, index) => {
          if (biz && biz.moneys > 0) {
            currentState.push(`business2_${index}_${biz.moneys}`);
          }
        });
      }
      
      if (user.business && Array.isArray(user.business)) {
        user.business.forEach((biz, index) => {
          if (biz && biz.moneys > 0) {
            currentState.push(`business_${index}_${biz.moneys}`);
          }
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—É–¥ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö
      const oreChecks = [
        { condition: user.ruds?.plazma > 0 && botinfo.kursplazma > 1400000, key: 'ore_plazma', name: 'plazma', label: '–ø–ª–∞–∑–º–∞' },
        { condition: user.ruds?.obsidian > 0 && botinfo.kursobsidian > 1100000, key: 'ore_obsidian', name: 'obsidian', label: '–æ–±—Å–∏–¥–∏–∞–Ω' },
        { condition: user.ruds?.materia > 0 && botinfo.kursmateria > 1000000, key: 'ore_materia', name: 'materia', label: '–º–∞—Ç–µ—Ä–∏—è' },
        { condition: user.ruds?.almaz > 0 && botinfo.kursalmaz > 700000, key: 'ore_almaz', name: 'almaz', label: '–∞–ª–º–∞–∑' },
        { condition: user.ruds?.zoloto > 0 && botinfo.kurszoloto > 300000, key: 'ore_zoloto', name: 'zoloto', label: '–∑–æ–ª–æ—Ç–æ' },
        { condition: user.ruds?.zhelezo > 0 && botinfo.kurszhelezo > 100000, key: 'ore_zhelezo', name: 'zhelezo', label: '–∂–µ–ª–µ–∑–æ' }
      ];
      
      oreChecks.forEach(check => {
        if (check.condition) {
          currentState.push(check.key);
          currentState.push(`ore_${check.name}_${user.ruds[check.name]}`); // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        }
      });
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const previousState = userStates.get(user.id) || [];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let notificationState = userNotificationState.get(user.id) || {
        lastNotificationTime: 0,
        ignoreCount: 0,
        lastState: []
      };
      
      const threeHours = 3 * 3600000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
      const hasChanges = JSON.stringify(currentState) !== JSON.stringify(previousState);
      const shouldRemind = Date.now() - notificationState.lastNotificationTime >= threeHours;
      const hasActions = currentState.length > 0;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å
      if (hasActions && (hasChanges || shouldRemind)) {
        const advice = [];
        
        if (hasAvailableBonus) {
          advice.push(`üéÅ –ó–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å ‚Üí –±–æ–Ω—É—Å`);
        }
        
        if (hasCases) {
          advice.push(`üì¶ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã ‚Üí –∫–µ–π—Å—ã`);
        }
        
        if (user.transport?.car && user.scar?.gontime <= now) {
          advice.push(`üèÅ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –≥–æ–Ω–∫–µ ‚Üí –≥–æ–Ω–∫–∞`);
        }
        
        if (user.misc?.farm && user.farm_btc > 0) {
          let btc_ = user.farm_btc * (user.misc?.farm_count || 1);
          if (user.farm_count >= 10000000) {
            btc_ = Math.floor(btc_ / 2);
          }
          advice.push(`üí∞ –°–Ω—è—Ç—å –±–∏—Ç–∫–æ–∏–Ω—ã —Å —Ñ–µ—Ä–º—ã (${utils.sp(btc_)} ‚Çø) ‚Üí —Ñ–µ—Ä–º–∞`);
        }
        
        // –ê—Ä–µ–Ω–¥–∞
        rentChecks.forEach(check => {
          if (check.condition) {
            let rentAmount = 0;
            switch(check.type) {
              case 'home':
                rentAmount = Math.floor(homes[user.realty.home - 1]?.cost * 0.02 || 0);
                advice.push(`üè† –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º`);
                break;
              case 'yacht':
                rentAmount = Math.floor(yachts[user.transport.yacht - 1]?.cost * 0.02 || 0);
                advice.push(`üõ•Ô∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É`);
                break;
              case 'tools':
                rentAmount = Math.floor(minertool[user.minertool - 1]?.cost * 0.02 || 0);
                advice.push(`‚õèÔ∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`);
                break;
              case 'computer':
                rentAmount = Math.floor(computers[user.misc.computer - 1]?.cost * 0.02 || 0);
                advice.push(`üíª –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø`);
                break;
              case 'apartment':
                rentAmount = Math.floor(apartments[user.realty.apartment - 1]?.cost * 0.02 || 0);
                advice.push(`üè¢ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É`);
                break;
              case 'phone':
                rentAmount = Math.floor(phones[user.misc.phone - 1]?.cost * 0.02 || 0);
                advice.push(`üì± –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω`);
                break;
              case 'airplane':
                rentAmount = Math.floor(airplanes[user.transport.airplane - 1]?.cost * 0.02 || 0);
                advice.push(`üõ©Ô∏è –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç`);
                break;
              case 'helicopter':
                rentAmount = Math.floor(helicopters[user.transport.helicopter - 1]?.cost * 0.02 || 0);
                advice.push(`üöÅ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç (+${utils.sp(rentAmount)} ${val1}) ‚Üí –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç`);
                break;
            }
          }
        });
        
        // –ë–∏–∑–Ω–µ—Å—ã
        if (user.business2 && Array.isArray(user.business2)) {
          user.business2.forEach((biz, index) => {
            if (biz && biz.moneys > 0) {
              advice.push(`üè¢ –°–Ω—è—Ç—å —Å –±–∏–∑–Ω–µ—Å–∞ ${index + 1} (${utils.sp(biz.moneys)} ${val1}) ‚Üí –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å ${index + 1}`);
            }
          });
        }
        
        if (user.business && Array.isArray(user.business)) {
          user.business.forEach((biz, index) => {
            if (biz && biz.moneys > 0) {
              advice.push(`üè¢ –°–Ω—è—Ç—å —Å –±–∏–∑–Ω–µ—Å–∞ ${index + 1} (${utils.sp(biz.moneys)} ${val4}) ‚Üí –±–∏–∑–Ω–µ—Å —Å–Ω—è—Ç—å ${index + 1}`);
            }
          });
        }
        
        // –†—É–¥–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö
        oreChecks.forEach(check => {
          if (check.condition) {
            const amount = user.ruds[check.name] || 0;
            const price = botinfo[`kurs${check.name}`] || 0;
            let emoji = '‚õ∞Ô∏è';
            switch(check.name) {
              case 'plazma': emoji = '‚ö°'; break;
              case 'obsidian': emoji = 'üåë'; break;
              case 'materia': emoji = 'üîÆ'; break;
              case 'almaz': emoji = 'üíé'; break;
              case 'zoloto': emoji = 'üü®'; break;
              case 'zhelezo': emoji = '‚öôÔ∏è'; break;
            }
            advice.push(`${emoji} –ü—Ä–æ–¥–∞—Ç—å ${check.label} (${amount} —à—Ç. –ø–æ ${utils.sp(price)} ${val1}) ‚Üí –ø—Ä–æ–¥–∞—Ç—å ${check.label}`);
          }
        });
        
        if (advice.length > 0) {
          let notificationText = ``;
          
          if (hasChanges) {
            notificationText = `üîî –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –±–æ—Ç–µ!\n\n`;
            notificationState.ignoreCount = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö
          } else if (shouldRemind) {
            notificationText = `‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ!\n\n`;
            notificationState.ignoreCount++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
          }
          
          notificationText += `üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n`;
          
          const maxAdvice = 6;
          advice.slice(0, maxAdvice).forEach((item, index) => {
            notificationText += `${index + 1}. ${item}\n`;
          });
          
          if (advice.length > maxAdvice) {
            notificationText += `... –∏ –µ—â–µ ${advice.length - maxAdvice} –¥–µ–π—Å—Ç–≤–∏–π\n`;
          }
          
          notificationText += `\nüí° –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –ø–æ—Å–ª–µ ‚Üí`;
          
          try {
            await vk.api.messages.send({
              user_id: user.id,
              random_id: 0,
              message: notificationText,
              keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                  [{
                    "action": {
                      "type": "text",
                      "payload": JSON.stringify({ command: `—Å–∫—É—á–Ω–æ` }),
                      "label": `üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ`
                    },
                    "color": "positive"
                  }]
                ]
              })
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notificationState.lastNotificationTime = Date.now();
            notificationState.lastState = [...currentState];
            userNotificationState.set(user.id, notificationState);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', user.id, error);
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.set(user.id, currentState);
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
  }
}, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

module.exports = commands;