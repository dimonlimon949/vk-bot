let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const salka = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json';


cmd.hear(/^üõ†Ô∏è –î–∞–±–ª|–¥–∞–±–ª|–±–µ—Å–µ–¥—ã$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    try {
      if (!fs.existsSync(salka)) {
        console.error(`–§–∞–π–ª ${salka} –Ω–µ –Ω–∞–π–¥–µ–Ω!`);
        return bot(`üõ†Ô∏è –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Å—ã–ª–æ–∫ (${salka}) –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
      }


      fs.readFile(salka, 'utf8', (err, data) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:", err);
          return bot(`üõ†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${salka}. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
        }

        try {
          const links = JSON.parse(data);
          let responseText = 'üõ†Ô∏è –°—Å—ã–ª–∫–∏ c –±–æ—Ç–æ–º:\n';

          const isValidLink = (str) => str != null && str !== "";

          const {
            double: doubleLink,
            double2: double2Link,
            double3: double3Link,
            double4: double4Link,
            double5: double5Link,
            igra1: igra1Link,
            igra2: igra2Link,
            igra3: igra3Link,
          } = links;

          let hasLinks = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—å –æ–¥–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Å—Å—ã–ª–∫–∞

          if (isValidLink(doubleLink)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ DOUBLE: ${doubleLink}\n`;
            hasLinks = true;
          }
          if (isValidLink(double2Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ DOUBLE2: ${double2Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(double3Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ DOUBLE3: ${double3Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(double4Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ DOUBLE4: ${double4Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(double5Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ DOUBLE5: ${double5Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(igra1Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –±–µ—Å–µ–¥—É 1: ${igra1Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(igra2Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –±–µ—Å–µ–¥—É 2: ${igra2Link}\n`;
            hasLinks = true;
          }
          if (isValidLink(igra3Link)) {
            responseText += `‚Ä¢ –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –±–µ—Å–µ–¥—É 3: ${igra3Link}\n`;
            hasLinks = true;
          }

          // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          if (!hasLinks) {
            responseText = "üõ†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.";
          }

          return bot(responseText);

        } catch (parseError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", parseError);
          return bot(`üõ†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –≤ —Ñ–∞–π–ª–µ ${salka}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.`);
        }
      });

    } catch (error) {
      console.error("–û–±—â–∞—è –æ—à–∏–±–∫–∞:", error);
      return bot(`üõ†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
    }
  }
});


module.exports = commands;
