  let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')
let chats = require('../database/chats.json')
let log = require('../database/log.json')
let botinfo = require('../database/botinfo.json')
let clans = require('../database/clans.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const forbiddenTitles = [
  "–ë–∏–∑–Ω–µ—Å–º–µ–Ω", 
  "üî•Supportüî•",
  "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
  "–£–¥–∞–ª—ë–Ω–Ω—ã–π —Ç–∏—Ç—É–ª"









];

let cars = require('../spisok/–º–∞—à–∏–Ω—ã.js')
let trees = require('../spisok/–¥–µ—Ä–µ–≤—å—è.js')
let presidents = require("../database/presidents.json");


let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
let farms = require('../spisok/—Ñ–µ—Ä–º—ã.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')

let businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")
const phones = require("../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js")

let businesses = require("../spisok/business spisok.js")

const tokenData = getToken();

const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken4() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken2() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath2, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function getToken3() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData2 = getToken2(); 
const tokenData3 = getToken3(); 
const tokenData4 = getToken4(); 

const tokensFilePath5 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å—Å—ã–ª–∫–∏ —á–∞—Ç–æ–≤.json';

function getToken5() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath5, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData5 = getToken5(); 


let adminka = tokenData5.admin

const coaf = tokenData2.coaf
let val1 = tokenData3.val1 
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4


let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

const chatlogi = tokenData2.chatlogi;
const spoler = tokenData4;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 
const path = require('path');





cmd.hear(/^(?:–∫–æ–¥)$/i, async (message, bot) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  if (!hasPermission) return;

  const directoryPath = '../farewer';
  let totalLines = 0;
  let commands = [];

  const countLinesInFiles = (dir) => {
      let currentTotalLines = 0;

      const scanDirectory = (currentDir) => {
          fs.readdirSync(currentDir).forEach(file => {
              const filePath = path.join(currentDir, file);
              const stat = fs.statSync(filePath);

              if (stat.isDirectory()) {
                  scanDirectory(filePath);
              } else if (file.endsWith('.js') || file.endsWith('.json')) {
                  const data = fs.readFileSync(filePath, 'utf-8');
                  const lines = data.split('\n').length;
                  currentTotalLines += lines;

                  const regex = /cmd\.hear\(([^)]+)\)/g;
                  let match;
                  while ((match = regex.exec(data)) !== null) {
                      commands.push({
                          command: match[0],
                          file: filePath
                      });
                  }
              }
          });
      };

      scanDirectory(dir);
      return currentTotalLines;
  };

  try {
      totalLines = countLinesInFiles(directoryPath);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
      const commandCount = commands.length;
      const response = `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –∫–æ–¥–µ: ${utils.sp(totalLines)}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥: ${utils.sp(commandCount)}`;
      await bot(response);
  } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
      await bot('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.');
  }
});

cmd.hear(/^(?:–ø–æ–∫–∞–∂–∏ –∫–æ–º–∞–Ω–¥—ã)$/i, async (message, bot) => {

  const hasPermission = Object.values(spoler).includes(String(message.user.id));
  if (!hasPermission) return bot(`f`)

  const directoryPath = './–∫–æ–º–∞–Ω–¥—ã';
  let commands = [];

  const scanDirectory = (dir) => {
    fs.readdirSync(dir).forEach(file => {
      const filePath = path.join(dir, file);
      const stat = fs.statSync(filePath);
      if (stat.isDirectory()) {
        scanDirectory(filePath); // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      } else if (file.endsWith('.js')) {
        const content = fs.readFileSync(filePath, 'utf-8');
        const regex = /cmd\.hear\(([^)]+)\)/g; // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ cmd.hear
        let match;
        while ((match = regex.exec(content)) !== null) {
          commands.push({
            command: match[0],
            file: filePath
          });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
        const linkRegex = /(?:–∫–æ–ø–∞—Ç—å –ø–ª–∞–∑–º—É|‚õè –ö–æ–ø–∞—Ç—å –ø–ª–∞–∑–º—É) \(—Ñ–∞–π–ª: ([^)]+)\)/g;
        while ((match = linkRegex.exec(content)) !== null) {
          commands.push({
            command: match[0],
            file: filePath
          });
        }
      }
    });
  };

  try {
    scanDirectory(directoryPath);

    if (commands.length === 0) {
      await bot('–ö–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    } else {
      const chunkSize = 20; // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ (—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞ —Ä–∞–∑)
      for (let i = 0; i < commands.length; i += chunkSize) {
        const chunk = commands.slice(i, i + chunkSize); // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥
        const response = chunk.map((cmd, index) => `${i + index + 1}. ${cmd.command}`).join('\n');
        await bot(response); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—Ü–∏—é –∫–æ–º–∞–Ω–¥
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', error);
     try {
         await bot('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.'); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
      } catch (sendError) {
         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:", sendError);
      }

  }
});
module.exports = commands;
