let utils = require('../utils.js')

const commands = [];


const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


const badWordsList = [
  '–ø–∏—Å—å–∫–∞', '—Ö—É–π', '–±–ª—è', '—Å—É–∫–∞', '–µ–±–ª–∞–Ω', '–ø–∏–¥–æ—Ä', '–º—É–¥–∞–∫' 
];

cmd.hear(/^(?:!–Ω–∏–∫|–Ω–∏–∫)\s(.*)$/i, async (message, bot) => {

  if (message.args[1] === undefined || message.args[1].trim() === "") {
    return bot('üö´ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.');
  }

  const newNickname = message.args[1].trim();

  if (newNickname.length > 40) {
    return bot('üö´ –ú–∞–∫—Å–∏–º—É–º 40 —Å–∏–º–≤–æ–ª–æ–≤.');
  }

  if (newNickname.length < 3) {
    return bot('üö´ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ 3 —Å–∏–º–≤–æ–ª–∞.');
  }

  if (
    newNickname.length > message.user.limit.nicklimit &&
    newNickname.length > message.user.nicklimit
  ) {
    return bot(`üö´ –í—ã —É–∫–∞–∑–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –Ω–∏–∫.`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç (–±–µ–∑ –º–æ–¥—É–ª—è)
  const lowerCaseNickname = newNickname.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  for (const badWord of badWordsList) {
    if (lowerCaseNickname.includes(badWord)) {
      return bot('üö´ –ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É –≤ –Ω–∏–∫–µ.');
    }
  }

  // –†–∞–∑—Ä–µ—à–∞–µ–º –º–µ–Ω—è—Ç—å –Ω–∏–∫ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
  message.user.tag = newNickname;
  let smilenick = utils.pick(['üòØ', 'üôÇ', '‚ò∫']);
  let ggtext = utils.pick(['—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –Ω–∏–∫!', '–∫—Ä—É—Ç–æ–π –Ω–∏–∫!', '–∫–ª–∞—Å—Å–Ω—ã–π –Ω–∏–∫!', '–ø—Ä–∏–∫–æ–ª—å–Ω—ã–π –Ω–∏–∫!', '—Ç–∞–∫–∏—Ö –Ω–∏–∫–æ–≤ —è –µ—â—ë –Ω–µ –≤–∏–¥–µ–ª!']);
  return bot(`${ggtext} ${smilenick}`);
});
  



module.exports = commands;
