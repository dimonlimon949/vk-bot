let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

let trees = require('../spisok/–¥–µ—Ä–µ–≤—å—è.js')

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

cmd.hear(/^(?:–¥–µ—Ä–µ–≤—å—è|üå≥ –î–µ—Ä–µ–≤—å—è)\s?(\d+)?$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
      // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –¥–µ—Ä–µ–≤—å–µ–≤
      if (!message.args[1]) {
          return bot(`–î–µ—Ä–µ–≤—å—è:

üå≥ 1. –û–¥–∏–Ω–æ–∫–æ–µ –¥–µ—Ä–µ–≤–æ: 1 –ª–∏—Å—Ç–∏–∫/—á–∞—Å (${utils.sp(trees.find((x) => x.id === Number(1)).cost)} ${val1})
üå≥ 2. –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤: 3 –ª–∏—Å—Ç–∏–∫–∞/—á–∞—Å (${utils.sp(trees.find((x) => x.id === Number(2)).cost)} ${val1})
üå≥ 3. –õ–µ—Å: 5 –ª–∏—Å—Ç–∏–∫–æ–≤/—á–∞—Å (${utils.sp(trees.find((x) => x.id === Number(3)).cost)} ${val1})

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–î–µ—Ä–µ–≤—å—è [–Ω–æ–º–µ—Ä]¬ª
`, {
              keyboard: JSON.stringify({
                  inline: true,
                  buttons: [
                      [
                          {
                              action: {
                                  type: "text",
                                  payload: JSON.stringify({ command: "–î–µ—Ä–µ–≤—å—è 1" }),
                                  label: "–î–µ—Ä–µ–≤–æ 1",
                              },
                              color: message.user.tree === 1 ? "secondary" : (message.user.balance >= trees[0].cost ? "positive" : "negative"),
                          },
                          {
                              action: {
                                  type: "text",
                                  payload: JSON.stringify({ command: "–î–µ—Ä–µ–≤—å—è 2" }),
                                  label: "–î–µ—Ä–µ–≤–æ 2",
                              },
                              color: message.user.tree === 2 ? "secondary" : (message.user.balance >= trees[1].cost ? "positive" : "negative"),
                          },
                      ],
                      [
                          {
                              action: {
                                  type: "text",
                                  payload: JSON.stringify({ command: "–î–µ—Ä–µ–≤—å—è 3" }),
                                  label: "–î–µ—Ä–µ–≤–æ 3",
                              },
                              color: message.user.tree === 3 ? "secondary" : (message.user.balance >= trees[2].cost ? "positive" : "negative"),
                          },
                      ],
                  ],
              }),
          });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä –¥–µ—Ä–µ–≤–∞
      const treeId = Number(message.args[1]);
      if (treeId < 1 || treeId > 3) return bot("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –¥–µ—Ä–µ–≤–∞");

      const selectedTree = trees.find((x) => x.id === treeId);
      if (!selectedTree) return;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –¥–µ—Ä–µ–≤–æ
if (message.user.tree !== 0) {
  return bot(
    `–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –î–µ—Ä–µ–≤–æ (${trees[message.user.tree - 1].name})! üôå\nüõí –ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ü—Ä–æ–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ¬ª`,
    {
      keyboard: JSON.stringify({
        inline: true,
        buttons: [
          [{
            action: {
              type: "text",
              payload: JSON.stringify({ command: "–ø—Ä–æ–¥–∞—Ç—å –¥–µ—Ä–µ–≤–æ" }),
              label: "‚ùé –ü—Ä–æ–¥–∞—Ç—å"
            },
            color: "primary"
          }]
        ]
      })
    }
  );
}

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (message.user.balance < selectedTree.cost) {
          return bot(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!`);
      } else {
          // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É
          message.user.balance -= selectedTree.cost;
          message.user.irrigation = 100; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –æ—Ä–æ—à–µ–Ω–∏—è
          message.user.tree = selectedTree.id; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ø–ª–µ–Ω–Ω–æ–µ –¥–µ—Ä–µ–≤–æ

          return bot(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ ¬´${selectedTree.name}¬ª –∑–∞ ${utils.sp(selectedTree.cost)}$`);
      }
  }
});

cmd.hear(
  /^(?:–¥–µ—Ä–µ–≤–æ|üå≤ –î–µ—Ä–µ–≤–æ )$/i,
  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {

  if (!message.user.tree)
    return bot(`—É –í–∞—Å –Ω–µ—Ç –¥–µ—Ä–µ–≤–∞!

–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ—Ä–µ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–î–µ—Ä–µ–≤—å—è¬ª`);

  const biz = trees.find((x) => x.id === message.user.tree);

  const lvlcash = biz.earn; 

  return bot(
    `–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–º –¥–µ—Ä–µ–≤–µ ¬´${biz.name}¬ª:

üçÇ –ü–∞–¥–∞–µ—Ç ${utils.sp(lvlcash)} –ª–∏—Å—Ç./—á–∞—Å
üçÉ –£–ø–∞–ª–æ ${utils.sp(message.user.leafpribil)}
üíß –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–¥—ã: ${utils.sp(message.user.irrigation)}%
`,
    {
      attachment: biz.photo,

      keyboard: JSON.stringify({
        inline: true,

        buttons: [
          [
            {
              action: {
                type: "text",

                payload: "{}",

                label: "üöø –î–µ—Ä–µ–≤–æ –ø–æ–ª–∏—Ç—å",
              },

              color: "positive",
            },

            {
              action: {
                type: "text",

                payload: "{}",

                label: "‚ñ∂Ô∏è –î–µ—Ä–µ–≤–æ —Å–æ–±—Ä–∞—Ç—å",
              },

              color: "positive",
            },
          ],

          [
            {
              action: {
                type: "text",

                payload: "{}",

                label: "üå≤ –î–µ—Ä–µ–≤–æ –ø–æ–º–æ—â—å",
              },

              color: "positive",
            },
          ],
        ],
      }),
    }
  );
}
});
cmd.hear(
  /^(?:–¥–µ—Ä–µ–≤–æ –ø–æ–º–æ—â—å|–¥–µ—Ä–µ–≤—å—è –ø–æ–º–æ—â—å|üå≤ –î–µ—Ä–µ–≤–æ –ø–æ–º–æ—â—å)$/i,
  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
    return message.send(`–ø–æ–º–æ—â—å –ø–æ –¥–µ—Ä–µ–≤—É:

‚úÖ –ü–æ–ª–∏—Ç—å –¥–µ—Ä–µ–≤–æ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –∑–∞—Å–æ—Ö–ª–æ: –ö–æ–º–∞–Ω–¥–∞ ¬´–î–µ—Ä–µ–≤–æ –ø–æ–ª–∏—Ç—å¬ª
üçÉ –°–æ–±—Ä–∞—Ç—å –ª–∏—Å—Ç–∏–∫–∏ —Å –¥–µ—Ä–µ–≤–∞: –ö–æ–º–∞–Ω–¥–∞ ¬´–î–µ—Ä–µ–≤–æ —Å–æ–±—Ä–∞—Ç—å¬ª`);
  }
}
);

cmd.hear(/^(?:–¥–µ—Ä–µ–≤–æ|‚ñ∂Ô∏è –î–µ—Ä–µ–≤–æ)\s—Å–æ–±—Ä–∞—Ç—å$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  utils.pick([`üå∑`, `üå∏`, `üåπ`, `üå∫`, `üåº`, `üíê`, `‚ù§Ô∏è`, `üíì`, `üíï`]);

  if (!message.user.tree)
    return bot(
      `–£ –≤–∞—Å –Ω–µ—Ç –¥–µ—Ä–µ–≤–∞! –ú–æ–∂–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É ¬´–î–µ—Ä–µ–≤—å—è¬ª üå≤`
    );

  if (!message.user.leafpribil)
    return bot(`–£ —ç—Ç–æ–≥–æ –¥–µ—Ä–µ–≤–∞ –µ—â—ë –Ω–µ—Ç—É –æ–ø–∞–≤—à–∏—Ö –ª–∏—Å—Ç–∏–∫–æ–≤! ‚ùåüò¢`);

  const biz_balance = message.user.leafpribil;

  message.user.leaf += message.user.leafpribil;

  message.user.leafpribil = 0;

  return bot(
    `–≤—ã —Å–æ–±—Ä–∞–ª–∏ —Å–æ —Å–≤–æ–µ–≥–æ –¥–µ—Ä–µ–≤–∞ ${utils.sp(biz_balance)} –æ–ø–∞–≤—à–∏—Ö –ª–∏—Å—Ç–∏–∫–æ–≤ üçÉ`
  );
}
});

cmd.hear(/^(?:–¥–µ—Ä–µ–≤–æ –ø–æ–ª–∏—Ç—å|üöø –î–µ—Ä–µ–≤–æ –ø–æ–ª–∏—Ç—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  if (message.user.tree < 1)
    return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–µ—Ä–µ–≤–∞.
‚ùì –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ "–î–µ—Ä–µ–≤—å—è"`);

  if (message.user.irrigation >= 100) return bot(`–¥–µ—Ä–µ–≤—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª–∏–≤!`);

  if (message.user.balance < 10000000) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥. ‚ÅâÔ∏è`);
  else {
    message.user.irrigation = 100;

    message.user.balance -= 10000000;

    bot(
      `–¥–µ—Ä–µ–≤–æ —É—Å–ø–µ—à–Ω–æ –±—ã–ª–æ –ø–æ–ª–∏—Ç–æ!\n\n–í—ã –ø–æ–ª–∏–ª–∏ –¥–µ—Ä–µ–≤–æ ¬´${trees[message.user.tree - 1].name
      }¬ª –∑–∞ 10.000.000$ üíß`
    );
  }
}
});

cmd.hear(/^(?:üçπ –ù–∞–ø–∏—Ç–∫–∏|–ù–∞–ø–∏—Ç–∫–∏)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type == 1) {
    return bot(`–ù–∞–ø–∏—Ç–∫–∏:

üî∏ 1. –ß–∞–π (2 –ª–∏—Å—Ç–∏–∫–∞)
üî∏ 2. –ö–æ—Ñ–µ (12 –ª–∏—Å—Ç–∏–∫–æ–≤)
üî∏ 3. –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫ (26 –ª–∏—Å—Ç–∏–∫–æ–≤)
üî∏ 4. –û—Ç–≤–∞—Ä —Ç—Ä–∞–≤ (56 –ª–∏—Å—Ç–∏–∫–æ–≤)
üî∏ 5. –ß–µ—Ä–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å (120 –ª–∏—Å—Ç–∏–∫–æ–≤)
üî∏ 6. –ö–∞–ø–ª—è –∑–µ–ª—å—è —ç–Ω–µ—Ä–≥–∏–∏ (150 –ª–∏—Å—Ç–∏–∫–æ–≤)
üî∏ 7. –ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–µ–ª—å–µ —ç–Ω–µ—Ä–≥–∏–∏ (2000 –ª–∏—Å—Ç–∏–∫–æ–≤)

üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ù–∞–ø–∏—Ç–∫–∏ [–Ω–æ–º–µ—Ä]¬ª`);
  }
});

cmd.hear(/^(?:–ù–∞–ø–∏—Ç–∫–∏|üçπ –Ω–∞–ø–∏—Ç–∫–∏)\s?([0-9]+)?$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  const drinks = [
    { id: 1, name: '–ß–∞–π', cost: 2, energy: 1 },
    { id: 2, name: '–ö–æ—Ñ–µ', cost: 12, energy: 5 },
    { id: 3, name: '–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫', cost: 26, energy: 10 },
    { id: 4, name: '–û—Ç–≤–∞—Ä —Ç—Ä–∞–≤', cost: 56, energy: 20 },
    { id: 5, name: '–ß—ë—Ä–Ω–∞—è –∂–∏–¥–∫–æ—Å—Ç—å', cost: 120, energy: 40 },
    { id: 6, name: '–ö–∞–ø–ª—è –∑–µ–ª—å—è', cost: 150, energy: 50 },
    { id: 7, name: '–ó–µ–ª—å–µ', cost: 2000, energy: 500 },
  ];

  const index = Number(message.args[1]) - 1;

  if (index < 0 || index >= drinks.length) {
    return bot('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–∞–ø–∏—Ç–∫–∞. üçπ');
  }

  const drink = drinks[index];

  if (message.user.leaf < drink.cost) {
    return bot(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏—Å—Ç–∏–∫–æ–≤! üçÉ`);
  }

  message.user.leaf -= drink.cost;
  message.user.energy += drink.energy;

  return bot(`–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –Ω–∞–ø–∏—Ç–æ–∫ ¬´${drink.name}¬ª –∑–∞ ${drink.cost} –ª–∏—Å—Ç–∏–∫–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ ${drink.energy} —ç–Ω–µ—Ä–≥–∏–∏. ‚ö°`, {
    keyboard: JSON.stringify({
      "inline": true,
      "buttons": [[{
        "action": {
          "type": "text",
          "payload": "{\"button\": \"5\"}",
          "label": `üçπ –ù–∞–ø–∏—Ç–∫–∏ ${drink.id}`
        },
        "color": "positive"
      }]]
    })
  });
  }
});	

let tokensCache = null;

setInterval(() => {
  tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

module.exports = commands;
