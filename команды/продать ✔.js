let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
const spoler = tokenData.spoler;
const {VK} = require('vk-io');
const vk = new VK({token: tokenData.token});

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData3 = getToken3();

let val1 = tokenData3?.val1 || '—Ä—É–±.'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val2 = tokenData3?.val2 || '$'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val3 = tokenData3?.val3 || '‚Ç¨'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val4 = tokenData3?.val4 || '–≥–æ–ª–¥–æ–≤'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
let val5 = tokenData3?.val5 || '–∫–æ–∏–Ω–æ–≤'; // –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);

const cursFilePath = './–∫—É—Ä—Å/curs.json';

function getCursData() {
    try {
        const data = JSON.parse(fs.readFileSync(cursFilePath, 'utf8'));
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ curs.json:', error);
        return { btc: 0, dog: 0 }; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }
}


let cursData = getCursData();
let btc = Number(cursData.btc);
let dog = Number(cursData.dog);

setInterval(() => {
    cursData = getCursData(); // –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
    btc = cursData.btc; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    dog = cursData.dog; // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
     console.log(`–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BTC –∏–∑ —Ñ–∞–π–ª–∞ : ${btc}`);
     console.log(`–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ DOG –∏–∑ —Ñ–∞–π–ª–∞ : ${dog}`);
}, 50000);





let cars = require('../spisok/–º–∞—à–∏–Ω—ã.js')
let trees = require('../spisok/–¥–µ—Ä–µ–≤—å—è.js')
let presidents = require("../database/presidents.json");
let phones = require('../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js')
let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
let farms = require('../spisok/—Ñ–µ—Ä–º—ã.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')
let businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")
let businesses = require("../spisok/business spisok.js");
let botinfo = require("../database/botinfo.json"); 

cmd.hear(/^(?:–ø—Ä–æ–¥–∞—Ç—å)\s(.*)\s?(.*)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        let options = {
            count: null,
        };

        message.args[2] = message.args[1].split(" ")[1];
 
        if (!message.args[2]) options.count = 1;
        if (message.args[2]) {
            message.args[2] = message.args[2].replace(/([.,])/gi, "");
            message.args[2] = message.args[2].replace(/([–∫k])/gi, "000");
            message.args[2] = message.args[2].replace(/([–ºm])/gi, "000000");
            message.args[2] = Math.floor(Number(message.args[2]));

            if (message.args[2] <= 0) return;
            if (!message.args[2]) options.count = 1;
            else if (message.args[2]) options.count = message.args[2];
        }
        //—É–±—Ä–∞–ª –≤—Å–µ —ç—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ message.isChat || message.chat.type == 1 —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –∏—Ç–∞–∫ –¥–µ–ª–∞–µ—Ç—Å—è –≤—ã—à–µ
        if (/–º—è—á/i.test(message.args[1].toLowerCase())) {
            if (!message.user.ball) return bot(`—É –≤–∞—Å –Ω–µ—Ç –º—è—á–∞`);
            let a = Math.floor(balls[message.user.ball - 1].cost * 0.5);

            message.user.balance += Math.floor(balls[message.user.ball - 1].cost * 0.5);
            message.user.ball = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –º—è—á –∑–∞ ${utils.sp(
                    a
                )} ${val1} üèÄ\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 50% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º—è—á–∞ ‚ôªÔ∏è`
            );

        }

        if (/–º–∞—à–∏–Ω/i.test(message.args[1].toLowerCase())) {
            if (!message.user.transport.car) return bot(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã`);
            let a = Math.floor(cars[message.user.transport.car - 1].cost * 0.6);

            message.user.balance += Math.floor(
                cars[message.user.transport.car - 1].cost * 0.6
            );
            message.user.transport.car = 0;
            message.user.scar.gosnomer = "undefined";
            message.user.scar.prok_1 = 1;
            message.user.scar.prok_2 = 1;
            message.user.scar.prok_3 = 1;
            message.user.scar.prok_4 = 1;
            message.user.scar.prok_5 = 1;
            message.user.scar.prok_6 = 1;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –º–∞—à–∏–Ω—É –∑–∞ ${utils.sp(
                    a
                )} ${val1} üöó\n\nüõí –í–∞–º –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã ‚ôªÔ∏è`
            );

        }


        if (/—Ñ–µ—Ä–º/i.test(message.args[1].toLowerCase())) {
            if (message.user.misc.farm === 0) return bot(`–£ –≤–∞—Å –Ω–µ—Ç —Ñ–µ—Ä–º.. üò¢`);
            if (options.count > message.user.misc.farm_count)
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º! ‚ùå`);
            if (options.count <= 0) return bot(`–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º`);
            let a = Math.floor(
                farms[message.user.misc.farm - 1].cost * options.count * 0.1
            );

            message.user.balance += a;
            message.user.misc.farm_count -= options.count;
            if (message.user.misc.farm_count === 0) message.user.misc.farm = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–∏ —Ñ–µ—Ä–º—ã (${options.count} —à—Ç.) –∑–∞ ${utils.sp(
                    a
                )} ${val1} üîã\n\nüõí –í–∞–º –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç–æ 10% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ñ–µ—Ä–º ‚ôªÔ∏è`
            );

        }

        if (/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç/i.test(message.args[1].toLowerCase())) {
            if (message.user.misc.videocard === 0) return bot(`üòí–£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã`);
            if (options.count > message.user.misc.videocard_count)
                return bot(`üòí–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç`);
            if (options.count <= 0)
                return bot(`üòí–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç`);
            let a = Math.floor(
                videocards[message.user.misc.videocard - 1].cost * options.count * 0.6
            );

            message.user.sprcoin += a;
            message.user.misc.videocard_count -= options.count;
            if (message.user.misc.videocard_count === 0)
                message.user.misc.videocard = 0;

            return bot(
                `–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã (${options.count} —à—Ç.) –∑–∞ ${utils.sp(
                    a
                )} SpringCoins ‚ò£Ô∏è\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç ‚ôªÔ∏è`
            );

        }

        if (/–¥–æ–≥–µ–∫–æ–∏/i.test(message.args[1].toLowerCase())) {
            if (!message.user.dcoins) return bot(`—É –≤–∞—Å –Ω–µ—Ç üí∏ DogeCoins!`);
            if (options.count > message.user.dcoins)
                return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∏ DogeCoins!`);

            if (!message.args[2]) options.count = message.user.dcoins; //
            else if (message.args[2]) options.count = message.args[2]; //
            let a = Math.floor(dog * options.count);

            message.user.balance += Math.floor(a);
            message.user.dcoins -= options.count;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ üí∏ DogeCoins (${options.count} —à—Ç.) –∑–∞ ${utils.sp(a)} ${val1}`
            );

        }

        if (/–∂–µ–ª–µ–∑/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.zhelezo < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a2 = message.user.ruds.zhelezo * botinfo.kurszhelezo;
            const zhelezosda = message.user.ruds.zhelezo;

            message.user.balance += message.user.ruds.zhelezo * botinfo.kurszhelezo;
            message.user.ruds.zhelezo = 0;
            return bot(
                `–í—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda)}–µ–¥. –∂–µ–ª–µ–∑–∞ –∑–∞ ${utils.sp(a2)} ${val1} üíµ`
            );
        }

        if (/–∑–æ–ª–æ—Ç/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.zoloto < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a4 = message.user.ruds.zoloto * botinfo.kurszoloto;
            const zhelezosda3 = message.user.ruds.zoloto;

            message.user.balance += message.user.ruds.zoloto * botinfo.kurszoloto;
            message.user.ruds.zoloto = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda3)}–µ–¥. –∑–æ–ª–æ—Ç–∞ –∑–∞ ${utils.sp(a4)} ${val1} üíµ`
            );

        }

        if (/–∞–ª–º–∞–∑/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.almaz < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a3 = message.user.ruds.almaz * botinfo.kursalmaz;
            const zhelezosda2 = message.user.ruds.almaz;

            message.user.balance += message.user.ruds.almaz * botinfo.kursalmaz;
            message.user.ruds.almaz = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda2)}–µ–¥. –∞–ª–º–∞–∑–æ–≤ –∑–∞ ${utils.sp(a3)} ${val1} üíµ`
            );

        }

        if (/–º–∞—Ç–µ—Ä–∏/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.materia < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a5 = message.user.ruds.materia * botinfo.kursmateria;
            const zhelezosda4 = message.user.ruds.materia;

            message.user.balance += message.user.ruds.materia * botinfo.kursmateria;
            message.user.ruds.materia = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda4)}–µ–¥. –º–∞—Ç–µ—Ä–∏–∏ –∑–∞ ${utils.sp(a5)} ${val1} üíµ`
            );

        }

        if (/–æ–±—Å–∏–¥–∏–∞–Ω/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.obsidian < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a6 = message.user.ruds.obsidian * botinfo.kursobsidian;
            const zhelezosda5 = message.user.ruds.obsidian;

            message.user.balance += message.user.ruds.obsidian * botinfo.kursobsidian;
            message.user.ruds.obsidian = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda5)}–µ–¥. –æ–±—Å–∏–¥–∏–∞–Ω–∞ –∑–∞ ${utils.sp(a6)} ${val1} üíµ`
            );

        }

        if (/–ø–ª–∞–∑–º—É/i.test(message.args[1].toLowerCase())) {
            if (message.user.ruds.plazma < 1)
                return bot(`—É –í–∞—Å –Ω–µ—Ç—É –≤–∏–¥–∞ –¥–∞–Ω–Ω–æ–π —Ä—É–¥—ã! üò¢`);
            let a6 = message.user.ruds.plazma * botinfo.kursplazma;
            const zhelezosda6 = message.user.ruds.plazma;

            message.user.balance += message.user.ruds.plazma * botinfo.kursplazma;
            message.user.ruds.plazma = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(zhelezosda6)}–µ–¥. –ø–ª–∞–∑–º—ã –∑–∞ ${utils.sp(a6)} ${val1} üíµ`
            );

        }

        if (/—è—Ö—Ç/i.test(message.args[1].toLowerCase())) {
            if (!message.user.transport.yacht) return bot(`—É –≤–∞—Å –Ω–µ—Ç —è—Ö—Ç—ã`);
            let a = Math.floor(yachts[message.user.transport.yacht - 1].cost * 0.6);

            message.user.balance += Math.floor(
                yachts[message.user.transport.yacht - 1].cost * 0.6
            );
            message.user.transport.yacht = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é —è—Ö—Ç—É –∑–∞ ${utils.sp(
                    a
                )} ${val1} üö§\n\nüõí –í–∞–º –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —è—Ö—Ç—ã ‚ôªÔ∏è`
            );

        }

        if (/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω(—Ç|—Ç—ã)/i.test(message.args[1].toLowerCase())) {
            if (!message.user.minertool) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`);
            let a = Math.floor(minertool[message.user.minertool - 1].cost * 0.6);

            message.user.balance += Math.floor(
                minertool[message.user.minertool - 1].cost * 0.6
            );
            message.user.minertool = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞ ${utils.sp(
                    a
                )} ${val1} üîß\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ‚ôªÔ∏è`
            );

        }

        if (/–¥–µ—Ä–µ–≤–æ/i.test(message.args[1].toLowerCase())) {
            if (!message.user.tree)
                return bot(`–£ –í–∞—Å –Ω–µ—Ç—É –¥–µ—Ä–µ–≤–∞! üå≤\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–µ—Ä–µ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´–¥–µ—Ä–µ–≤—å—è¬ª`);
            let a = Math.floor(trees[message.user.tree - 1].cost * 0.6);
            //–õ–∏—Å—Ç–∏–∫–∏
            message.user.balance += Math.floor(a);
            message.user.tree = 0;
            message.user.leafpribil = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—ë –¥–µ—Ä–µ–≤–æ –∑–∞ ${utils.sp(
                    a
                )} ${val1} üå≤\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–µ—Ä–µ–≤–∞ ‚ôªÔ∏è`
            );

        }

        if (/—Å–∞–º–æ–ª(–µ|—ë|–π–æ)—Ç/i.test(message.args[1].toLowerCase())) {
            if (!message.user.transport.airplane) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Å–∞–º–æ–ª—ë—Ç–∞`);
            let a = Math.floor(
                airplanes[message.user.transport.airplane - 1].cost * 0.6
            );

            message.user.balance += Math.floor(
                airplanes[message.user.transport.airplane - 1].cost * 0.6
            );
            message.user.transport.airplane = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Å–∞–º–æ–ª—ë—Ç –∑–∞ ${utils.sp(
                    a
                )} ${val1} üõ©Ô∏è\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ–ª—ë—Ç–∞ ‚ôªÔ∏è`
            );

        }

        if (/–≤([–∏–µ—è])—Ä—Ç([–∞–æ])–ª(–µ|—ë|–π–æ)—Ç/i.test(message.args[1].toLowerCase())) {
            if (!message.user.transport.helicopter) return bot(`—É –≤–∞—Å –Ω–µ—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞`);
            let a = Math.floor(
                helicopters[message.user.transport.helicopter - 1].cost * 0.6
            );

            message.user.balance += Math.floor(
                helicopters[message.user.transport.helicopter - 1].cost * 0.6
            );
            message.user.transport.helicopter = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –≤–µ—Ä—Ç–æ–ª—ë—Ç –∑–∞ ${utils.sp(
                    a
                )} ${val1} üöÅ\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Ç–æ–ª—ë—Ç–∞ ‚ôªÔ∏è`
            );

        }

        if (/–¥–æ–º/i.test(message.args[1].toLowerCase())) {
            if (!message.user.realty.home) return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞`);
            let a = Math.floor(homes[message.user.realty.home - 1].cost * 0.6);

            message.user.balance += Math.floor(
                homes[message.user.realty.home - 1].cost * 0.6
            );
            message.user.realty.home = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ ${utils.sp(
                    a
                )} ${val1} üè°\n\nüõí –í–∞–º –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ–º–∞ ‚ôªÔ∏è`
            );

        }

        if (/–∫–≤–∞—Ä—Ç–∏—Ä/i.test(message.args[1].toLowerCase())) {
            if (!message.user.realty.apartment) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã`);
            let a = Math.floor(
                apartments[message.user.realty.apartment - 1].cost * 0.6
            );

            message.user.balance += Math.floor(
                apartments[message.user.realty.apartment - 1].cost * 0.6
            );
            message.user.realty.apartment = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ ${utils.sp(
                    a
                )} ${val1} üåÜ\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚ôªÔ∏è`
            );

        }

        if (/—Ç–µ–ª–µ—Ñ–æ–Ω/i.test(message.args[1].toLowerCase())) {
            if (!message.user.misc.phone) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞`);
            let a = Math.floor(phones[message.user.misc.phone - 1].cost * 0.6);

            message.user.balance += Math.floor(
                phones[message.user.misc.phone - 1].cost * 0.6
            );
            message.user.misc.phone = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ ${utils.sp(
                    a
                )} ${val1} üì≤\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ôªÔ∏è`
            );

        }

        if (/–∫–æ–º–ø—å—é—Ç–µ—Ä/i.test(message.args[1].toLowerCase())) {
            if (!message.user.misc.computer) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞`);
            let a = Math.floor(computers[message.user.misc.computer - 1].cost * 0.6);

            message.user.balance += Math.floor(
                computers[message.user.misc.computer - 1].cost * 0.6
            );
            message.user.misc.computer = 0;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞ ${utils.sp(
                    a
                )} ${val1}   üñ•Ô∏è\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ ‚ôªÔ∏è`
            );

        }

        if (/—Ä–µ–π—Ç–∏–Ω–≥/i.test(message.args[1].toLowerCase())) {
            if (options.count > message.user.rating) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞`);
            if (!message.args[2]) options.count = message.user.rating; //
            else if (message.args[2]) options.count = message.args[2]; //
            let a;

            if (!message.user.settings.imperator) {
                a = 500000 * options.count;
            } else {
                a = 1000000 * options.count;
            }
            if (message.user.settings.topdon || message.user.settings.king) {
                a = 900000 * options.count;
            }

            message.user.balance += Math.floor(a);
            message.user.rating -= options.count;

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${options.count} ${utils.decl(options.count, [
                    "—Ä–µ–π—Ç–∏–Ω–≥",
                    "—Ä–µ–π—Ç–∏–Ω–≥–∞",
                    "—Ä–µ–π—Ç–∏–Ω–≥–∞",
                ])} –∑–∞ ${utils.sp(Math.floor(a))}`
            );
        }

        if (/–±–∏–∑–Ω–µ—Å/i.test(message.args[1]?.toLowerCase())) {
            if (message.user.business2.length === 0) return bot(`–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞`);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ count
            if (options.count < 1 || options.count > message.user.business2.length)
                return bot(`–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å [–æ—Ç 1 –¥–æ ${message.user.business2.length}]`);

            if (options.count > message.user.business2.length)
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

            options.count--;

            let a = Math.floor(
                businesses2[message.user.business2[options.count].id - 1][
                    message.user.business2[options.count].upgrade - 1
                    ].cost * 0.6
            );

            message.user.balance += Math.floor(a);
            message.user.business2.splice(options.count, 1);

            return bot(
                `–í—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å ‚Ññ${options.count + 1} –∑–∞ ${utils.sp(a)} ${val1} üè¢\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ + —É–ª—É—á—à–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞ ‚ôªÔ∏è`
            );

        }
	   if (/–∑–≤–µ–∑–¥(—É|–∞)/i.test(message.args[1].toLowerCase())) {
        if (options.count < 1 || options.count > 5)
            return bot(`–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü—Ä–æ–¥–∞—Ç—å –∑–≤–µ–∑–¥—É [–æ—Ç 1 –¥–æ 5]`);

        if (options.count === 1) {
            if (message.user.stars1) {
                message.user.ruds.almaz += 7500;
                message.user.stars1 = false;

                return bot(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∑–≤–µ–∑–¥—É –∑–∞ 7.500 –ê–ª–º–∞–∑–æ–≤ üíé`);
            } else {
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã`);
            }
        }

        if (options.count === 2) {
            if (message.user.stars2) {
                message.user.ruds.materia += 5000;
                message.user.stars2 = false;

                return bot(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∑–≤–µ–∑–¥—É –∑–∞ 5.000 –ú–∞—Ç–µ—Ä–∏–∏ üåå`);
            } else {
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã`);
            }
        }

        if (options.count === 3) {
            if (message.user.stars3) {
                message.user.ruds.obsidian += 2500;
                message.user.stars3 = false;

                return bot(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∑–≤–µ–∑–¥—É –∑–∞ 2.500 –û–±—Å–∏–¥–∏–∞–Ω–∞ üåå`);
            } else {
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã`);
            }
        }

        if (options.count === 4) {
            if (message.user.stars4) {
                message.user.ruds.plazma += 1500;
                message.user.stars4 = false;

                return bot(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∑–≤–µ–∑–¥—É –∑–∞ 1.500 –ü–ª–∞–∑–º—ã üåå`);
            } else {
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã`);
            }
        }

        if (options.count === 5) {
            if (message.user.stars5) {
                message.user.rub += 7500;
                message.user.stars5 = false;

                return bot(`–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ—é –∑–≤–µ–∑–¥—É –∑–∞ 7.500 –ß–∞–∫–æ–†—É–± üí∞`);
            } else {
                return bot(`–£ –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã`);
            }
        }
    }




    if (/–±–∏—Ç–∫–æ–∏–Ω/i.test(message.args[1].toLowerCase())) {
        if (typeof btc !== 'number') {
            console.error("–û—à–∏–±–∫–∞: btc –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.");
            return bot("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –±–∏—Ç–∫–æ–∏–Ω–∞."); // –í–∞–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        }
    
        if (options.count > message.user.btc) return bot(`–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤`);
    
        if (!message.args[2]) {
            options.count = message.user.btc;
        } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ message.args[2] —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            const parsedCount = parseFloat(message.args[2]);
            if (isNaN(parsedCount)) {
                return bot("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.");
            }
            options.count = parsedCount;
        }
    
        if (options.count <= 0) {
            return bot("–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏—Ç–∫–æ–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.");
        }
    
        let a = Math.floor(btc * options.count);
    
        if (isNaN(a)) {
            console.error("–û—à–∏–±–∫–∞: a –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º. btc:", btc, "options.count:", options.count);
            return bot("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—É–º–º—ã –ø—Ä–æ–¥–∞–∂–∏."); // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ a –Ω–µ —á–∏—Å–ª–æ
        }
    
        message.user.balance += Math.floor(a);
        message.user.btc -= options.count;
    
        return bot(
            `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${utils.sp(options.count)}‚Çø –∑–∞ ${utils.sp(a)} ${val1} (1‚Çø=${(
                btc
            )})${""}`
        );
    }
    }

	    if (message.chat.type === 2) {
        let options = {
            count: null,
        };

        message.args[2] = message.args[1].split(" ")[1];

        if (!message.args[2]) options.count = 1;
        if (message.args[2]) {
            message.args[2] = message.args[2].replace(/([.,])/gi, "");
            message.args[2] = message.args[2].replace(/([–∫k])/gi, "000");
            message.args[2] = message.args[2].replace(/([–ºm])/gi, "000000");
            message.args[2] = Math.floor(Number(message.args[2]));

            if (message.args[2] <= 0) return;
            if (!message.args[2]) options.count = 1;
            else if (message.args[2]) options.count = message.args[2];
        }

        if (/–±–∏–∑–Ω–µ—Å/i.test(message.args[1].toLowerCase())) {
            if (message.user.business.length === 0) return bot(`—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞`);
            if (
                (options.count < 1 || options.count > 4) &&
                message.user.business.length <= 4
            )
                return bot(`–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ü—Ä–æ–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å [–æ—Ç 1 –¥–æ 4]`);
            if (message.user.business.length < options.count)
                return bot(`—É –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

            options.count--;

            let a = Math.floor(
                businesses[message.user.business[options.count].id - 1][
                    message.user.business[options.count].upgrade - 1
                    ].cost * 0.6
            );

            message.user.balance2 += Math.floor(a);
            message.user.business.splice(options.count, 1);

            return bot(
                `–≤—ã –ø—Ä–æ–¥–∞–ª–∏ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å ‚Ññ${options.count} –∑–∞ ${utils.sp(
                    a
                )} ${val4} üè¢\n\nüõí –í–∞–º –±—ã–ª–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ 60% –æ—Ç –≥–æ—Å. —Å—Ç–æ–∏–º–æ—Å—Ç–∏ + —É–ª—É—á—à–µ–Ω–∏–π –±–∏–∑–Ω–µ—Å–∞ ‚ôªÔ∏è`
            );
        }
    }
});


module.exports = commands;