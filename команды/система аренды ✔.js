let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let phones = require('../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')


const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤
const spoler = tokenData.spoler;
const {VK} = require('vk-io');
const vk = require('../vk-api.js'); 


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData3 = getToken3();

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }
}, 1000);

function addZero(num) {
    return num < 10 ? '' + num : num;
}

function unixStampLefta(stampa) {
    stampa = stampa / 1000; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ —Å–µ–∫—É–Ω–¥—ã
    let s = Math.floor(stampa % 60); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 60 –¥–ª—è —Å–µ–∫—É–Ω–¥
    stampa = Math.floor(stampa / 60); // –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã

    let m = Math.floor(stampa % 60); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 60 –¥–ª—è –º–∏–Ω—É—Ç
    stampa = Math.floor(stampa / 60); // –£–±–∏—Ä–∞–µ–º –º–∏–Ω—É—Ç—ã

    let h = Math.floor(stampa % 24); // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 24 –¥–ª—è —á–∞—Å–æ–≤
    let d = Math.floor(stampa / 24); // –î–µ–ª–∏–º –Ω–∞ 24 –¥–ª—è –¥–Ω–µ–π
    let y = Math.floor(d / 365); // –î–µ–ª–∏–º –Ω–∞ 365 –¥–ª—è –ª–µ—Ç
    d = d % 365; // –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 365 –¥–ª—è –¥–Ω–µ–π

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –µ–¥–∏–Ω–∏—Ü –≤—Ä–µ–º–µ–Ω–∏
    let text = '';
    if (y > 0) text += `${y} –≥. `;
    if (d > 0) text += `${d} –¥. `;
    if (h > 0) text += `${addZero(h)} —á. `;
    text += `${addZero(m)} –º. ${addZero(s)} —Å.`;

    return text.trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
}
cmd.hear(/^(?:–º–∞–≥–∞–∑–∏–Ω|shop)$/i, async (message, bot) => {
    await message.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–¥–æ–º–∞`}),
                        "label": `üè† –î–æ–º–∞`
                    },
                    "color": "positive"
                }, {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—è—Ö—Ç—ã`}),
                        "label": `üõ•Ô∏è –Ø—Ö—Ç—ã`
                    },
                    "color": "positive"
                }],
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`}),
                        "label": `‚õèÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`
                    },
                    "color": "positive"
                }, {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∫–æ–º–ø—å—é—Ç–µ—Ä—ã`}),
                        "label": `üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã`
                    },
                    "color": "positive"
                }],
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∫–≤–∞—Ä—Ç–∏—Ä—ã`}),
                        "label": `üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã`
                    },
                    "color": "positive"
                }, {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—Ç–µ–ª–µ—Ñ–æ–Ω—ã`}),
                        "label": `üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã`
                    },
                    "color": "positive"
                }],
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—Å–∞–º–æ–ª–µ—Ç—ã`}),
                        "label": `üõ©Ô∏è –°–∞–º–æ–ª–µ—Ç—ã`
                    },
                    "color": "positive"
                }, {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã`}),
                        "label": `üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
});

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–∞|–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å|üéâ –ê—Ä–µ–Ω–¥–∞)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        try {
            const now = Date.now();

            const getYachtColor = () => (message.user.transport.yacht ? (message.user.arend.yaxta >= now ? "secondary" : "positive") : "negative");
            const getHomeColor = () => (message.user.realty.home ? (message.user.arend.dom >= now ? "secondary" : "positive") : "negative");
            const getToolColor = () => (message.user.minertool ? (message.user.arend.instrm >= now ? "secondary" : "positive") : "negative");
            const getComputerColor = () => (message.user.misc.computer ? (message.user.arend.pk >= now ? "secondary" : "positive") : "negative");
            const getApartmentColor = () => (message.user.realty.apartment ? (message.user.arend.kvar >= now ? "secondary" : "positive") : "negative");
            const getAirplaneColor = () => (message.user.transport.airplane ? (message.user.arend.sam >= now ? "secondary" : "positive") : "negative");
            const getPhoneColor = () => (message.user.misc.phone ? (message.user.arend.tel >= now ? "secondary" : "positive") : "negative");
            const getHelicopterColor = () => (message.user.transport.helicopter ? (message.user.arend.vert >= now ? "secondary" : "positive") : "negative");

            await message.send('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É:', {
                keyboard: JSON.stringify({
                    "inline": true,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É`}),
                                "label": `üõ•Ô∏è –Ø—Ö—Ç—ã`
                            },
                            "color": getYachtColor()
                        },
                            {
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º`}),
                                    "label": `üè† –î–æ–º–∞`
                                },
                                "color": getHomeColor()
                            }],
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`}),
                                "label": `‚õèÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`
                            },
                            "color": getToolColor()
                        },
                            {
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø`}),
                                    "label": `üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã`
                                },
                                "color": getComputerColor()
                            }],
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É`}),
                                "label": `üè¢ –ö–≤–∞—Ä—Ç–∏—Ä—ã`
                            },
                            "color": getApartmentColor()
                        },
                            {
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç`}),
                                    "label": `‚úàÔ∏è –°–∞–º–æ–ª–µ—Ç—ã`
                                },
                                "color": getAirplaneColor()
                            }],
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω`}),
                                "label": `üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã`
                            },
                            "color": getPhoneColor()
                        },
                            {
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç`}),
                                    "label": `üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã`
                                },
                                "color": getHelicopterColor()
                            }],
                        [{
                            "action": {
                                "type": "text",
                                payload: JSON.stringify({command: `–º–∞–≥–∞–∑–∏–Ω`}),
                                "label": `üõí –ú–∞–≥–∞–∑–∏–Ω`
                            },
                            "color": "primary"
                        }]
                    ]
                })
            });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏:", error);
            message.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.');
        }
    } else {
        return;
    }
});

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –¥–æ–º)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (message.user.arend.dom >= Date.now()) {
            return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.dom - Date.now())} ‚è≥`);
        }
        if (!message.user.realty.home) return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞`, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({command: `–¥–æ–º–∞`}),
                            "label": `üè† –î–æ–º–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })
        });

        let a = Math.floor(homes[message.user.realty.home - 1].cost * 0.02);

        message.user.balance += Math.floor(
            homes[message.user.realty.home - 1].cost * 0.02
        );

        message.user.arend.dom = Date.now() + 10800000;


        if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
            message.user.now.kv6 = true;
            message.user.misc.farm_count += 10;
            await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
                keyboard: JSON.stringify({
                  "inline": true,
                  "buttons": [
                    [{
                      "action": {
                        "type": "text",
                        payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                        "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                      },
                      "color": "positive"
                    }]
                  ]
                })
              })
    }

        return bot(
            `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ–π –¥–æ–º –∑–∞ ${utils.sp(
                a
            )} ${val1} üè°`
        );

    } else {
        return
    }
})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —è—Ö—Ç—É)$/i, async (message, bot) => {
    if (message.user.arend.yaxta >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.yaxta - Date.now())} ‚è≥`);
    }
    if (!message.user.transport.yacht) return bot(`—É –≤–∞—Å –Ω–µ—Ç —è—Ö—Ç—ã`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—è—Ö—Ç—ã`}),
                        "label": `üõ•Ô∏è –Ø—Ö—Ç—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(yachts[message.user.transport.yacht - 1].cost * 0.02);

    message.user.balance += Math.floor(
        yachts[message.user.transport.yacht - 1].cost * 0.02
    );
    message.user.arend.yaxta = Date.now() + 10800000;
    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ—é —è—Ö—Ç—É –∑–∞ ${utils.sp(
            a
        )} ${val1} üö§`
    );

})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)$/i, async (message, bot) => {
    if (message.user.arend.instrm >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.instrm - Date.now())} ‚è≥`);
    }
    if (!message.user.minertool) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`}),
                        "label": `‚õèÔ∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(minertool[message.user.minertool - 1].cost * 0.02);

    message.user.balance += Math.floor(
        minertool[message.user.minertool - 1].cost * 0.02
    );

    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}

    message.user.arend.instrm = Date.now() + 10800000;
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞ ${utils.sp(
            a
        )} ${val1} üîß`
    );

})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–æ–º–ø)$/i, async (message, bot) => {
    if (message.user.arend.pk >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.pk - Date.now())} ‚è≥`);
    }
    if (!message.user.misc.computer) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–∞`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∫–æ–º–ø—å—é—Ç–µ—Ä—ã`}),
                        "label": `üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(computers[message.user.misc.computer - 1].cost * 0.02);

    message.user.balance += Math.floor(
        computers[message.user.misc.computer - 1].cost * 0.02
    );

    message.user.arend.pk = Date.now() + 10800000;

    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä –∑–∞ ${utils.sp(
            a
        )} ${val1} üñ•Ô∏è`
    );

})


cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É)$/i, async (message, bot) => {
    if (message.user.arend.kvar >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.kvar - Date.now())} ‚è≥`);
    }
    if (!message.user.realty.apartment) return bot(`—É –≤–∞—Å –Ω–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–∫–≤–∞—Ä—Ç–∏—Ä—ã`}),
                        "label": `üè† –ö–≤–∞—Ä—Ç–∏—Ä—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(
        apartments[message.user.realty.apartment - 1].cost * 0.02
    );

    message.user.balance += Math.floor(
        apartments[message.user.realty.apartment - 1].cost * 0.02
    );
    message.user.arend.kvar = Date.now() + 10800000;
    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ—é –∫–≤–∞—Ä—Ç–∏—Ä—É –∑–∞ ${utils.sp(
            a
        )} ${val1} üåÜ`
    );

})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω)$/i, async (message, bot) => {
    if (message.user.arend.tel >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.tel - Date.now())} ‚è≥`);
    }
    if (!message.user.misc.phone) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—Ç–µ–ª–µ—Ñ–æ–Ω—ã`}),
                        "label": `üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(phones[message.user.misc.phone - 1].cost * 0.02);

    message.user.balance += Math.floor(
        phones[message.user.misc.phone - 1].cost * 0.02
    );
    message.user.arend.tel = Date.now() + 10800000;
    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞ ${utils.sp(
            a
        )} ${val1} üì≤`
    );

})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç)$/i, async (message, bot) => {
    if (message.user.arend.sam >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.sam - Date.now())} ‚è≥`);
    }
    if (!message.user.transport.airplane) return bot(`—É –≤–∞—Å –Ω–µ—Ç —Å–∞–º–æ–ª—ë—Ç–∞`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `—Å–∞–º–æ–ª–µ—Ç—ã`}),
                        "label": `üõ©Ô∏è –°–∞–º–æ–ª–µ—Ç—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(
        airplanes[message.user.transport.airplane - 1].cost * 0.02
    );

    message.user.balance += Math.floor(
        airplanes[message.user.transport.airplane - 1].cost * 0.02
    );
    message.user.arend.sam = Date.now() + 10800000;
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ–π —Å–∞–º–æ–ª—ë—Ç –∑–∞ ${utils.sp(
            a
        )} ${val1} üõ©Ô∏è`
    );

})

cmd.hear(/^(?:–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç)$/i, async (message, bot) => {
    if (message.user.arend.vert >= Date.now()) {
        return bot(`‚è≥ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.arend.vert - Date.now())} ‚è≥`);
    }
    if (!message.user.transport.helicopter) return bot(`—É –≤–∞—Å –Ω–µ—Ç –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞`, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã`}),
                        "label": `üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã`
                    },
                    "color": "positive"
                }]
            ]
        })
    });
    let a = Math.floor(
        helicopters[message.user.transport.helicopter - 1].cost * 0.02
    );

    message.user.balance += Math.floor(
        helicopters[message.user.transport.helicopter - 1].cost * 0.02
    );
    message.user.arend.vert = Date.now() + 10800000;
    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && !message.user.now.kv6){
        message.user.now.kv6 = true;
        message.user.misc.farm_count += 10;
        await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 6 –∑–∞–¥–∞–Ω–∏–µ! —Å–¥–∞—Ç—å –≤ –∞—Ä–µ–Ω–¥—É –∏–º—É—â–µ—Å—Ç–≤–æ!

–ù–∞–≥—Ä–∞–¥–∞ - 10 —Ñ–µ—Ä–º

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ –∞—Ä–µ–Ω–¥—É–π—Ç–µ —Å–≤–æ–µ –∏–º—É—â–µ—Å—Ç–≤–æ –≤–µ–¥—å —ç—Ç–æ —Ö–∞–ª—è–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å!`, {
            keyboard: JSON.stringify({
              "inline": true,
              "buttons": [
                [{
                  "action": {
                    "type": "text",
                    payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                    "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                  },
                  "color": "positive"
                }]
              ]
            })
          })
}
    return bot(
        `–≤—ã –∞—Ä–µ–Ω–¥–æ–≤–∞–ª–∏ —Å–≤–æ–π –≤–µ—Ä—Ç–æ–ª—ë—Ç –∑–∞ ${utils.sp(
            a
        )} ${val1} üöÅ`
    );

})



// –Ø—Ö—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:—è—Ö—Ç—ã|üõ• –Ø—Ö—Ç—ã|—è—Ö—Ç–∞)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let yachtList = `—è—Ö—Ç—ã:\n\n`;
            
            yachts.forEach(yacht => {
                const hasDiscount = yacht.sell > 0;
                const currentPrice = hasDiscount ? yacht.cost2 : yacht.cost;
                
                yachtList += `${message.user.transport.yacht === yacht.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${yacht.id}. ${yacht.name}\n`;
                yachtList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    yachtList += ` üî• –°–∫–∏–¥–∫–∞ ${yacht.sell}%`;
                }
                
                yachtList += `\n\n`;
            });
            
            yachtList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–Ø—Ö—Ç–∞ [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(yachtList);
        }
                    
        const sell = yachts.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.transport.yacht) {
            return bot(
                `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —è—Ö—Ç–∞ (${yachts[message.user.transport.yacht - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É"`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å —è—Ö—Ç—É`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.transport.yacht = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –°–∞–º–æ–ª–µ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:—Å–∞–º–æ–ª[–µ—ë]—Ç|üõ© –°–∞–º–æ–ª–µ—Ç—ã|—Å–∞–º–æ–ª[–µ—ë]—Ç—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let airplaneList = `—Å–∞–º–æ–ª–µ—Ç—ã:\n\n`;
            
            airplanes.forEach(airplane => {
                const hasDiscount = airplane.sell > 0;
                const currentPrice = hasDiscount ? airplane.cost2 : airplane.cost;
                
                airplaneList += `${message.user.transport.airplane === airplane.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${airplane.id}. ${airplane.name}\n`;
                airplaneList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    airplaneList += ` üî• –°–∫–∏–¥–∫–∞ ${airplane.sell}%`;
                }
                
                airplaneList += `\n\n`;
            });
            
            airplaneList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–°–∞–º–æ–ª–µ—Ç [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(airplaneList);
        }
                    
        const sell = airplanes.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.transport.airplane) {
            return bot(
                `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–∞–º–æ–ª–µ—Ç (${airplanes[message.user.transport.airplane - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç"`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å —Å–∞–º–æ–ª–µ—Ç`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.transport.airplane = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –í–µ—Ä—Ç–æ–ª–µ—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:–≤–µ—Ä—Ç–æ–ª[–µ—ë]—Ç|üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç—ã|–≤–µ—Ä—Ç–æ–ª[–µ—ë]—Ç—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let helicopterList = `–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã:\n\n`;
            
            helicopters.forEach(helicopter => {
                const hasDiscount = helicopter.sell > 0;
                const currentPrice = hasDiscount ? helicopter.cost2 : helicopter.cost;
                
                helicopterList += `${message.user.transport.helicopter === helicopter.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${helicopter.id}. ${helicopter.name}\n`;
                helicopterList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    helicopterList += ` üî• –°–∫–∏–¥–∫–∞ ${helicopter.sell}%`;
                }
                
                helicopterList += `\n\n`;
            });
            
            helicopterList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–í–µ—Ä—Ç–æ–ª–µ—Ç [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(helicopterList);
        }
                    
        const sell = helicopters.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.transport.helicopter) {
            return bot(
                `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç (${helicopters[message.user.transport.helicopter - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç"`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –≤–µ—Ä—Ç–æ–ª–µ—Ç`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.transport.helicopter = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –ö–≤–∞—Ä—Ç–∏—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:–∫–≤–∞—Ä—Ç–∏—Ä–∞|üåá –ö–≤–∞—Ä—Ç–∏—Ä—ã|–∫–≤–∞—Ä—Ç–∏—Ä—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let apartmentList = `–∫–≤–∞—Ä—Ç–∏—Ä—ã:\n\n`;
            
            apartments.forEach(apartment => {
                const hasDiscount = apartment.sell > 0;
                const currentPrice = hasDiscount ? apartment.cost2 : apartment.cost;
                
                apartmentList += `${message.user.realty.apartment === apartment.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${apartment.id}. ${apartment.name}\n`;
                apartmentList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    apartmentList += ` üî• –°–∫–∏–¥–∫–∞ ${apartment.sell}%`;
                }
                
                apartmentList += `\n\n`;
            });
            
            apartmentList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ö–≤–∞—Ä—Ç–∏—Ä–∞ [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(apartmentList);
        }
                    
        const sell = apartments.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.realty.apartment) {
            return bot(
                `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä–∞ (${apartments[message.user.realty.apartment - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É"`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.realty.apartment = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –¢–µ–ª–µ—Ñ–æ–Ω—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:—Ç–µ–ª–µ—Ñ–æ–Ω|üì± –¢–µ–ª–µ—Ñ–æ–Ω—ã|—Ç–µ–ª–µ—Ñ–æ–Ω—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let phoneList = `—Ç–µ–ª–µ—Ñ–æ–Ω—ã:\n\n`;
            
            phones.forEach(phone => {
                const hasDiscount = phone.sell > 0;
                const currentPrice = hasDiscount ? phone.cost2 : phone.cost;
                
                phoneList += `${message.user.misc.phone === phone.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${phone.id}. ${phone.name}\n`;
                phoneList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    phoneList += ` üî• –°–∫–∏–¥–∫–∞ ${phone.sell}%`;
                }
                
                phoneList += `\n\n`;
            });
            
            phoneList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–¢–µ–ª–µ—Ñ–æ–Ω—ã [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(phoneList);
        }
                    
        const sell = phones.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.misc.phone) {
            return bot(
                `—É –í–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω ¬´${phones[message.user.misc.phone - 1].name}¬ª ‚ùå\n–ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ ¬´–ü—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω¬ª`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.misc.phone = sell.id;
        message.user.procent.phone = utils.random(50, 100);
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –ö–æ–º–ø—å—é—Ç–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:–∫–æ–º–ø—å—é—Ç–µ—Ä|üñ• –ö–æ–º–ø—å—é—Ç–µ—Ä—ã|–∫–æ–º–ø—å—é—Ç–µ—Ä—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let computerList = `–∫–æ–º–ø—å—é—Ç–µ—Ä—ã:\n\n`;
            
            computers.forEach(computer => {
                const hasDiscount = computer.sell > 0;
                const currentPrice = hasDiscount ? computer.cost2 : computer.cost;
                
                computerList += `${message.user.misc.computer === computer.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${computer.id}. ${computer.name}\n`;
                computerList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    computerList += ` üî• –°–∫–∏–¥–∫–∞ ${computer.sell}%`;
                }
                
                computerList += `\n\n`;
            });
            
            computerList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ö–æ–º–ø—å—é—Ç–µ—Ä—ã [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(computerList);
        }
                    
        const sell = computers.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.misc.computer) {
            return bot(
                `—É –í–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä ¬´${computers[message.user.misc.computer - 1].name}¬ª ‚ùå\n–ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ ¬´–ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä¬ª`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.misc.computer = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã|üîß–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã|üîß –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let toolList = `–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:\n\n`;
            
            minertool.forEach(tool => {
                const hasDiscount = tool.sell > 0;
                const currentPrice = hasDiscount ? tool.cost2 : tool.cost;
                
                toolList += `${message.user.minertool === tool.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${tool.id}. ${tool.name}\n`;
                toolList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    toolList += ` üî• –°–∫–∏–¥–∫–∞ ${tool.sell}%`;
                }
                
                toolList += `\n\n`;
            });
            
            toolList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(toolList);
        }
                    
        const sell = minertool.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.minertool) {
            return bot(
                `—É –í–∞—Å —É–∂–µ –µ—Å—Ç—å ¬´${minertool[message.user.minertool - 1].name}¬ª ‚ùå\n–ß—Ç–æ–±—ã –µ–≥–æ –ø—Ä–æ–¥–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ ¬´–ü—Ä–æ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç¬ª`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.minertool = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});

// –î–æ–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∏–¥–æ–∫
cmd.hear(/^(?:–¥–æ–º|üè† –î–æ–º–∞|–¥–æ–º–∞)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        if (!message.args[1]) {
            let homeList = `–¥–æ–º–∞:\n\n`;
            
            homes.forEach(home => {
                const hasDiscount = home.sell > 0;
                const currentPrice = hasDiscount ? home.cost2 : home.cost;
                
                homeList += `${message.user.realty.home === home.id ? "‚úîÔ∏è" : "‚úñÔ∏è"} ${home.id}. ${home.name}\n`;
                homeList += `(${utils.sp(currentPrice)} ${val1})`;
                
                if (hasDiscount) {
                    homeList += ` üî• –°–∫–∏–¥–∫–∞ ${home.sell}%`;
                }
                
                homeList += `\n\n`;
            });
            
            homeList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–î–æ–º [–Ω–æ–º–µ—Ä]¬ª`;
            
            return bot(homeList);
        }
                    
        const sell = homes.find((x) => x.id === Number(message.args[1]));
        if (!sell) return;
        
        const priceToPay = sell.sell > 0 ? sell.cost2 : sell.cost;
        
        if (message.user.realty.home) {
            return bot(
                `—É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–æ–º (${homes[message.user.realty.home - 1].name}), –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –¥–æ–º"`, 
                {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    payload: JSON.stringify({command: `–ø—Ä–æ–¥–∞—Ç—å –¥–æ–º`}),
                                    "label": `üí∏ –ü—Ä–æ–¥–∞—Ç—å –¥–æ–º`
                                },
                                "color": "positive"
                            }]
                        ]
                    })
                }
            );
        }
        
        if (message.user.balance < priceToPay) {
            return bot(
                `—É –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
            );
        }
        
        message.user.balance -= priceToPay;
        message.user.realty.home = sell.id;
        
        let purchaseMessage = `–≤—ã –∫—É–ø–∏–ª–∏ ¬´${sell.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1}`;
        if (sell.sell > 0) {
            purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${sell.sell}%)`;
        }
        
        return bot(purchaseMessage);
    }
});



















module.exports = commands;