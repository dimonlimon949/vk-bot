let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const ostats = [
  {
    id: 1,
    smile: "üê∑‚ú®",
    buff: "+100% —É —É—Ä–æ–Ω—É –±–æ—Å—Å–∞",
    cost: 49,
  },
];

let cars = require('../spisok/–º–∞—à–∏–Ω—ã.js')
let trees = require('../spisok/–¥–µ—Ä–µ–≤—å—è.js')
let phones = require('../spisok/—Ç–µ–ª–µ—Ñ–æ–Ω—ã.js')
let presidents = require("../database/presidents.json");



let yachts = require('../spisok/—è—Ö—Ç—ã.js')
let airplanes = require('../spisok/—Å–∞–º–æ–ª–µ—Ç—ã.js')
let helicopters = require('../spisok/–≤–µ—Ä—Ç–æ–ª–µ—Ç—ã.js')
let apartments = require('../spisok/–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã.js')
let homes = require('../spisok/–¥–æ–º–∞.js')
let videocards = require('../spisok/–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.js')
let farms = require('../spisok/—Ñ–µ—Ä–º—ã.js')
let minertool = require('../spisok/–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.js')
let computers = require('../spisok/–∫–æ–º–ø—å—é—Ç–µ—Ä—ã.js')

let businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")
let businesses = require("../spisok/business spisok.js")


const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}


// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData4 = getToken4();
let spoler = tokenData4 ? Object.values(tokenData4)
  .map(id => Number(id)) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
  .filter(id => Number.isInteger(id) && id > 0) // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –Ω–µ —á–∏—Å–ª–∞ –∏ <= 0
  : [];

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

function getRandomCharCase(char) {
  if (Math.random() < 0.9) { // 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    return char.toUpperCase();
  } else {
    return char.toLowerCase();
  }
}

//–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å–º–∞–π–ª–∏–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomEmoji(emojis) {
  return emojis[Math.floor(Math.random() * emojis.length)];
}

function mixText(originalText, emojis) {
  let mixedText = "";
  const randomEmoji = getRandomEmoji(emojis); // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–º–∞–π–ª–∏–∫

  for (let i = 0; i < originalText.length; i++) {
    let char = originalText[i];

    if (/[–∞-—è–ê-–Øa-zA-Z]/.test(char)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –±—É–∫–≤–æ–π

      // –ò–∑–º–µ–Ω—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
      char = getRandomCharCase(char);

      // –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫)
      const random = Math.random();
      if (random < 0.1) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã
        switch (char.toLowerCase()) {
          case '–æ': char = '0'; break;
          case '–∞': char = '@'; break;
          case '–µ': char = '3'; break;
          case 'l': char = '1'; break;
          case 's': char = '$'; break;
          case 't': char = '+'; break;

        }
      }
      if (random > 0.8) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã –†—É—Å—Å–∫–∏—Ö –Ω–∞ –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
        switch (char.toLowerCase()) {
          case '–∞': char = 'a'; break;
          case '–æ': char = 'o'; break;
          case '–µ': char = 'e'; break;
          case '—Ä': char = 'p'; break;
          case '—Å': char = 'c'; break;
          case '—É': char = 'y'; break;
          case '—Ö': char = 'x'; break;
          case '–≤': char = 'b'; break;
          case '–∫': char = 'k'; break;
          case '–º': char = 'm'; break;
          case '–Ω': char = 'h'; break;
          case '–ø': char = 'n'; break;
          case '—Ç': char = 'm'; break;
          case '—ë': char = 'e'; break;
          // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–º–µ–Ω—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é
        }
      }
      if (random < 0.2) { // 10% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã –ê–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞ –†—É—Å—Å–∫–∏–µ
        switch (char.toLowerCase()) {
          case 'a': char = '–∞'; break;
          case 'o': char = '–æ'; break;
          case 'e': char = '–µ'; break;
          case 'p': char = '—Ä'; break;
          case 'c': char = '—Å'; break;
          case 'y': char = '—É'; break;
          case 'x': char = '—Ö'; break;
          case 'b': char = '–≤'; break;
          case 'k': char = '–∫'; break;
          case 'm': char = '–º'; break;
          case 'h': char = '–Ω'; break;
          case 'n': char = '–ø'; break;
          // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–º–µ–Ω—ã –ø–æ –∂–µ–ª–∞–Ω–∏—é
        }
      }
    }
    mixedText += char;
  }
  return `${randomEmoji} ${mixedText} ${randomEmoji}\n`;
}
// –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–∏–ª–µ–π –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const programmerUnicodeStyles = require('../—à—Ä–∏—Ñ—Ç—ã/—à—Ä–∏—Ñ—Ç—ã.js');

//–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è
const decoratorSymbols = ["Íô≥", "Íô∞", "“â", "“à", "‚Éü", "‚É¢", "‚Éë", "‚Åñ", "‚Åò"];

//–§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
function addRandomDecorators(text) {
    let decoratedText = "";
    for (let i = 0; i < text.length; i++) {
        decoratedText += text[i];
        if (Math.random() < 0.9) { //10% —à–∞–Ω—Å –¥–æ–±–∞–≤–∏—Ç—å —Å–∏–º–≤–æ–ª –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –±—É–∫–≤—ã
            decoratedText += decoratorSymbols[Math.floor(Math.random() * decoratorSymbols.length)];
        }
    }
    return decoratedText;
}

function getRandomUnicodeStyle() {
  const randomIndex = Math.floor(Math.random() * programmerUnicodeStyles.length);
  return programmerUnicodeStyles[randomIndex];
}




const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);

cmd.hear(/^(?:–ø—Ä–æ—Ñ–∏–ª—å|–ø—Ä–æ—Ñ|üîÖ –ü—Ä–æ—Ñ–∏–ª—å|—è)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1 || message.chat.type === 2) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É
    const groupInfo = await vk.api.call('groups.getById', {
      access_token: tokenData.token,
      v: '5.131',
    });

    if (!groupInfo || groupInfo.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    }

    const groupId = groupInfo[0].id;
    const follow = await vk.api.call("groups.isMember", {
      user_id: message.senderId,
      group_id: groupId,
    });

    if (follow && message.user.questfollow === false) {
      message.user.questfollow = true;
      message.user.balance += 25000000;
      await bot(`–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ 25.000.000 ${val1}`);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (message.user.settings.agent === undefined) {
      message.user.settings.agent = false;
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—è
    let text = ``;

    // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text += `üÜî –í–∞—à ID: ${message.user.uid === message.user.astats.fakeid ? message.user.uid : message.user.astats.fakeid}\n`;

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã
    if (spoler.includes(message.user.id)) {
      text += "üî•üíØ –°–æ–∑–¥–∞—Ç–µ–ª—å\n";
      const programmerEmojis = ["üíª", "üë®‚Äçüíª", "üë©‚Äçüíª", "‚öôÔ∏è", "üõ†Ô∏è", "üñ•Ô∏è", "üíæ", "üíø"];
      const randomEmoji = programmerEmojis[Math.floor(Math.random() * programmerEmojis.length)];
      text += `${randomEmoji} –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç ${randomEmoji}\n`;
    }

    // –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const statuses = [
      { condition: message.user.prazdnikbussines, text: "üéÑLast ChristmasüéÑ" },
      { condition: message.user.settings.imperator, text: "üëë IMPERATOR üëë" },
      { condition: message.user.settings.topdon, text: "üéâ DüåüOüíñN üéä" },
      { condition: message.user.settings.vip, text: "üëë VIP —Å—Ç–∞—Ç—É—Å" },
      { condition: message.user.settings.premium, text: "üëë Premium —Å—Ç–∞—Ç—É—Å" },
      { condition: message.user.settings.titan, text: "üëë Titan —Å—Ç–∞—Ç—É—Å" },
      { condition: message.user.settings.joker, text: "üÉè –î–∂–æ–∫–µ—Ä" },
      { condition: message.user.settings.busi, text: "ü§µ –ë–∏–∑–Ω–µ—Å–º–µ–Ω" },
      { condition: message.user.settings.king, text: "üåà–ö–û–†–û–õ–¨üåà" }
    ];

    statuses.forEach(status => {
      if (status.condition) text += `${status.text}\n`;
    });

    // –û—Å–æ–±—ã–π —Å—Ç–∞—Ç—É—Å
    if (message.user.ostat > 0 && 
        !["–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "VIP", "Titan", "Premium", "–ò–≥—Ä–æ–∫"].includes(message.user.stock.status)) {
      text += `\nüÜï –°—Ç–∞—Ç—É—Å: [${ostats[message.user.ostat - 1].smile}]\n–ë–∞—Ñ—Ñ: ${ostats[message.user.ostat - 1].buff}\n\n`;
    }

    // –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ä–æ–ª–∏
    if (message.user.settings.astat) {
      const roles = {
        1: "üë§ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
        2: "üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        3: "ü§ó –ì–ª.–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        4: "‚ôªÔ∏è –ó–∞–º —Å–æ–∑–¥–∞—Ç–µ–ª—è",
        5: "‚ùÑÔ∏è –û—Å–Ω–æ–≤–∞—Ç–µ–ª—å",
        6: "üëë –í—Å–µ–≤—ã—à–Ω–∏–π –∞–¥–º–∏–Ω"
      };

      const userRole = message.user.settings.adm;
      if (roles[userRole]) text += roles[userRole] + "\n";
      
      for (let i = 1; i < userRole; i++) {
        if (roles[i]) text += roles[i] + "\n";
      }

      if (userRole > 6) text += "‚ùÑÔ∏è –£–ø—Ä–∞–≤–ª—è—é—â–∏–π \n";
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text += `üîÖ –£—Ä–æ–≤–µ–Ω—å: ¬´${message.user.levl}¬ª\n`;

    // –í–∞–ª—é—Ç–∞ –∏ —Ä–µ—Å—É—Ä—Å—ã
    text += `\nüí≥ –í–∞–ª—é—Ç—ã:\n`;
    text += `üí∞ –ù–∞–ª–∏—á–Ω—ã–º–∏: ${message.user.inf ? '‚àû' : utils.sp(message.user.balance)} ${val1}\n`;
    if (message.user.bank > 0) text += `üí≥ –í –±–∞–Ω–∫–µ: ${utils.sp(message.user.bank)} ${val1}\n`;
    if (message.user.btc > 0) text += `üåê –ë–∏—Ç–∫–æ–∏–Ω—ã: ${utils.sp(message.user.btc)} BTC\n`;
    if (message.user.rating > 0) text += `üëë –†–µ–π—Ç–∏–Ω–≥: ${utils.sp(message.user.rating)}\n`;
    text += `‚ö° –≠–Ω–µ—Ä–≥–∏—è: ${message.user.energy}\n`;
    if (message.user.opit > 0) text += `„ÄΩÔ∏è –û–ø—ã—Ç: ${utils.sp(message.user.opit)}\n`;
    if (message.user.balance2 > 0) text += `üí∏ ${utils.sp(message.user.balance2)} ${val4}\n`;

    // –ò–º—É—â–µ—Å—Ç–≤–æ
    const hasProperty = 
      message.user.transport.car || message.user.transport.yacht || 
      message.user.transport.airplane || message.user.transport.helicopter || 
      message.user.realty.home || message.user.business || 
      message.user.misc.phone;

    if (hasProperty && message.user.marriage.partner === 0) {
      text += `\n‚ôªÔ∏è –ò–º—É—â–µ—Å—Ç–≤–æ:\n`;

      // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
      const transports = [
        { type: 'car', emoji: 'üöó', items: cars },
        { type: 'yacht', emoji: 'üõ•', items: yachts },
        { type: 'airplane', emoji: 'üõ©', items: airplanes },
        { type: 'helicopter', emoji: 'üöÅ', items: helicopters }
      ];

      transports.forEach(transport => {
        if (message.user.transport[transport.type]) {
          const customName = message.user.astats[transport.type];
          const defaultName = transport.items[message.user.transport[transport.type] - 1].name;
          text += `‚†Ä${transport.emoji} ¬´${customName === false ? defaultName : customName}¬ª`;
          if (transport.type === 'car' && message.user.scar.gosnomer !== "undefined") {
            text += ` [${message.user.scar.gosnomer}]`;
          }
          text += `\n`;
        }
      });

      // –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
      if (message.user.realty.home) {
        const customName = message.user.astats.homes;
        const defaultName = homes[message.user.realty.home - 1].name;
        text += `‚†Äüè† ¬´${customName === false ? defaultName : customName}¬ª\n`;
      }

      if (message.user.realty.apartment) {
        const customName = message.user.astats.apartment;
        const defaultName = apartments[message.user.realty.apartment - 1].name;
        text += `‚†Äüåá ¬´${customName === false ? defaultName : customName}¬ª\n`;
      }

      // –¢–µ—Ö–Ω–∏–∫–∞ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
      const items = [
        { type: 'videocard', emoji: 'üìº', items: videocards, count: message.user.misc.videocard_count },
        { type: 'minertool', emoji: 'üîß', items: minertool },
        { type: 'tree', emoji: 'üå≥', items: trees },
        { type: 'phone', emoji: 'üì±', items: phones },
        { type: 'computer', emoji: 'üñ•', items: computers },
        { type: 'farm', emoji: 'üîã', items: farms, count: message.user.misc.farm_count }
      ];

      items.forEach(item => {
        if (message.user.misc[item.type]) {
          text += `‚†Ä${item.emoji} ¬´${item.items[message.user.misc[item.type] - 1].name}¬ª`;
          if (item.count) text += `(${utils.sp(item.count)} —à—Ç.)`;
          text += `\n`;
        }
      });

      // –ë–∏–∑–Ω–µ—Å—ã
      if (message.user.business?.length > 0) {
        text += `üè¢ –ë–∏–∑–Ω–µ—Å—ã –Ω–∞ ${val4}:\n`;
        message.user.business.forEach(business => {
          const businessInfo = businesses[business.id - 1][business.upgrade - 1];
          text += `${businessInfo.name}\n`;
        });
      }

      if (message.user.business2?.length > 0) {
        text += 'üè¢ –ë–∏–∑–Ω–µ—Å—ã –Ω–∞ –≤–∞–ª—é—Ç—É:\n';
        message.user.business2.forEach(business2 => {
          const businessInfo = businesses2[business2.id - 1][business2.upgrade - 1];
          text += `${businessInfo.icon} ${businessInfo.name}\n`;
        });
      }

      // –ó–≤–µ–∑–¥—ã
      const stars = [
        { condition: message.user.stars1, text: '‚òÄ –°–æ–ª–Ω—Ü–µ' },
        { condition: message.user.stars2, text: 'üå† –°–∏—Ä–∏—É—Å' },
        { condition: message.user.stars3, text: 'üõë –ö—Ä–∞—Å–Ω—ã–π –≥–∏–≥–∞–Ω—Ç' },
        { condition: message.user.stars4, text: 'üß¨ –ü–ª–∞–∑–º–æ–≤—ã–π –≥–∏–≥–∞–Ω—Ç' },
        { condition: message.user.stars5, text: 'üí∞ –î–æ–Ω–∞—Ç–Ω—ã–π –≥–∏–≥–∞–Ω—Ç' }
      ];

      const hasStars = stars.some(star => star.condition);
      if (hasStars) {
        text += `\nüí´ –ó–≤–µ–∑–¥—ã:\n`;
        stars.forEach(star => {
          if (star.condition) text += `‚†Ä${star.text}\n`;
        });
      }
    }

    // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    text += `\n\n‚è≥ ${message.user.regDate}`;

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    const keyboard = {
      "inline": true,
      "buttons": [
        [{
          "action": {
            "type": "text",
            payload: JSON.stringify({ command: `—Ç–æ–ø–∏–∫` }),
            "label": `üëÄ –ê–Ω–∏–º–µ`
          },
          "color": "positive"
        }],
        ...(!message.user.now?.kv10 ? [[{
          "action": {
            "type": "text",
            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
          },
          "color": "positive"
        }]] : []),
        [{
          "action": {
            "type": "text",
            payload: JSON.stringify({ command: `—É—Ä–æ–≤–µ–Ω—å` }), // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —É—Ä–æ–µ–Ω—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å
            "label": `‚≠ê –£—Ä–æ–≤–µ–Ω—å`
          },
          "color": "positive"
        }]
      ].filter(Boolean)
    };

    return bot(`–≤–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n${text}`, {
      attachment: message.user.photo,
      keyboard: JSON.stringify(keyboard)
    });
  }
});

cmd.hear(/^(?:–ø—Ä–æ—Ñ–∏–ª—å —Ñ–æ—Ç–æ|–ø—Ä–æ—Ñ —Ñ–æ—Ç–æ|–ø—Ñ–æ—Ç–æ|—Ñ–ø—Ä–æ—Ñ)\s(.*)$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1 || message.chat.type === 2) {
        let photoUrl = message.args[1];
        let isValid = false;

        if (photoUrl.startsWith("https://vk.com/")) {
            photoUrl = photoUrl.slice(15);
            isValid = true;
        } else if (
            photoUrl.startsWith("photo-") ||
            photoUrl.startsWith("video-") ||
            photoUrl.startsWith("audio") ||
            photoUrl.startsWith("doc") ||
            photoUrl.startsWith("photo") // –î–æ–±–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ
        ) {
            isValid = true;
        }

        if (isValid) {
            message.user.photo = photoUrl;
            try {
                await bot(`–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–∑–º–µ–Ω–µ–Ω ü§ó`, {
                    attachment: photoUrl,
                });
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                return bot(`–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.`);
            }

        } else {
            return bot(
                `–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.`
            );
        }
    }
});

module.exports = commands;