let utils = require('../utils.js');
const fs = require('fs');
const cheerio = require('cheerio');
const request = require('request-promise');

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const logFilePath = './casino.log'; // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤
const logStream = fs.createWriteStream(logFilePath, { flags: 'a' }); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª

function log(message, level = 'info') {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${level.toUpperCase()}] ${message}\n`;
    // console.log(logMessage); // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    logStream.write(logMessage); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
}

// –ü–µ—Ä–µ–Ω–æ—Å–∏–º —á—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å—Ä–∞–∑—É
const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
let tokenData = null;
try {
    tokenData = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'info');
} catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${error}`, 'error');
    // –ú–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    process.exit(1); // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —Ç–∞–∫ –∫–∞–∫ —Ç–æ–∫–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã
}

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≤–∞–ª—é—Ç
const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';
let tokenData3 = null;
try {
    tokenData3 = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
    log('–í–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'info');
} catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: ${error}`, 'error');
    //–ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    tokenData3 = { val1: '?', val2: '?', val3: '?', val4: '?', val5: '?' };
    //process.exit(1);
}

let casino = require("../database/casino.json");
let double = require('../database/users.json')
let chats = require('../database/chats.json')

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 
// –†–∞–∑–¥–µ–ª—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
async function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };
    try {
        await fs.promises.writeFile(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', 'info');
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: ${error}`, 'error');
    }
}

// –ö–µ—à–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤–∞–ª—é—Ç, —á—Ç–æ–±—ã –Ω–µ —á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
let val1 = tokenData3.val1;
let val2 = tokenData3.val2;
let val3 = tokenData3.val3;
let val4 = tokenData3.val4;
let val5 = tokenData3.val5;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
const commands = {
    hear: (pattern, action) => {
        commands.list.push([pattern, action]);
    },
    list: [], // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
};

// –ò—Å–ø–æ–ª—å–∑—É–µ–º Map –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å—é
const activeBets = new Map();

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–∑–∏–Ω–æ
const BASE_MULTIPLIERS = [0, 0.25, 0.5, 0.75, 1, 1.01, 1.05, 1.1, 1.25, 1.5, 2]; // –ë–∞–∑–æ–≤—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
const VIP_PREMIUM_NALOG_BONUS = 0.01; // –ë–æ–Ω—É—Å –∫ –Ω–∞–ª–æ–≥—É –¥–ª—è VIP/Premium
const MAX_MULTIPLIER = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑–º–æ–∂–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
const MIN_BET_FOR_ADDITIONAL_MULTIPLIERS = 10000; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –¥–æ–ø. –º–Ω–æ–∂–∏—Ç–µ–ª–µ–π

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–≤–∫–∏
function calculateTax(betAmount, isVip, isPremium) {
    let nalog = 0.01; // –ë–∞–∑–æ–≤—ã–π –Ω–∞–ª–æ–≥

    // Adjust tax based on bet amount ranges
    if (betAmount >= 1000) nalog = 0.015;
    if (betAmount >= 10000) nalog = 0.02;
    if (betAmount >= 100000) nalog = 0.025;
    if (betAmount >= 1000000) nalog = 0.03;
    if (betAmount >= 10000000) nalog = 0.035;

    // Apply VIP/Premium bonus
    if (isVip) nalog += VIP_PREMIUM_NALOG_BONUS;
    if (isPremium) nalog += VIP_PREMIUM_NALOG_BONUS;

    return nalog;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–Ω–æ–∂–∏—Ç–µ–ª—è
function chooseMultiplier(betAmount, isChatLevel3, hasCasinoPlus, hasCasinoMinus) {
    let multipliers = [...BASE_MULTIPLIERS];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–≤–æ–∫
    if (betAmount >= MIN_BET_FOR_ADDITIONAL_MULTIPLIERS) {
        multipliers.push(0.25, 1.5, 3);
    }

    // –£—á–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
    if (isChatLevel3) multipliers.push(3, 1, 2, 5);

    // –£—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –∫–∞–∑–∏–Ω–æ
    if (hasCasinoPlus) multipliers = [1, 2];
    if (hasCasinoMinus) multipliers = [0.25, 0.5, 0.75];

    // Ensure multipliers are within acceptable range after manipulations
    multipliers = multipliers.filter(m => m <= MAX_MULTIPLIER);

    return utils.pick(multipliers);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
async function isFraudulentActivity(userId, betAmount, user) {
    let reason = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

   // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π
   const MIN_WIN_RATE = 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π (10%)
   if (!user.totalWins) user.totalWins = 0;
   if (!user.totalLosses) user.totalLosses = 0;

   const totalGames = user.totalWins + user.totalLosses;

   if (totalGames >= 100) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Å—ã–≥—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä
       const winRate = user.totalWins / totalGames;
       if (winRate < MIN_WIN_RATE) {
           log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π (${winRate.toFixed(2)}).`, 'warning');
           reason = '–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π';
           return reason; // –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π
       }
   }

   return reason; // –ï—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö (–ø—Ä–∏–º–µ—Ä)
function cleanupOldStakeData(users) {
  const now = Date.now();
  const MAX_DATA_AGE_DAYS = 30;
  const MAX_DATA_AGE_MS = MAX_DATA_AGE_DAYS * 24 * 60 * 60 * 1000;

  for (const user of users) {
    if (user.stakeTimestamps) {
      user.stakeTimestamps = user.stakeTimestamps.filter(timestamp => timestamp > now - MAX_DATA_AGE_MS);
    }
  }
}

commands.hear(/^(?:–∫–∞–∑–∏–Ω–æ|üé≤ –ö–∞–∑–∏–Ω–æ|–∞–∑–∏–Ω–æ|üé∞ –ö–∞–∑–∏–Ω–æ)\s(.*)$/i, async (message, bot) => {
   
    if (!message.isChat ) {
        const userId = message.senderId; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ betAmountInput –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        const betAmountInput = message.args[1];

        if (!betAmountInput) {
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –≤–≤–µ–ª —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.`, 'warning');
            return bot(`–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.`);
        }

          // –û—á–∏—Å—Ç–∫–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã (–¥—É–±–ª–∏–∫–∞—Ç, —á—Ç–æ–±—ã betAmount –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∫–Ω–æ–ø–æ–∫)
          let betAmount = betAmountInput.replace(/(\.|\,)/gi, "");
          betAmount = betAmount.replace(/(–∫|k)/gi, "000");
          betAmount = betAmount.replace(/(–º|m)/gi, "000000");
          betAmount = betAmount.replace(/(–≤–∞–±–∞–Ω–∫|–≤–æ–±–∞–Ω–∫|–≤—Å–µ|–≤—Å—ë)/gi, message.user.balance);
  
          if (!Number(betAmount)) {
              log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏: ${betAmountInput}.`, 'warning');
              return bot(`–í—ã –≤–≤–µ–ª–∏ –±—É–∫–≤—ã, –∞ –Ω–µ —á–∏—Å–ª–æ`);
          }
        betAmount = Math.floor(Math.round(Number(betAmount)));

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º betAmount
        const isTrapFirst = Math.random() < 0.5;
        let buttons;

       if (isTrapFirst) {
            buttons = [
                [{
                    action: {
                        type: 'text',
                        payload: {
                            command: `–∫–∞–∑–∏–Ω–æ –≤—Å–µ`,
                        },
                        label: `üòà`,
                    },
                    color: 'negative', // –∫—Ä–∞—Å–Ω—ã–π
                }],
                [{
                    action: {
                        type: 'text',
                        payload: {
                            command: `–∫–∞–∑–∏–Ω–æ ${betAmount}`,
                        },
                        label: `üé∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ (${utils.sp(betAmount)})`,
                    },
                    color: 'positive', // –∑–µ–ª–µ–Ω–∞—è
                }]
            ];
        } else {
            buttons = [
                [{
                    action: {
                        type: 'text',
                        payload: {
                            command: `–∫–∞–∑–∏–Ω–æ ${betAmount}`,
                        },
                        label: `üé∞ –ü–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ (${utils.sp(betAmount)})`,
                    },
                    color: 'positive', // –∑–µ–ª–µ–Ω–∞—è
                }],
                [{
                    action: {
                        type: 'text',
                        payload: {
                            command: `–∫–∞–∑–∏–Ω–æ –≤—Å–µ`,
                        },
                        label: `üòà`,
                    },
                    color: 'negative', // –∫—Ä–∞—Å–Ω—ã–π
                }]
            ];
        }
         if (Number(betAmountInput) <= 0) {
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏.`, 'warning');
            return bot(`–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
        }

        const smileos = utils.pick(["üôÇ", "üòá", "üòä", "ü•∞", "üòç", "ü§©", "üòò", "üòó", "üòô", "üòö"]);
        const smileyes = utils.pick(["üôÇ", "üòÉ", `üòÑ`, `ü§ë`, `‚ò∫`, `üòÇ`, `ü§©`, `üòé`, `ü•≥`, `ü§ó`]);
        const smileno = utils.pick([`üòï`, `üòî`, `üò´`, `üò©`, `üòí`, `üòì`, `üò•`, `üò¢`, `üòû`, `üòü`]);

        if (betAmount > message.user.balance) {
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å ${betAmount}, –∏–º–µ—è –Ω–∞ –±–∞–ª–∞–Ω—Å–µ ${message.user.balance}.`, 'warning');
            return bot(`—É –≤–∞—Å –Ω–µ—Ç –¥–∞–Ω–Ω–æ–π —Å—É–º–º—ã –Ω–∞ –±–∞–ª–∞–Ω—Å–µ - ${utils.sp(message.user.balance)} ${val1}`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
        const fraudReason = await isFraudulentActivity(userId, betAmount, message.user);
        if (fraudReason) {
            log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}. –ü—Ä–∏—á–∏–Ω–∞: ${fraudReason}. –°—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.`, 'warning');
            return bot(`–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü—Ä–∏—á–∏–Ω–∞: ${fraudReason}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (activeBets.has(userId)) {
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É, –∏–º–µ—è –∞–∫—Ç–∏–≤–Ω—É—é.`, 'warning');
            return bot('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.');
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏
        activeBets.set(userId, true);
        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –∏–≥—Ä—É –≤ –∫–∞–∑–∏–Ω–æ —Å–æ —Å—Ç–∞–≤–∫–æ–π ${betAmount}.`);

        try {
            const isVip = message.user.settings.vip === true;
            const isPremium = message.user.settings.premium === true;
            const isChatLevel3 = message.isChat && chats && chats.find(chat => chat.id === message.chatId)?.statuepeoplelvl >= 3;
            const hasCasinoPlus = message.user.casinoplus > 0;
            const hasCasinoMinus = message.user.casinominus > 0;

            //–£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞
            message.user.balance -= betAmount;

            let multiply = 1; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let questCondition = false; // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∫–≤–µ—Å—Ç–∞
            let nalog = 0; // –û–±—ä—è–≤–ª—è–µ–º nalog –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            let winnings = 0; // –û–±—ä—è–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à

            // –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —Ä–∞–≤–Ω–∞ 1, —Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å 2
            if (betAmount === 1) {
                multiply = 2;
                questCondition = true; // –ö–≤–µ—Å—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω
                 nalog = calculateTax(betAmount, isVip, isPremium);
                winnings = Math.max(0, Math.floor(Math.round(betAmount * multiply * (1 - nalog) + betAmount * nalog)))//–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à—å 0
                log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ—Å—Ç–∞–≤–∏–ª 1 –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏–ª x2.`, 'info');
            } else {
                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–ª–æ–≥
                nalog = calculateTax(betAmount, isVip, isPremium);

                // –í—ã–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
                let multipliers = [0, 0.25, 0.5, 0.75, 1, 1.01,0.5, 1.05, 0.5,  1.1, 1.25, 1.5, 2];  // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è
                multiply = utils.pick(multipliers); // –±–µ—Ä–µ–º –∏–∑ —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–¥–æ
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤ (Joker)
                if (message.user.settings.joker === true && message.user.inf === true) {
                    multiply = message.user.infcas;
                }

                // –£—á–µ—Ç –±–æ–Ω—É—Å–æ–≤ –∫–∞–∑–∏–Ω–æ
                if (message.isChat && chats) {
                    const chat = chats.find(chat => chat.id === message.chatId);
                    if (chat) {
                        if (chat.statuepeoplelvl >= 1) {
                            multiply = utils.pick([multiply, 3]);
                        }
                        if (chat.statuepeoplelvl >= 2) {
                            multiply = utils.pick([multiply, 100]);
                        }
                        if (chat.statuepeoplelvl >= 3) {
                            multiply = utils.pick([multiply, 200]);
                        }
                    }
                }
               winnings = Math.floor(Math.round(betAmount * multiply * (1 - nalog) + betAmount * nalog))
            }

             message.user.balance += winnings;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–∞–∑–∏–Ω–æ
            if (multiply < 1 && message.user.settings.adm < 1) {
                casino.balance += Number(Math.floor(Math.round(betAmount - Math.floor(Math.round(betAmount * multiply)))));
            }

            if (multiply > 1 && message.user.settings.adm < 1) {
                casino.balance -= Number(Math.floor(Math.round((Math.floor(Math.round(betAmount * multiply)) - betAmount) * (1 - nalog))));
            }

             // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞)
           if (betAmount === 1 ) {
               if(winnings > 0)  message.user.totalWins = (message.user.totalWins || 0) + 1;
            } else {
                if (multiply >= 1) message.user.totalWins = (message.user.totalWins || 0) + 1;
                else message.user.totalLosses = (message.user.totalLosses || 0) + 1;
            }

            message.user.lastResult = multiply >= 1 ? 'win' : 'loss'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫—Ä–æ–º–µ —Å–ª—É—á–∞—è —Å–æ —Å—Ç–∞–≤–∫–æ–π 1

             // –ë–æ–Ω—É—Å–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è —á–∞—Ç–∞
            if (message.isChat && chats) {
                const chat = chats.find(chat => chat.id === message.chatId);
                if (chat && chat.statuepeoplelvl >= 3) {
                    const multileaf = utils.pick([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                        0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6,
                        0, 0, 0, 0,
                    ]);

                    if (multileaf === 1) {
                        message.user.leaf += 20;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: –ª–∏—Å—Ç–∏–∫–∏ (20 —à—Ç)');
                    } else if (multileaf === 2) {
                        message.user.ruds.plazma += 10;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: –ø–ª–∞–∑–º–∞ (10 —à—Ç)');
                    } else if (multileaf === 3) {
                        message.user.ruds.obsidian += 30;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: –æ–±—Å–∏–¥–∏–∞–Ω (30 —à—Ç)');
                    } else if (multileaf === 4) {
                        message.user.—Ä—É–± += 50;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: ${val2} (50 —à—Ç)');
                    } else if (multileaf === 5) {
                        message.user.bilet += 2;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: –ë–∏–ª–µ—Ç—ã –¥–ª—è —Ñ–æ—Ä—Ç—É–Ω—ã (2 —à—Ç)');
                    } else if (multileaf === 6) {
                        message.user.sprcoin += 10;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: SpringCoin (10 —à—Ç)');
                    } else if (multileaf === 7) {
                        message.user.balance2 += 5000;
                        await bot('üé∞–£–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\nüé≤–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑: ${val4} (5.000 —à—Ç)');
                    }
                }
            }


             if (typeof message.user.questcasino === "number" && message.user.questcasino !== true) {
                 if (questCondition && winnings > 0) {
                    message.user.questcasino++;



                    if (message.user.questcasino >= 5) {
                        await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã 5 —Ä–∞–∑ –≤—ã–∏–≥—Ä–∞–ª–∏ –≤ –∫–∞–∑–∏–Ω–æ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 1 –î–æ–Ω–∞—Ç-–∫–µ–π—Å.`);
                        message.user.c3 += 1;
                         message.user.questcasino = true; 

                    }
                } else {
                     message.user.questcasino = Math.max(0, message.user.questcasino); 
                 
                }
            }

            let photo = ``;
            if (multiply > 1) photo = ``;
            if (multiply === 1) photo = ``;
            if (multiply < 1) photo = ``;

            let wow = utils.pick([`üòÉ`, `üòÑ`, `üòè`, `üôÉ`, `üôÇ`, `üò≤`, `ü§§`]);
            let txt = utils.pick([`–í–∞–º –æ—á–µ–Ω—å –ø–æ–≤–µ–∑–ª–æ!`, `–í—ã –≤–µ–∑—É—á–∏–π!`, `–ü–æ–≤–µ–∑–ª–æ-–ø–æ–≤–µ–∑–ª–æ`, `–£–¥–∞—á–∞ ‚Äî —Å –≤–∞–º–∏!`, `–î–∞ —Ç—ã –≤–µ–∑—É—á–∏–π!`]);

            const resultMessage = `${multiply === 1
                ? `${txt} ‚Äî –≤–∞—à–∏ –¥–µ–Ω—å–≥–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–∏ –≤–∞—Å (x${multiply}) ${smileos}`
                : `${multiply < 1
                    ? `–≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ ${utils.sp(betAmount - betAmount * multiply)} ${val1} üö´\n‚ùå ¬ª –°—Ç–∞–≤–∫–∞ —Å–≥–æ—Ä–µ–ª–∞ –Ω–∞ x${multiply} ${smileno}`
                    : `–≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(Math.floor((betAmount * multiply - betAmount) * (1 - nalog)))} ${val1} üíµ\n${wow} ¬ª ${txt}\n‚ôªÔ∏è ¬ª –£–º–Ω–æ–∂–µ–Ω–∞ —Å—Ç–∞–≤–∫–∞ –Ω–∞ x${multiply} ${smileyes}`
                }`
                }\nüí∞ ¬ª –ë–∞–ª–∞–Ω—Å: ${utils.sp(message.user.balance)} ${val1}`;

                if (multiply > 1){
                    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && !message.user.now.kv4){
                        
                        message.user.c6 += 1;
                        message.user.now.kv4 = true;
await bot(`‚úî —Ç—ã –≤—ã–π–≥—Ä–∞–ª –≤ –∫–∞–∑–∏–Ω–æ –∏ –ø–æ–ª—É—á–∞–µ—à—å –ø–æ–¥–∞—Ä–æ–∫ - 1 —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–µ–π—Å

üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –∫–∞–∑–∏–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Å—Ä—ã–≤—É –±–æ–ª—å—à–æ–≥–æ –ø—Ä–∏–∑–∞!`, {
    keyboard: JSON.stringify({
      "inline": true,
      "buttons": [
        [{
          "action": {
            "type": "text",
            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
          },
          "color": "positive"
        }]
      ]
    })
  })


                    }


                }



            await bot(resultMessage, {
                attachment: photo,
                keyboard: JSON.stringify({
                    inline: true,
                    buttons: buttons,
                }),
            });
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–≤–µ—Ä—à–∏–ª –∏–≥—Ä—É. –°—Ç–∞–≤–∫–∞: ${betAmount}, –º–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiply}, –≤—ã–∏–≥—Ä—ã—à: ${winnings}, –±–∞–ª–∞–Ω—Å: ${message.user.balance}.`);

        } catch (error) {
            log(`–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${error}`, 'error');
            await bot('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'); // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        } finally {
            activeBets.delete(userId);
        }
    } else {
        return bot(`–∫–∞–∑–∏–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª—Å`)
    }
});



//–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –≤–∞–ª—é—Ç
setInterval(async () => {
    try {
        const data = await fs.promises.readFile(tokensFilePath3, 'utf8');
        const newTokens = JSON.parse(data);
        val1 = newTokens.val1;
        val2 = newTokens.val2;
        val3 = newTokens.val3;
        val4 = newTokens.val4;
        log('–í–∞–ª—é—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', 'info');
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞–ª—é—Ç: ${error}`, 'error');
    }
}, 5000);
// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø—Ä–∏–º–µ—Ä - –∫–∞–∂–¥—ã–π —á–∞—Å)
setInterval(() => {
  cleanupOldStakeData(double); // double - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
}, 3600000);

module.exports = commands.list;
// module.exports = commands;