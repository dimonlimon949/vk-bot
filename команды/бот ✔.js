let utils = require('../utils.js')
const { VK } = require('vk-io');
let double = require('../database/users.json')
const fs = require('fs');
const path = require('path');
const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';


const vk = require('../vk-api.js');
const commands = []

function getToken() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
      return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
  }

const tokenData = getToken();


const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

cmd.hear(/^(?:–∫–æ–Ω—Å–æ–ª—å|console|—Ç–µ—Ä–º—É–∫—Å|termux|cmd|command)\s+(.+)$/i, async (message, bot) => {
    const command = message.text.split(' ').slice(1).join(' ').trim();
    
    if (!command) {
        return message.send('‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –∫–æ–Ω—Å–æ–ª—å [–∫–æ–º–∞–Ω–¥–∞]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–Ω—Å–æ–ª—å dir');
    }

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –û–°
    const dangerousCommands = [
        // Unix/Linux/Termux –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        'rm -rf', 'sudo', 'chmod', 'dd', 'mkfs', 'fdisk', 
        ':(){:|:&};:', 'mkfs', 'mv /', '> /dev/sda', 
        'chmod -R 777 /', 'wget', 'curl | sh',
        
        // Windows –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        'format', 'del /f /s /q', 'rd /s /q', 
        'shutdown', 'taskkill /f /im', 'reg delete',
        
        // –û–±—â–∏–µ –æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        'passwd', 'adduser', 'useradd', 'net user',
        '> /etc/', '| bash', '| sh'
    ];

    if (dangerousCommands.some(cmd => command.toLowerCase().includes(cmd.toLowerCase()))) {
        return message.send('‚ùå –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞—Å–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—Ä–µ—â–µ–Ω–æ!');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if (command.length > 500) {
        return message.send('‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞! –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.');
    }

    try {
        const { exec } = require('child_process');
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–æ–ª–æ—á–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
        const shell = process.platform === 'win32' ? 'cmd.exe' : '/bin/bash';
        const shellOption = process.platform === 'win32' ? '/c' : '-c';
        
        exec(command, { 
            timeout: 15000,
            shell: shell,
            maxBuffer: 1024 * 1024 * 5 // 5MB –±—É—Ñ–µ—Ä
        }, async (error, stdout, stderr) => {
            // –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–µ
            let mainResponse = `üîß –ö–æ–º–∞–Ω–¥–∞: ${command}\n`;
            mainResponse += `üíª –û–°: ${process.platform}\n\n`;
            
            if (error) {
                mainResponse += `‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code || 'N/A'}\n`;
                if (error.signal) {
                    mainResponse += `üì∂ –°–∏–≥–Ω–∞–ª: ${error.signal}\n`;
                }
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.send(mainResponse);

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —á–∞—Å—Ç—è–º–∏
            const sendLongText = async (text, prefix = '', type = 'output') => {
                if (!text || text.trim().length === 0) return;
                
                const maxLength = 4096 - prefix.length - 50;
                const chunks = [];
                
                // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
                for (let i = 0; i < text.length; i += maxLength) {
                    let chunk = text.substring(i, i + maxLength);
                    
                    // –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    if (type === 'output') {
                        chunk = chunk.split('\n').map(line => {
                            if (line.length > 200) {
                                return line.substring(0, 197) + '...';
                            }
                            return line;
                        }).join('\n');
                    }
                    
                    chunks.push(chunk);
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
                for (let i = 0; i < chunks.length; i++) {
                    let chunkMessage = prefix;
                    if (chunks.length > 1) {
                        chunkMessage += `[${i + 1}/${chunks.length}]\n`;
                    }
                    chunkMessage += '```\n' + chunks[i] + '\n```';
                    
                    try {
                        await message.send(chunkMessage);
                        // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        await new Promise(resolve => setTimeout(resolve, 500));
                    } catch (sendError) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', sendError);
                    }
                }
            };

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥
            const output = stdout || '';
            const errors = stderr || '';
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ã—á–Ω—ã–π –≤—ã–≤–æ–¥
            if (output.trim()) {
                await sendLongText(output, 'üì§ –í—ã–≤–æ–¥:\n', 'output');
            }

            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏
            if (errors.trim()) {
                await sendLongText(errors, 'üì• –û—à–∏–±–∫–∏:\n', 'error');
            }

            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –±–µ–∑ –≤—ã–≤–æ–¥–∞
            if (!output.trim() && !errors.trim()) {
                if (error) {
                    await message.send('‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, –Ω–æ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞.');
                } else {
                    await message.send('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥.');
                }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if (error) {
                await message.send(`‚è∞ –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.`);
            } else {
                await message.send(`‚è±Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.`);
            }

        });

    } catch (error) {
        await message.send(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`);
    }
});





cmd.hear(/^(?:–±–æ—Ç|–æ –±–æ—Ç–µ|—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$/i, async (message, bot) => {
    const smileng = utils.pick(['üå∑', 'üå∏', 'üåπ', 'üå∫', 'üåº', 'üíê', '‚ù§Ô∏è', 'üíì', 'üíï']);
    let subs;

    // –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const startTime = Date.now();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥ –∏–∑ —Ñ–∞–π–ª–∞
    let commandStats = {};
    const statsPath = path.join(__dirname, '../commandStats.json');
    
    try {
        if (fs.existsSync(statsPath)) {
            const rawData = fs.readFileSync(statsPath, 'utf-8');
            commandStats = JSON.parse(rawData);
        } else {
            console.log('–§–∞–π–ª commandStats.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.');
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ commandStats.json:', err);
    }

    const groupInfo = await vk.api.call('groups.getById', {
        access_token: tokenData.token,
        v: '5.131',
    });

    if (!groupInfo || groupInfo.length === 0) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    }

    const groupId = groupInfo[0].id;

    try {
        subs = await vk.api.groups.getMembers({ group_id: groupId });
    } catch (error) {
        return bot(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã: ${error.message}`);
    }

    const memberIds = subs.items;
    let onlineUsersCount = 0;

    try {
        const usersInfo = await vk.api.users.get({ user_ids: memberIds.join(','), fields: 'online' });
        onlineUsersCount = usersInfo.filter(user => user.online === 1).length;
    } catch (error) {
        return bot(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`);
    }

    let bannedCount = double.filter(user => user.bans.ban === true).length;

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    const topCommands = Object.entries(commandStats)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 5)
        .map(([cmd, count]) => `‚ñ∏ ${cmd}: ${utils.sp(count)} —Ä–∞–∑`)
        .join('\n');

    // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    const uptime = process.uptime();
    const days = Math.floor(uptime / 86400);
    const hours = Math.floor((uptime % 86400) / 3600);
    const minutes = Math.floor((uptime % 3600) / 60);
    const seconds = Math.floor(uptime % 60);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const timeParts = [];
    if (days > 0) timeParts.push(`${days}–¥`);
    if (hours > 0) timeParts.push(`${hours}—á`);
    if (minutes > 0) timeParts.push(`${minutes}–º`);
    if (seconds > 0 || timeParts.length === 0) timeParts.push(`${seconds}—Å`);
    
    const uptimeString = timeParts.join(' ');

    // –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ VK API –∑–∞–ø—Ä–æ—Å–∞
    const vkApiStartTime = Date.now();
    try {
        await vk.api.users.get({ user_ids: 1 });
    } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –Ω–∞–º –≤–∞–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    }
    const vkApiPing = Date.now() - vkApiStartTime;

    // –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞
    const processingTime = Date.now() - startTime;

    const messageText = `ü§ñ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:

üåê –ì—Ä—É–ø–ø–∞: ${groupInfo[0].name}

üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${utils.sp(subs.count)} —á.
‚òÉÔ∏è –ò–≥—Ä–æ–∫–æ–≤ –≤ –±–æ—Ç–µ: ${utils.sp(double.length)}
üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${utils.sp(bannedCount)}
üåç –û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${utils.sp(onlineUsersCount)}
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${uptimeString}

üìä –¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
${topCommands}

üì∂ –ü–∏–Ω–≥:
‚ñ∏ –°–æ–æ–±—â–µ–Ω–∏–µ: ${processingTime} ms.
‚ñ∏ VK API: ${vkApiPing} ms.

${smileng}`;

    // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendStartTime = Date.now();
    
    const result = await bot(messageText, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        "payload": JSON.stringify({ command: "–∫–æ–º–∞–Ω–¥—ã" }),
                        "label": "üìú –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
                    },
                    "color": "secondary"
                }]
            ]
        })
    });

    // –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    const totalTime = Date.now() - startTime;
    
    // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log(`üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã "–±–æ—Ç":`);
    console.log(`‚ñ∏ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${processingTime}ms`);
    console.log(`‚ñ∏ VK API –ø–∏–Ω–≥: ${vkApiPing}ms`);
    console.log(`‚ñ∏ –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);

    return result;
});


cmd.hear(/^(?:–∫–æ–º–∞–Ω–¥—ã|—Ç–æ–ø –∫–æ–º–∞–Ω–¥|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥)$/i, async (message, bot) => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
    let commandStats = {};
    const statsPath = path.join(__dirname, '../commandStats.json');
    
    try {
        if (fs.existsSync(statsPath)) {
            const rawData = fs.readFileSync(statsPath, 'utf-8');
            commandStats = JSON.parse(rawData);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
        return bot('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–∞–Ω–¥');
    }

    if (Object.keys(commandStats).length === 0) {
        return bot('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
    const sortedCommands = Object.entries(commandStats)
        .sort((a, b) => b[1] - a[1]);

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
    const totalCommands = sortedCommands.length;
    const totalUsage = sortedCommands.reduce((sum, [_, count]) => sum + count, 0);
    const mostPopular = sortedCommands[0];
    const leastPopular = sortedCommands[sortedCommands.length - 1];
    const averageUsage = (totalUsage / totalCommands).toFixed(1);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ–ø-20 –∫–æ–º–∞–Ω–¥
    const top20 = sortedCommands
        .slice(0, 20)
        .map(([cmd, count], index) => {
            const medal = index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `${index + 1}.`;
            return `${medal} ${cmd}: ${utils.sp(count)} —Ä–∞–∑`;
        })
        .join('\n');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const analysisText = `üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥:
    
‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: ${utils.sp(totalCommands)}
‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${utils.sp(totalUsage)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${averageUsage} —Ä–∞–∑
‚Ä¢ –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è: "${mostPopular[0]}" (${utils.sp(mostPopular[1])} —Ä–∞–∑)
‚Ä¢ –°–∞–º–∞—è –Ω–µ–ø–æ–ø—É–ª—è—Ä–Ω–∞—è: "${leastPopular[0]}" (${utils.sp(leastPopular[1])} —Ä–∞–∑)`;

    const fullText = `üìú –¢–æ–ø-20 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n${top20}\n\n${analysisText}\n\n‚ÑπÔ∏è –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /–≤—Å–µ–∫–æ–º–∞–Ω–¥—ã`;

    return bot(fullText, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        "payload": JSON.stringify({ command: "–≤—Å–µ–∫–æ–º–∞–Ω–¥—ã" }),
                        "label": "üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
                    },
                    "color": "secondary"
                }],
                [{
                    "action": {
                        "type": "text",
                        "payload": JSON.stringify({ command: "–±–æ—Ç" }),
                        "label": "ü§ñ –û –±–æ—Ç–µ"
                    },
                    "color": "primary"
                }]
            ]
        })
    });
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
cmd.hear(/^(?:–≤—Å–µ–∫–æ–º–∞–Ω–¥—ã|–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)$/i, async (message, bot) => {
    let commandStats = {};
    const statsPath = path.join(__dirname, '../commandStats.json');
    
    try {
        if (fs.existsSync(statsPath)) {
            const rawData = fs.readFileSync(statsPath, 'utf-8');
            commandStats = JSON.parse(rawData);
        }
    } catch (err) {
        return bot('üö® –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥');
    }

    const allCommands = Object.entries(commandStats)
        .sort((a, b) => b[1] - a[1])
        .map(([cmd, count], index) => `${index + 1}. ${cmd}: ${count} —Ä–∞–∑`)
        .join('\n');

    return bot(`üìã –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤—Å–µ–≥–æ ${Object.keys(commandStats).length}):\n\n${allCommands}`);
});

cmd.hear(/^(?:–≤—Å–ø)$/i, async (message, bot) => {


    return bot(`–ö–æ–Ω–µ—á–Ω–æ! –í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π –ø—Ä–∏–º–µ—Ä–Ω–æ 10 000 —Å–∏–º–≤–æ–ª–æ–≤ (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏). –¢–µ–º–∞ ‚Äî "–ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞".

–ò—Å—Ç–æ—Ä–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞: –æ—Ç –ø–µ—Ä–≤—ã—Ö –∏–¥–µ–π –¥–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (–ò–ò) ‚Äî –æ–¥–Ω–∞ –∏–∑ —Å–∞–º—ã—Ö –±—ã—Å—Ç—Ä–æ—Ä–∞–∑–≤–∏–≤–∞—é—â–∏—Ö—Å—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π XXI –≤–µ–∫–∞. –û–¥–Ω–∞–∫–æ –µ–≥–æ –∏—Å—Ç–æ—Ä–∏—è –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–¥–æ–ª–≥–æ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤. –ò–¥–µ—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑—É–º–Ω—ã—Ö –º–∞—à–∏–Ω –≤–æ–ª–Ω–æ–≤–∞–ª–∞ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –≤–µ–∫–∞–º–∏, –æ—Ç –º–∏—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –≥–æ–ª–µ–º–æ–≤ –¥–æ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∞–≤—Ç–æ–º–∞—Ç–æ–≤ XVIII –≤–µ–∫–∞. –ù–æ –ª–∏—à—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ XX –≤–µ–∫–∞ –ò–ò —Å—Ç–∞–ª –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π –Ω–∞—É—á–Ω–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–æ–π.

–†–∞–Ω–Ω–∏–µ –∏–¥–µ–∏ –∏ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ (–¥–æ 1950-—Ö)
–ï—â—ë –≤ –∞–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏ —Ñ–∏–ª–æ—Å–æ—Ñ—ã –∑–∞–¥—É–º—ã–≤–∞–ª–∏—Å—å –æ –ø—Ä–∏—Ä–æ–¥–µ —Ä–∞–∑—É–º–∞ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –≤–æ—Å—Å–æ–∑–¥–∞–Ω–∏—è. –ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª —Ñ–æ—Ä–º–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–∂–µ —Å—Ç–∞–ª–∞ –æ—Å–Ω–æ–≤–æ–π –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –í XVII –≤–µ–∫–µ –†–µ–Ω–µ –î–µ–∫–∞—Ä—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª —Ç–µ–ª–æ –∫–∞–∫ –º–µ—Ö–∞–Ω–∏–∑–º, –∞ —Ä–∞–∑—É–º ‚Äî –∫–∞–∫ –Ω–µ—á—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ, —á—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–∏–ª–æ —É—á—ë–Ω—ã—Ö –Ω–∞ –ø–æ–∏—Å–∫–∏ "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è".

–ü–µ—Ä–≤—ã–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –∫ –ò–ò –±—ã–ª–∏ —Å–¥–µ–ª–∞–Ω—ã –≤ XIX‚ÄìXX –≤–µ–∫–∞—Ö:

–ß–∞—Ä–ª—å–∑ –ë—ç–±–±–∏–¥–∂ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –∫–æ–Ω—Ü–µ–ø—Ü–∏—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–π –º–∞—à–∏–Ω—ã (1837) ‚Äî –ø—Ä–æ–æ–±—Ä–∞–∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.

–ê–¥–∞ –õ–∞–≤–ª–µ–π—Å –Ω–∞–ø–∏—Å–∞–ª–∞ –ø–µ—Ä–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è —ç—Ç–æ–π –º–∞—à–∏–Ω—ã, —Å—Ç–∞–≤ –ø–µ—Ä–≤—ã–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º.

–í 1943 –≥–æ–¥—É –£–æ—Ä—Ä–µ–Ω –ú–∞–∫-–ö–∞–ª–ª–æ–∫ –∏ –£–æ–ª—Ç–µ—Ä –ü–∏—Ç—Ç—Å —Å–æ–∑–¥–∞–ª–∏ –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞, –∑–∞–ª–æ–∂–∏–≤ –æ—Å–Ω–æ–≤—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.

–†–æ–∂–¥–µ–Ω–∏–µ –ò–ò –∫–∞–∫ –Ω–∞—É–∫–∏ (1950‚Äì1960-–µ)
–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ò–ò —Å—á–∏—Ç–∞–µ—Ç—Å—è 1956 –≥–æ–¥, –∫–æ–≥–¥–∞ –Ω–∞ –î–∞—Ä—Ç–º—É—Ç—Å–∫–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —É—á—ë–Ω—ã–µ (–î–∂–æ–Ω –ú–∞–∫–∫–∞—Ä—Ç–∏, –ú–∞—Ä–≤–∏–Ω –ú–∏–Ω—Å–∫–∏, –ö–ª–æ–¥ –®–µ–Ω–Ω–æ–Ω –∏ –¥—Ä.) –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ —Ç–µ—Ä–º–∏–Ω "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.

–í —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –ø–æ—è–≤–∏–ª–∏—Å—å:

–ü–µ—Ä–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏–≥—Ä–∞—é—â–∏–µ –≤ —à–∞—Ö–º–∞—Ç—ã (1951).

–õ–æ–≥–∏—á–µ—Å–∫–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º "–û–±—â–∏–π —Ä–µ—à–∞—Ç–µ–ª—å –ø—Ä–æ–±–ª–µ–º" (1957).

ELIZA (1966) ‚Äî —á–∞—Ç-–±–æ—Ç, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–π –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç–∞.

–û–¥–Ω–∞–∫–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–µ –º–æ—â–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≤—ã—à–µ–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–≤–µ–ª–∏ –∫ "–∑–∏–º–µ –ò–ò" ‚Äî —Å–Ω–∏–∂–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 1970-—Ö.

–≠–ø–æ—Ö–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (1970‚Äì1990-–µ)
–í 1970-—Ö –∞–∫—Ü–µ–Ω—Ç —Å–º–µ—Å—Ç–∏–ª—Å—è –Ω–∞ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã ‚Äî –ø—Ä–æ–≥—Ä–∞–º–º—ã, –∏–º–∏—Ç–∏—Ä—É—é—â–∏–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π —á–µ–ª–æ–≤–µ–∫–æ–º-—ç–∫—Å–ø–µ—Ä—Ç–æ–º. –ü—Ä–∏–º–µ—Ä: MYCIN (1976), –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É—é—â–∏–π –∏–Ω—Ñ–µ–∫—Ü–∏–∏.

–í 1980-—Ö –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–ª–≥–æ—Ä–∏—Ç–º—É –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –∫–ª—é—á–µ–≤—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç—Ç–∞–ø (2000-–µ ‚Äî –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è)
–ü—Ä–æ—Ä—ã–≤—ã –≤ –ò–ò —Å–≤—è–∑–∞–Ω—ã —Å:

–†–æ—Å—Ç–æ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π (GPU, –æ–±–ª–∞—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è).

–ë–æ–ª—å—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–æ–≥—Ä–æ–º–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è).

–ì–ª—É–±–æ–∫–∏–º –æ–±—É—á–µ–Ω–∏–µ–º (—Å–ª–æ–∂–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: —Å–≤—ë—Ä—Ç–æ—á–Ω—ã–µ, —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã).

–ì–ª–∞–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:

2011: IBM Watson –ø–æ–±–µ–∂–¥–∞–µ—Ç –≤ "Jeopardy!".

2012: AlexNet —Å–æ–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ä—ã–≤ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

2016: AlphaGo –æ–±—ã–≥—Ä—ã–≤–∞–µ—Ç —á–µ–º–ø–∏–æ–Ω–∞ –ø–æ –≥–æ.

2020-–µ: ChatGPT, DALL-E, –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.

–ë—É–¥—É—â–µ–µ –ò–ò
–°–µ–π—á–∞—Å –ò–ò –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –º–µ–¥–∏—Ü–∏–Ω–µ, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –ª–æ–≥–∏—Å—Ç–∏–∫–µ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–µ. –ù–æ –æ—Å—Ç–∞—é—Ç—Å—è –≤—ã–∑–æ–≤—ã: —ç—Ç–∏–∫–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞. –†–∞–∑–≤–∏—Ç–∏–µ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏ –Ω–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã—Ö —á–∏–ø–æ–≤ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—è–≤–ª–µ–Ω–∏—é —Å–∏–ª—å–Ω–æ–≥–æ –ò–ò.

–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∫–æ–ª–æ 10 000 —Å–∏–º–≤–æ–ª–æ–≤. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ –¥—Ä—É–≥—É—é —Ç–µ–º–∞—Ç–∏–∫—É), —É—Ç–æ—á–Ω–∏—Ç–µ!`);
});

module.exports = commands;