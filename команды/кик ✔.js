const fs = require('fs');
const { VK } = require('vk-io');
const double = require('../database/users.json')

const commands = [];
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

// --------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ----------
const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';
const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';
const tokensFilePath2 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–∏–¥ –±–µ—Å–µ–¥.json';

function getToken(filePath) {
    try {
        const tokens = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error);
        return null;
    }
}

const tokenData = getToken(tokensFilePath);
const tokenData4 = getToken(tokensFilePath4);
const tokenData2 = getToken(tokensFilePath2);

const spolerIds = tokenData4 ? Object.values(tokenData4)
    .map(id => Number(id))
    .filter(id => Number.isInteger(id) && id > 0) : [];

const chatlogi = tokenData2?.chatlogi;

const vk = require('../vk-api.js'); 



// --------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

async function resolveTargetId(arg, message) {
    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç "reply:123456")
    if (arg.startsWith('reply:')) {
        const repliedMessage = await message.getReply();
        if (repliedMessage) {
            const user = double.find(u => u.id === repliedMessage.user.id);
            return { 
                vkId: repliedMessage.user.id,
                uid: user ? (user.astats?.fakeid || user.uid) : null,
                screenName: repliedMessage.user.screenName
            };
        }
        return null;
    }

    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —á–∏—Å–ª–æ (UID)
    if (!isNaN(Number(arg))) {
        const user = double.find(u => u.uid === Number(arg) || (u.astats && u.astats.fakeid === Number(arg)));
        return user ? { vkId: user.id, uid: user.uid } : null;
    }

    // –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —Å—Å—ã–ª–∫–∞ –í–ö (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)
    const vkLinkMatch = arg.match(/(?:https?:\/\/)?(?:vk\.com|m\.vk\.com)\/([^\/\s]+)/i);
    if (vkLinkMatch) {
        const screenName = vkLinkMatch[1];
        try {
            const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
            if (resolveResponse && resolveResponse.type === 'user') {
                const user = double.find(u => u.id === resolveResponse.object_id);
                return { 
                    vkId: resolveResponse.object_id,
                    uid: user ? (user.astats?.fakeid || user.uid) : null,
                    screenName: screenName
                };
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ resolveScreenName:", error);
        }
    }

    return null;
}

async function kickUser(message, bot, target, reason = "–∫–æ–º–∞–Ω–¥—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞") {
    if (spolerIds.includes(Number(message.user.id))) {
        return message.reply("‚õî –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!");
    }

    const targetData = await resolveTargetId(target, message);
    
    if (!targetData || !targetData.vkId) {
        return message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ + '–∫–∏–∫'\n‚Ä¢ –∫–∏–∫ UID\n‚Ä¢ –∫–∏–∫ vk.com/nickname");
    }

    if (targetData.vkId === message.user.id) {
        return message.reply("ü§¶‚Äç‚ôÇÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!");
    }

    try {
        await vk.api.messages.removeChatUser({ 
            chat_id: message.chatId, 
            user_id: targetData.vkId 
        });

        let infoMessage;
        if (targetData.uid) {
            infoMessage = `üí§ –ò–≥—Ä–æ–∫ UID: ${targetData.uid}`;
        } else if (targetData.screenName) {
            infoMessage = `üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å vk.com/${targetData.screenName}`;
        } else {
            infoMessage = `üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: ${targetData.vkId}`;
        }

        await message.reply(`${infoMessage} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞ ${reason}.`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚ö° –ê–¥–º–∏–Ω [id${message.user.id}|${message.user.tag}] –∫–∏–∫–Ω—É–ª ${infoMessage} –∑–∞ ${reason}.`,
            random_id: 0
        });

    } catch (e) {
        if (e.code === 935) {
            await message.reply("‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ.");
        } else if (e.code === 15) {
            await message.reply("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.");
        } else if (e.code === 936) {
            await message.reply("‚õî –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞.");
        } else {
            console.error(e);
            await message.reply(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ: ${e.message}`);
        }
    }
}








cmd.hear(/^(?:–∫–∏–∫|kick)(?:\s+(.+))?$/i, async (message, bot) => {

            if (message.user.bankik) {
            actionLog.status = 'rejected';
            actionLog.reason = 'admin_disabled';
            await logAction(actionLog);
            return bot(`–æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π ‚ö†`);
        }
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    const actionLog = {
        admin: {
            id: message.user.id,
            tag: message.user.tag
        },
        chatId: message.chatId,
        timestamp: new Date().toISOString(),
        action: 'kick_attempt',
        status: 'started'
    };

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–ª–∏—Å—Ç–∞ –∞–¥–º–∏–Ω–∞


        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (5+ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤, 6+ –¥–ª—è type=4)
        const requiredLevel = message.chat.type === 4 ? 6 : 5;
        if (message.user.settings?.adm < requiredLevel) {
            actionLog.status = 'rejected';
            actionLog.reason = 'insufficient_permissions';
            await logAction(actionLog);
            return message.reply(`üö´ –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∞ ${requiredLevel}+`);
        }

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –ø—Ä–∏—á–∏–Ω—ã
        let targetId;
        let targetInfo = {};
        let kickReason = "–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞";
        const [, reason] = message.text.match(/^(?:–∫–∏–∫|kick)(?:\s+(.+))?$/i) || [];

        // 1. –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (message.replyMessage) {
            targetId = message.replyMessage.senderId;
            targetInfo = {
                type: targetId < 0 ? 'community' : 'user',
                absoluteId: Math.abs(targetId),
                screenName: message.replyMessage.screenName
            };
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –ø–æ—Å–ª–µ "–∫–∏–∫"
            if (reason) kickReason = reason;
        } 
        // 2. –ï—Å–ª–∏ —Ü–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö (UID –∏–ª–∏ —Å—Å—ã–ª–∫–∞)
        else if (reason) {
            const targetArg = reason.split(' ')[0];
            kickReason = reason.slice(targetArg.length).trim() || kickReason;

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ UID (—á–∏—Å–ª–æ)
            if (!isNaN(Number(targetArg))) {
                const user = double.find(u => u.uid === Number(targetArg) || (u.astats && u.astats.fakeid === Number(targetArg)));
                if (user) {
                    targetId = user.id;
                    targetInfo = {
                        type: 'user',
                        absoluteId: user.uid,
                        screenName: user.screenName
                    };
                } else {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID
                    targetId = Number(targetArg);
                    targetInfo = {
                        type: 'user',
                        absoluteId: Math.abs(targetId),
                        screenName: null,
                        unregistered: true
                    };
                }
            }
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É VK
            else {
                const vkLinkMatch = targetArg.match(/(?:https?:\/\/)?(?:vk\.com|m\.vk\.com)\/([^\/\s]+)/i);
                if (vkLinkMatch) {
                    const screenName = vkLinkMatch[1];
                    try {
                        const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
                        if (resolveResponse && resolveResponse.type === 'user') {
                            targetId = resolveResponse.object_id;
                            targetInfo = {
                                type: 'user',
                                absoluteId: Math.abs(targetId),
                                screenName: screenName,
                                unregistered: !double.some(u => u.id === resolveResponse.object_id)
                            };
                        }
                    } catch (error) {
                        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ resolveScreenName:", error);
                    }
                }
            }
        }

        // –ï—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞
        if (!targetId) {
            actionLog.status = 'rejected';
            actionLog.reason = 'no_target';
            await logAction(actionLog);
            return message.reply(`‚ùå –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å:\n‚ñ∏ –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ + "–∫–∏–∫ [–ø—Ä–∏—á–∏–Ω–∞]"\n‚ñ∏ –∫–∏–∫ UID [–ø—Ä–∏—á–∏–Ω–∞]\n‚ñ∏ –∫–∏–∫ vk.com/nick [–ø—Ä–∏—á–∏–Ω–∞]`);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        actionLog.target = {
            id: targetId,
            ...targetInfo
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
        if (spolerIds.includes(targetInfo.absoluteId)) {
            actionLog.status = 'rejected';
            actionLog.reason = 'target_is_creator';
            await logAction(actionLog);
            return message.reply(`‚õî –ù–µ–ª—å–∑—è –∫–∏–∫–∞—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π!`);
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∞–º–æ–∫–∏–∫
        if (targetId === message.user.id) {
            actionLog.status = 'rejected';
            actionLog.reason = 'self_kick_attempt';
            await logAction(actionLog);
            return message.reply(`ü§° –¢—ã —Å–µ—Ä—å–µ–∑–Ω–æ –ø—ã—Ç–∞–µ—à—å—Å—è –∫–∏–∫–Ω—É—Ç—å —Å–µ–±—è?`);
        }

        // –ö–∏–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
        if (targetInfo.type === 'community') {
            actionLog.action = 'community_kick';
            await logAction(actionLog);

            try {
                const members = await vk.api.messages.getConversationMembers({
                    peer_id: message.peerId
                });

                const communityMember = members.items.find(item => item.member_id === targetId);
                if (!communityMember) {
                    actionLog.status = 'failed';
                    actionLog.reason = 'community_not_in_chat';
                    await logAction(actionLog);
                    return message.reply(`‚ùå –°–æ–æ–±—â–µ—Å—Ç–≤–æ *club${targetInfo.absoluteId} –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
                }

                await vk.api.messages.removeChatUser({
                    chat_id: message.chatId,
                    member_id: communityMember.member_id
                });

                actionLog.status = 'success';
                actionLog.reason = kickReason;
                await logAction(actionLog);

                return message.reply(`‚úÖ –°–æ–æ–±—â–µ—Å—Ç–≤–æ *club${targetInfo.absoluteId} –∫–∏–∫–Ω—É—Ç–æ –∑–∞: ${kickReason}`);
            } catch (e) {
                actionLog.status = 'failed';
                actionLog.error = {
                    code: e.code,
                    message: e.message
                };
                await logAction(actionLog);
                
                return handleKickError(e, message);
            }
        } 
        // –ö–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else {
            actionLog.action = 'user_kick';
            actionLog.reason = kickReason;
            await logAction(actionLog);

            try {
                await vk.api.messages.removeChatUser({
                    chat_id: message.chatId,
                    user_id: targetId
                });

                actionLog.status = 'success';
                await logAction(actionLog);

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∏–∫–µ
                let userInfo;
                if (targetInfo.unregistered) {
                    userInfo = `[id${targetId}|–ù–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π]`;
                } else if (targetInfo.screenName) {
                    userInfo = `[id${targetId}|vk.com/${targetInfo.screenName}]`;
                } else if (targetInfo.absoluteId) {
                    userInfo = `UID: ${targetInfo.absoluteId}`;
                } else {
                    userInfo = `ID: ${targetId}`;
                }

                return message.reply(`üí¢ ${userInfo} –±—ã–ª –∫–∏–∫–Ω—É—Ç –∑–∞: ${kickReason}`);

            } catch (e) {
                actionLog.status = 'failed';
                actionLog.error = {
                    code: e.code,
                    message: e.message
                };
                await logAction(actionLog);
                
                return handleKickError(e, message);
            }
        }

    } catch (error) {
        actionLog.status = 'critical_error';
        actionLog.error = {
            message: error.message,
            stack: error.stack
        };
        await logAction(actionLog);
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        return message.reply(`‚ö† –û—à–∏–±–∫–∞: ${error.message}`);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∫–∏–∫–∞
function handleKickError(e, message) {
    if (e.code === 935) {
        return message.reply(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ—Å–µ–¥–µ.`);
    } else if (e.code === 936) {
        return message.reply(`‚õî –ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å —Å–æ–∑–¥–∞—Ç–µ–ª—è —á–∞—Ç–∞.`);
    } else if (e.code === 15) {
        return message.reply(`üîí –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–∏–∫–∞.`);
    } else {
        console.error('–û—à–∏–±–∫–∞ –∫–∏–∫–∞:', e);
        return message.reply(`‚ö† –û—à–∏–±–∫–∞: ${e.message}`);
    }
}




// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function logAction(data) {
    try {
        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –≤—ã–≤–æ–¥–∞
        const statusTranslations = {
            'started': '–Ω–∞—á–∞—Ç–æ',
            'success': '—É—Å–ø–µ—à–Ω–æ',
            'failed': '–æ—à–∏–±–∫–∞',
            'rejected': '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ',
            'critical_error': '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è_–æ—à–∏–±–∫–∞'
        };
        
        const translatedStatus = statusTranslations[data.status] || data.status;

        const logMessage = `üîπ ${data.action.toUpperCase()}:
üë§ –ê–¥–º–∏–Ω: [id${data.admin.id}|${data.admin.tag}]
üéØ –¶–µ–ª—å: ${data.target?.type === 'community' ? '@club'+data.target.absoluteId : '@id'+data.target?.absoluteId}
üìå –ß–∞—Ç: ${data.chatId}
üîÑ –°—Ç–∞—Ç—É—Å: ${translatedStatus}
${data.error ? `‚ùó –û—à–∏–±–∫–∞: ${data.error.message} (–∫–æ–¥ ${data.error.code})` : ''}`;

        await vk.api.messages.send({
            chat_id: chatlogi,
            message: logMessage,
            random_id: 0
        });

        // –î–ª—è –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if (data.status === 'failed' || data.status === 'critical_error') {
            await vk.api.messages.send({
                chat_id: chatlogi,
                message: `üìõ –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n${JSON.stringify(data.error).substring(0, 4000)}`,
                random_id: 0
            });
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏:', e);
    }
}

cmd.hear(/^(?:\/q)$/i, async (message, bot) => {
    let targetUserId = message.user.id;

    if (!targetUserId) {
        return message.reply("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à ID.");
    }

    if (spolerIds.includes(Number(targetUserId))) {
        return message.reply(`–°–æ–∑–¥–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–∫–∏–¥–∞—Ç—å —á–∞—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /q!`);
    }
    try {
        await vk.api.messages.removeChatUser({ chat_id: message.chatId, user_id: targetUserId });
        vk.api.messages.send({
            chat_id: chatlogi,
            message: `‚ö° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å *id${message.user.id} —Å–∞–º–æ–ª–∏–∫–≤–∏–¥–∏—Ä–æ–≤–∞–ª—Å—è –∏–∑ –±–µ—Å–µ–¥—ã!`,
            random_id: 0
        });
    } catch (e) {
        if (e.code === 935) {
            await message.reply(`–í–∞—Å –Ω–µ—Ç –≤ —á–∞—Ç–µ.`);
        } else {
            console.error(e);
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã '/q'. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.");
        }
    }
});

module.exports = commands;