let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json') 

let chats = require('../database/chats.json')


const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './database/tokens.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}


function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);


const tokenData = getToken();

const chatlogi = tokenData.chatlogi;  
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


 
// –ü–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Ä–æ–≤–Ω—è–º (—Ü–µ–Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ –±–æ–Ω—É—Å—ã)
const levelData = require('../spisok/—É—Ä–æ–≤–Ω–∏.js');

function calculateTotalCost(currentLevel) {
  let total = 0;
  for (let i = currentLevel; i < levelData.length - 1; i++) {
    if (levelData[i] !== null) {
      total += levelData[i].price;
    }
  }
  return total;
}

function formatBonusMessage(bonus) {
  if (!bonus) return '–Ω–µ—Ç';
  
  const messages = [];
  if (bonus.balance) messages.push(`+${bonus.balance.toLocaleString()} ${val1}`);
  if (bonus.premium) messages.push('Premium —Å—Ç–∞—Ç—É—Å');
  if (bonus.vip) messages.push('VIP —Å—Ç–∞—Ç—É—Å');
  if (bonus.bilet) messages.push(`+${bonus.bilet} –±–∏–ª–µ—Ç–æ–≤`);
  if (bonus.busi) messages.push('–û—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∫–∏–π –±–∏–∑–Ω–µ—Å');
  if (bonus.farm) messages.push('–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–¥–∫–∞—è —Ñ–µ—Ä–º–∞');
  if (bonus.case10) messages.push(`+${bonus.case10} —Ä–µ–¥–∫–∏—Ö starr drops`);
  if (bonus.case7) messages.push(`+${bonus.case7} –º–∏—Ñ–∏—á–µ—Å–∫–∏–π starr drops`);
  if (bonus.case6) messages.push(`+${bonus.case6} –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π starr drops`);
  if (bonus.case4) messages.push(`+${bonus.case4} starr drops`);
  if (bonus.limit) messages.push(`+${bonus.limit} –∫ –ª–∏–º–∏—Ç—É`);
  if (bonus.rating) messages.push(`+${bonus.rating} –∫ —Ä–µ–π—Ç–∏–Ω–≥—É`);
  if (bonus.bitkoin) messages.push(`+${bonus.bitkoin} –±–∏—Ç–∫–æ–∏–Ω–æ–≤`);
  if (bonus.cars) messages.push('–û—Ç–∫—Ä—ã—Ç —Ä–µ–¥–∫–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å');
  if (bonus.GB) messages.push(`+${bonus.GB} ${val4}`);
  if (bonus.ruds) messages.push('–û—Ç–∫—Ä—ã—Ç–∞ —Ä–µ–¥–∫–∞—è —Ä—É–¥–∞');
  if (bonus.donat) messages.push(`+${bonus.donat} –¥–æ–Ω–∞—Ç-—Ä—É–±–ª–µ–π`);
  if (bonus.titan) messages.push('Titan —Å—Ç–∞—Ç—É—Å');
  if (bonus.topdon) messages.push('Topdon —Å—Ç–∞—Ç—É—Å');
  
  return messages.length > 0 ? messages.join('\n') : '–Ω–µ—Ç';
}

cmd.hear(/^(?:—É—Ä–æ–≤–µ–Ω—å|level|üò¥ –£—Ä–æ–≤–µ–Ω—å)$/i, async (message, bot) => {

return bot(`–≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ`)

  if (!message.isChat || message.chat.type === 1) {
    const currentLevel = message.user.levl || 1;
    const nextLevel = levelData[currentLevel];
    const totalCost = calculateTotalCost(currentLevel);
    const bonusInfo = nextLevel ? formatBonusMessage(nextLevel.bonus) : '–Ω–µ—Ç';
    const currencySymbol = ` ${val1}`; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π —Å–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã

    return bot(
      `üîπ –¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å: ${currentLevel}\n` +
      `üí∞ –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å: ${nextLevel ? nextLevel.price.toLocaleString() + ` ${currencySymbol}` : 'MAX'}\n` +
      `üéÅ –ë–æ–Ω—É—Å—ã –∑–∞ —É—Ä–æ–≤–µ–Ω—å: ${bonusInfo}\n` +
      `üìà –î–æ –º–∞–∫—Å–∏–º—É–º–∞ –Ω–∞–¥–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å: ${totalCost.toLocaleString()} ${val1}`,
      {
        keyboard: JSON.stringify({
          "inline": true,
          "buttons": [
            [{
              "action": {
                "type": "text",
                "payload": JSON.stringify({ command: "—É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–∏—Ç—å" }),
                "label": `‚úÖ –£–ª—É—á—à–∏—Ç—å (${nextLevel ? nextLevel.price.toLocaleString() + ` ${val1}` : 'MAX'})`
              },
              "color": "positive"
            }]
          ]
        })
      }
    );
  }
});

cmd.hear(/^(?:—É—Ä–æ–≤–µ–Ω—å —É–ª—É—á—à–∏—Ç—å)$/i, async (message, bot) => {
  return bot(`–≤ –¥–æ—Ä–∞–±–æ—Ç–∫–µ`)
  if (!message.isChat || message.chat.type === 1) {
    const currentLevel = message.user.levl || 0;
    const userBalance = message.user.balance || 0;
    const nextLevelData = levelData[currentLevel];
    
    if (!nextLevelData) {
      return bot('üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!');
    }
    
    if (userBalance < nextLevelData.price) {
      return bot(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ ${nextLevelData.price.toLocaleString()} ${val1}, —É –≤–∞—Å ${userBalance.toLocaleString()} ${val1}`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message.user.balance -= nextLevelData.price;
    message.user.levl = currentLevel + 1;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å—ã
    const bonus = nextLevelData.bonus || {};
    message.user.balance += bonus.balance || 0;
    if (bonus.premium) message.user.settings.premium = true;
    if (bonus.vip) message.user.settings.vip = true;
    message.user.bilet = (message.user.bilet || 0) + (bonus.bilet || 0);
    if (bonus.busi) message.user.business2.push({

      "id": 32,

      "upgrade": 1,

      "workers": 1,

      "moneys": 0

    });
    if (bonus.farm) message.user.farm = true;//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥
    message.user.c10 = (message.user.c10 || 0) + (bonus.case10 || 0);
    message.user.c7 = (message.user.c7 || 0) + (bonus.case7 || 0);
    message.user.c6 = (message.user.c6 || 0) + (bonus.case6 || 0);
    message.user.c4 = (message.user.c4 || 0) + (bonus.case4 || 0);
    message.user.limit.playerlimit = (message.user.limit.playerlimit || 0) + (bonus.limit || 0);
    message.user.rating = (message.user.rating || 0) + (bonus.rating || 0);
    message.user.btc = (message.user.btc || 0) + (bonus.bitkoin || 0);
    if (bonus.cars) message.user.cars = true;//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥
    message.user.balance2 = (message.user.balance2 || 0) + (bonus.GB || 0);
    if (bonus.ruds) message.user.ruds = true;//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥
    message.user.rubli = (message.user.rubli || 0) + (bonus.donat || 0);
    if (bonus.titan) message.user.settings.titan = true;
    if (bonus.topdon) message.user.settings.topdon = true;
    
    return bot(
      `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å ${message.user.levl}\n` +
      `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${message.user.balance.toLocaleString()} ${val1}\n` +
      `üéÅ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã:\n${formatBonusMessage(bonus)}`
    );
  }
});

module.exports = commands;
