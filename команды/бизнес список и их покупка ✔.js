let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

const tokenData = getToken();

const chatlogi = tokenData.chatlogi;
const spoler = tokenData.spoler;

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const businesses = require("../spisok/business spisok.js")
const businesses2 = require("../spisok/–±–∏–∑–Ω–µ—Å—ã.js")

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
}

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ –Ω–æ–º–µ—Ä–∞
function getNumberEmoji(number) {
    if (number >= 1 && number <= 9) {
        const circleNumbers = [
            "1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£"
        ];
        return circleNumbers[number - 1];
    }
    else if (number >= 10 && number <= 20) {
        const circleNumbers = [
            "1Ô∏è‚É£0Ô∏è‚É£", "1Ô∏è‚É£1Ô∏è‚É£", "1Ô∏è‚É£2Ô∏è‚É£", "1Ô∏è‚É£3Ô∏è‚É£", "1Ô∏è‚É£4Ô∏è‚É£", "1Ô∏è‚É£5Ô∏è‚É£", "1Ô∏è‚É£6Ô∏è‚É£", "1Ô∏è‚É£7Ô∏è‚É£", "1Ô∏è‚É£8Ô∏è‚É£", "1Ô∏è‚É£9Ô∏è‚É£", "2Ô∏è‚É£0Ô∏è‚É£"
        ];
        return circleNumbers[number - 10];
    }
    else if (number >= 21 && number <= 30) {
        const circleNumbers = [
            "2Ô∏è‚É£1Ô∏è‚É£", "2Ô∏è‚É£2Ô∏è‚É£", "2Ô∏è‚É£3Ô∏è‚É£", "2Ô∏è‚É£4Ô∏è‚É£", "2Ô∏è‚É£5Ô∏è‚É£", "2Ô∏è‚É£6Ô∏è‚É£", "2Ô∏è‚É£7Ô∏è‚É£", "2Ô∏è‚É£8Ô∏è‚É£", "2Ô∏è‚É£9Ô∏è‚É£", "3Ô∏è‚É£0Ô∏è‚É£"
        ];
        return circleNumbers[number - 21]
    }
    else {
        return number.toString();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
async function showBusinessListPrivate(message, bot) {
    let businessList = `üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã: üè¢ ‚ú®\n\n`;
    for (let i = 0; i < businesses2.length && i < 13; i++) {
        const business = businesses2[i][0];
        const numberEmoji = getNumberEmoji(i + 1);
        let totalEarn = parseInt(business.earn);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
        const hasDiscount = business.sell > 0;
        const currentPrice = hasDiscount ? business.cost2 : business.cost;
        
        for (let j = 1; j < businesses2[i].length; j++) {
            const upgrade = businesses2[i][j];
            totalEarn += parseInt(upgrade.earn)
        }
        
        businessList += `${numberEmoji} ${business.icon} ${business.name}\n`;
        businessList += `   üíµ –¶–µ–Ω–∞: ${utils.sp(currentPrice)} ${val1}`;
        
        if (hasDiscount) {
            businessList += ` üî• –°–∫–∏–¥–∫–∞ ${business.sell}%`;
        }
        
        businessList += `\n   üí∞ –ü—Ä–∏–±—ã–ª—å: ${utils.sp(business.earn)} ${val1}/—á–∞—Å\n\n`;
    }

    businessList += `üìù –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´–ë–∏–∑–Ω–µ—Å—ã [–Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞]¬ª`;
    return bot(businessList);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç)
async function processBusinessPurchasePrivate(message, bot, businessIndex) {
    if (message.user.inf === true) return bot(`üö´ –í—ã–∫–ª—é—á–∏—Ç–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –±–∞–ª–∞–Ω—Å`);

    if (message.user.settings.busi === true) {
        if (message.user.business2.length >= 2)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 2 –±–∏–∑–Ω–µ—Å–∞`);
    } else {
        if (message.user.business2.length >= 1)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 1 –±–∏–∑–Ω–µ—Å`);
    }

    const businessGroup = businesses2[businessIndex];
    if (!businessGroup || !Array.isArray(businessGroup) || businessGroup.length === 0) {
        console.error("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –±–∏–∑–Ω–µ—Å–∞");
        return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–∑–Ω–µ—Å–µ.");
    }

    const business = businessGroup[0];
    const priceToPay = business.sell > 0 ? business.cost2 : business.cost;

    if (message.user.balance < priceToPay) {
        return bot(
            `üö´ –£ –í–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(
                message.user.balance
            )} ${val1}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val1}`
        );
    }

    message.user.balance -= priceToPay;
    message.user.business2.push({
        id: businessIndex + 1,
        upgrade: 1,
        workers: 1,
        moneys: 0,
    });

    let purchaseMessage = `üéâ –í—ã –∫—É–ø–∏–ª–∏ ¬´${business.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val1} üöÄ`;
    if (business.sell > 0) {
        purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${business.sell}%, —ç–∫–æ–Ω–æ–º–∏—è ${utils.sp(business.cost - priceToPay)} ${val1})`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if (message.user.now.kv1 && message.user.now.kv2 && !message.user.now.kv3) {
        message.user.now.kv3 = true;
        message.user.bank += 50000000;
        const taskCompleteMessage = `‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–≥—Ä–∞–¥–∞ - 50.000.000 ${val1} –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç\n\nüí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –±–∏–∑–Ω–µ—Å—ã –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–±—ã–ª—å!`;
        await bot(taskCompleteMessage, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })
        });
    }

    return bot(purchaseMessage);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ (–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)
async function showBusinessListGroup(message, bot) {
    let businessList = `üè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã: üè¢ ‚ú®\n\n`;
    for (let i = 0; i < businesses.length; i++) {
        const business = businesses[i][0];
        const numberEmoji = getNumberEmoji(i + 1);
        let totalEarn = parseInt(business.earn);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∏–¥–∫–∏
        const hasDiscount = business.sell > 0;
        const currentPrice = hasDiscount ? business.cost2 : business.cost;
        
        for (let j = 1; j < businesses[i].length; j++) {
            const upgrade = businesses[i][j];
            totalEarn += parseInt(upgrade.earn)
        }
        
        businessList += `‚≠ê ${numberEmoji} ${business.icon} ${business.name} (ID: ${business.id})\n`;
        businessList += `   üíµ –¶–µ–Ω–∞: ${utils.sp(currentPrice)} ${val4}`;
        
        if (hasDiscount) {
            businessList += ` üî• –°–∫–∏–¥–∫–∞ ${business.sell}%`;
        }
        
        businessList += `\n   üí∞ –ü—Ä–∏–±—ã–ª—å: ${utils.sp(business.earn)} ${val4}/—á–∞—Å\n\n`;
    }
    
    businessList += `üìù –í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏:`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞
    const buttons = [];
    const maxButtonsPerRow = 3;
    
    for (let i = 0; i < businesses.length; i++) {
        const business = businesses[i][0];
        const button = {
            "action": {
                "type": "text",
                "payload": JSON.stringify({ command: `–±–∏–∑–Ω–µ—Å—ã ${i+1}` }),
                "label": `${i+1} ${business.icon}`
            },
            "color": "primary"
        };
        
        if (i % maxButtonsPerRow === 0) {
            buttons.push([button]);
        } else {
            buttons[buttons.length - 1].push(button);
        }
    }
    
    return bot(businessList, {
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": buttons
        })
    });
}
// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–∑–Ω–µ—Å–∞ (–≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç)
async function processBusinessPurchaseGroup(message, bot, businessIndex) {
    if (!message.user.settings) {
        message.user.settings = {};
    }

    if (message.user.settings.busi === true) {
        if (message.user.business.length >= 2)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 2 –±–∏–∑–Ω–µ—Å–∞`);
    } else {
        if (message.user.business.length >= 1)
            return bot(`üö´ –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏–º–µ—Ç—å 1 –±–∏–∑–Ω–µ—Å`);
    }

    const businessGroup = businesses[businessIndex];
    if (!businessGroup || !Array.isArray(businessGroup) || businessGroup.length === 0) {
        return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞.");
    }

    const business = businessGroup[0];
    const priceToPay = business.sell > 0 ? business.cost2 : business.cost;

    if (message.user.balance2 < priceToPay) {
        return bot(
            `üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥! ‚ùå\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(
                message.user.balance2
            )} ${val4}\nüí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${utils.sp(priceToPay)} ${val4}`
        );
    }

    message.user.balance2 -= priceToPay;
    message.user.business.push({
        id: businessIndex + 1,
        upgrade: 1,
        workers: 1,
        moneys: 0,
    });

    let purchaseMessage = `üéâ –í—ã –∫—É–ø–∏–ª–∏ ¬´${business.name}¬ª –∑–∞ ${utils.sp(priceToPay)} ${val4} üöÄ`;
    if (business.sell > 0) {
        purchaseMessage += ` (—Å–∫–∏–¥–∫–∞ ${business.sell}%, —ç–∫–æ–Ω–æ–º–∏—è ${utils.sp(business.cost - priceToPay)} ${val4})`;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–≤–µ—Å—Ç–∞
    if (message.user.questbrak == false) {
        message.user.questbrak = true;
        message.user.rating += 200;
        await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å –Ω–∞ ${val4} –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 200 —Ä–µ–π—Ç–∏–Ω–≥–∞.`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
    if (message.user.now.kv1 && message.user.now.kv2 && !message.user.now.kv3) {
        message.user.balance2 += 25000;
        message.user.now.kv3 = true;
        const taskCompleteMessage = `‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 3 –∑–∞–¥–∞–Ω–∏–µ! –ü–æ–∫—É–ø–∫–∞ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–≥—Ä–∞–¥–∞ - 25.000 ${val4}\n\nüí° –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π –±–∏–∑–Ω–µ—Å—ã –∏ –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–±—ã–ª—å!`;
        await bot(taskCompleteMessage, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
                            "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })
        });
    }

    return bot(purchaseMessage);
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–∑–Ω–µ—Å–∞–º–∏
cmd.hear(/^(?:–±–∏–∑–Ω–µ—Å—ã|üíº –ë–∏–∑–Ω–µ—Å—ã)\s?([0-9]+)?$/i, async (message, bot) => {
  try {
    let response = null;
    if (!message.isChat || message.chat.type === 1) {
      if (!message.args[1]) {
        response = await showBusinessListPrivate(message, bot);
      } else {
        const businessIndex = Number(message.args[1]) - 1;
        if (isNaN(businessIndex)) {
            return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–Ω–µ —á–∏—Å–ª–æ).");
        }
        if (businessIndex < 0 || businessIndex >= businesses2.length) {
            return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞).");
        }
        response = await processBusinessPurchasePrivate(message, bot, businessIndex);
      }
    } else if (message.chat.type === 2) {
      if (!message.args[1]) {
        response = await showBusinessListGroup(message, bot);
      } else {
        const businessIndex = Number(message.args[1]) - 1;
        if (isNaN(businessIndex)) {
            return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–Ω–µ —á–∏—Å–ª–æ).");
        }
        if (businessIndex < 0 || businessIndex >= businesses.length) {
            return bot("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–∏–∑–Ω–µ—Å–∞ (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞).");
        }
        response = await processBusinessPurchaseGroup(message, bot, businessIndex);
      }
    }
    return response;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∏–∑–Ω–µ—Å—ã:", error);
    const errorText = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    await bot(errorText);
    return errorText;
  }
});

let tokensCache = null;

setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }
}, 1000);

module.exports = commands;