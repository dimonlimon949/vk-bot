let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};


const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';


function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}



const tokenData = getToken();

const chatlogi = tokenData.chatlogi; 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3();
    if (tokensCache) {
        val1 = tokensCache.val1;
        val2 = tokensCache.val2;
        val3 = tokensCache.val3;
        val4 = tokensCache.val4;
    }

}, 1000);

cmd.hear(/^(?:–±–∞–ª–∞–Ω—Å|üí∞ –ë–∞–ª–∞–Ω—Å|–±–∞–ª|money|my balance)$/i, async (message, bot) => {
      if (message.user.astats.tema === 2) {
        try {
            if (!message.isChat || message.chat.type == 1) {
                let text = "üí∞ –¢–í–û–ô –ñ–ê–õ–ö–ò–ô –ë–ê–õ–ê–ù–°, –ù–ò–©–ï–ë–†–û–î:\n\n";
        
                if (message.user.balance2 > 0) {
                    text += `üí∏ ${utils.sp(message.user.balance2)} ${val4} (–º–µ–ª–æ—á—å –ø–æ –∫–∞—Ä–º–∞–Ω–∞–º –∑–≤–µ–Ω–∏—Ç)\n`;
                } else {
                    text += `üí∏ 0 ${val4} (–≤–æ–æ–±—â–µ –ø–∏–∑–¥–µ—Ü –∫–∞–∫ –±–µ–¥–µ–Ω)\n`;
                }
        
                if (message.user.inf) {
                    text += "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: ‚àû (–Ω—É —Ç—ã –∏ –∂–∏—Ä–Ω—ã–π –∫–æ—Ç, –±–ª—è–¥—å)\n";
                } else {
                    text += `üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: ${utils.sp(message.user.balance)} ${val1} (—Ö–≤–∞—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∞—á–∫—É –¥–æ—à–∏–∫–∞)\n`;
                }
        
                if (message.user.btc > 0) {
                    text += `üíΩ –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: ${utils.sp(message.user.btc)} ‡∏ø (–Ω–µ–ø–ª–æ—Ö–æ –¥–ª—è –¥–µ–±–∏–ª–∞)\n`;
                } else {
                    text += `üíΩ –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: 0 ‡∏ø (–≥–¥–µ —Ç–≤–æ–π –±–∏—Ç–æ–∫, –ª—É–∑–µ—Ä?)\n`;
                }
        
                message.send({ sticker_id: 110670 }); // –°—Ç–∏–∫–µ—Ä "–¥–µ–Ω—å–≥–∏-–≥–æ–≤–Ω–æ"
                return bot(text, {
                    keyboard: JSON.stringify({
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "payload": "{}",
                                    "label": `üíé —Ä–µ—Å—É—Ä—Å—ã`
                                },
                                "color": "default"
                            }]
                        ]
                    })
                });
            }
        
            if ([2, 3].includes(message.chat.type)) {
                let text = `–¢–í–û–ô –î–û–•–£–Ø–©–ò–†–°–ö–ò–ô –ë–ê–õ–ê–ù–°: ${utils.sp(message.user.balance2)} ${val4} üí∏ (–≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∏—Ö—É—è)\n`;
                return bot(text);
            }
        } catch (error) {
            console.error("–ë–õ–Ø–¢–¨, –û–®–ò–ë–ö–ê –í –ë–ê–õ–ê–ù–°–ï:", error);
            await bot("–ß—ë—Ç —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ —Å –±–∞–ª–∞–Ω—Å–æ–º, –∏–¥–∏ –Ω–∞—Ö—É–π –∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ, –∫—Ä–∏–≤–æ—Ä—É–∫!"); 
        }

      }
      if (message.user.astats.tema === 1) {
    try {
        if (!message.isChat || message.chat.type == 1) {
            let text = "–±–∞–ª–∞–Ω—Å:\n\n";

            if (message.user.balance2 > 0) {
                text += `üí∏ ${utils.sp(message.user.balance2)} ${val4}\n`;
            }

            if (message.user.inf) {
                text += "üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: ‚àû \n";
            } else {
                text += `üíµ –ù–∞–ª–∏—á–Ω—ã–º–∏: ${utils.sp(message.user.balance)} ${val1}\n`;
            }

            if (message.user.btc > 0) {
                text += `üíΩ –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: ${utils.sp(message.user.btc)} ‡∏ø\n`;
            }

            message.send({ sticker_id: 110670 });
            return bot(text, {
                keyboard: JSON.stringify({
                    "inline": true,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "payload": "{}",
                                "label": `üíé —Ä–µ—Å—É—Ä—Å—ã`
                            },
                            "color": "default"
                        }]
                    ]
                })
            });
        }

if ([2].includes(message.chat.type)) {
    const balance = message.user.reshim == 1 ? message.user.balance2 : message.user.balance;
    const currency = message.user.reshim == 1 ? val4 : val1;
    
    let text = `–≤–∞—à –±–∞–ª–∞–Ω—Å: ${utils.sp(balance)} ${currency} üí∏ \n`;
    return bot(text);
}
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /–±–∞–ª–∞–Ω—Å:", error);
        await bot("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); 
    }
}
});

async function sendMessageWithSticker(bot, message, text, stickerId, keyboard = null) {
    message.send({ sticker_id: stickerId });
    await bot(text, keyboard ? { keyboard: JSON.stringify(keyboard) } : undefined);
}


cmd.hear(/^(?:—Ä–µ—Å—É—Ä—Å—ã|üíé —Ä–µ—Å—É—Ä—Å—ã)$/i, async (message, bot) => {
    if (message.user.astats.tema === 2) {
        try {
            if (!message.isChat || message.chat.type == 1) {
                let text = "üí¢ –¢–í–û–ò –ñ–ê–õ–ö–ò–ï –†–ï–°–£–†–°–´, –®–ú–û–¢–¨–ï:";
                let hasResources = false;
        
                const resources = {
                    zhelezo: { name: "—Ä–∂–∞–≤–æ–≥–æ –∂–µ–ª–µ–∑–∞", emoji: "ü¶æ" }, 
                    zoloto: { name: "—Ñ–∞–ª—å—à–∏–≤–æ–≥–æ –∑–æ–ª–æ—Ç–∞", emoji: "üí©" },
                    almaz: { name: "–º—É—Ç–Ω—ã—Ö –∞–ª–º–∞–∑–æ–≤", emoji: "üîÆ" },
                    materia: { name: "–≥—Ä—è–∑–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∏", emoji: "‚ò†Ô∏è" },
                    obsidian: { name: "—Ö—É—ë–≤–∏–∞–Ω–æ–≤–æ–≥–æ –æ–±—Å–∏–¥–∏–∞–Ω–∞", emoji: "üóø" },
                    plazma: { name: "—Å–ø–µ—Ä–º—ã –ø–ª–∞–∑–º—ã", emoji: "üí¶" },
                };
        
                for (const key in resources) {
                    if (message.user.ruds && message.user.ruds[key]) {
                        text += `\n${resources[key].emoji} ${message.user.ruds[key]} ${resources[key].name}`;
                        hasResources = true;
                    }
                }
        
                if (hasResources) {
                    await sendMessageWithSticker(bot, message, text, 52995); // —Å—Ç–∏–∫–µ—Ä "—Ç—ã –ª–æ—Ö"
                } else {
                    const noResourcesText = "–£ –¢–ï–ë–Ø –ü–£–°–¢–û, –ö–ê–ö –í –¢–í–û–ï–ô –ì–û–õ–û–í–ï, –î–ï–ë–ò–õ! ‚ùå\n‚õè –ò–î–ò –í –®–ê–•–¢–£, –ú–£–î–ê–ö, –ú–û–ñ–ï–¢ –ß–¢–û-–¢–û –ù–ê–ö–û–ü–ê–ï–®–¨!";
                    const keyboard = {
                        "inline": true,
                        "buttons": [
                            [{
                                "action": {
                                    "type": "text",
                                    "payload": "{}",
                                    "label": `‚õè –®–∞—Ö—Ç–∞`
                                },
                                "color": "default"
                            }]
                        ]
                    };
                    await sendMessageWithSticker(bot, message, noResourcesText, 52980, keyboard); // —Å—Ç–∏–∫–µ—Ä "–ø—É—Å—Ç–æ"
                }
            }
        } catch (error) {
            console.error("–Å–ë–ê–ù–´–ô –í –†–û–¢, –û–®–ò–ë–ö–ê –í –†–ï–°–£–†–°–ê–•:", error);
            await bot("–ë–õ–Ø–¢–¨, –ß–¢–û-–¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö! –ò–î–ò –ù–ê–•–£–ô –ò –ü–û–ü–†–û–ë–£–ô –ü–û–ó–ñ–ï, –ö–†–ò–í–û–†–£–ö–ò–ô –£–Å–ë–ò–©–ï!"); 
        }
    }
    if (message.user.astats.tema === 1) {
    try {
        if (!message.isChat || message.chat.type == 1) {
            let text = "—Ä–µ—Å—É—Ä—Å—ã:";
            let hasResources = false;

            const resources = {
                zhelezo: { name: "–∂–µ–ª–µ–∑–∞", emoji: "üéõ" },
                zoloto: { name: "–∑–æ–ª–æ—Ç–∞", emoji: "üèµ" },
                almaz: { name: "–∞–ª–º–∞–∑–∞", emoji: "üíé" },
                materia: { name: "–º–∞—Ç–µ—Ä–∏–∏", emoji: "üåå" },
                obsidian: { name: "–æ–±—Å–∏–¥–∏–∞–Ω–∞", emoji: "üåå" },
                plazma: { name: "–ø–ª–∞–∑–º—ã", emoji: "üåå" },
            };

            for (const key in resources) {
                if (message.user.ruds && message.user.ruds[key]) {
                    text += `\n${resources[key].emoji} ${message.user.ruds[key]} ${resources[key].name}`;
                    hasResources = true;
                }
            }

            if (hasResources) {
                await sendMessageWithSticker(bot, message, text, 52995);
            } else {
                const noResourcesText = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ ‚ùå\nüí™ –î–æ–±—ã—Ç—å –∏—Ö –º–æ–∂–Ω–æ –≤ —à–∞—Ö—Ç–µ!";
                const keyboard = {
                    "inline": true,
                    "buttons": [
                        [{
                            "action": {
                                "type": "text",
                                "payload": "{}",
                                "label": `‚õè –®–∞—Ö—Ç–∞`
                            },
                            "color": "default"
                        }]
                    ]
                };
                await sendMessageWithSticker(bot, message, noResourcesText, 52980, keyboard);
            }
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /—Ä–µ—Å—É—Ä—Å—ã:", error);
        await bot("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."); // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
    }
}
});
 



module.exports = commands;
