let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')
let chats = require('../database/chats.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};
const cars = require('../spisok/–º–∞—à–∏–Ω—ã.js')

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}


// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

let tokensCache = null;
      
setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
  }, 1000);

cmd.hear(/^(?:–º–∞—à–∏–Ω—ã|üöó –ú–∞—à–∏–Ω—ã|üõ£ –ú–∞—à–∏–Ω—ã)\s?([0-9]+)?$/i, async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Å—Å–∏–≤–∞ –º–∞—à–∏–Ω
            if (!Array.isArray(cars) || cars.length === 0) {
                console.error("–û—à–∏–±–∫–∞: –º–∞—Å—Å–∏–≤ cars –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç");
                return bot("‚ùå –ö–∞—Ç–∞–ª–æ–≥ –º–∞—à–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }

            const smileng = utils.pick(['üöó', 'üéÅ', 'üí∞', 'üíé', 'üëë']) || '‚úÖ';

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞
            const safeFormat = (num) => {
                try {
                    num = Number(num) || 0;
                    return num > 0 ? utils.sp(num) : "0";
                } catch (e) {
                    console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞:", e);
                    return "0";
                }
            };

            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—à–∏–Ω
            if (!message.args[1]) {
                let carList = `üöó –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n\n`;
                
                cars.forEach(car => {
                    try {
                        // –ó–∞—â–∏—â–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                        const id = Number(car?.id) || 0;
                        const name = String(car?.name || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å").trim();
                        const cost = Number(car?.cost) || 0;
                        const sell = Math.min(100, Math.max(0, Number(car?.sell) || 0));
                        
                        // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
                        const currentPrice = sell > 0 ? Math.max(0, Math.floor(cost * (100 - sell) / 100)) : cost;
                        const isFree = currentPrice <= 0 && sell >= 100;
                        
                        // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                        carList += `${message.user.transport?.car === id ? "‚úÖ" : "‚úñÔ∏è"} ${id}. ${name}\n`;
                        
                        if (isFree) {
                            carList += `–¶–µ–Ω–∞: üéÅ –ë–ï–°–ü–õ–ê–¢–ù–û`;
                        } else {
                            carList += `–¶–µ–Ω–∞: ${safeFormat(currentPrice)} ‚ÇΩ`;
                        }
                        
                        if (sell > 0) {
                            carList += ` (—Å–∫–∏–¥–∫–∞ ${sell}%)`;
                        }
                        
                        carList += `\n\n`;
                    } catch (e) {
                        console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—à–∏–Ω—ã ID:${car?.id}`, e);
                    }
                });
                
                carList += `üõí –î–ª—è –ø–æ–∫—É–ø–∫–∏ –≤–≤–µ–¥–∏—Ç–µ: –ú–∞—à–∏–Ω—ã [–Ω–æ–º–µ—Ä]`;
                return bot(carList, { parse_mode: "HTML" });
            }
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
            const carId = parseInt(message.args[1]) || 0;
            const carToBuy = cars.find(c => Number(c?.id) === carId);
            
            if (!carToBuy || carId < 1 || carId > cars.length) {
                return bot("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.");
            }

            // –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
            const cost = Number(carToBuy.cost) || 0;
            const discount = Math.min(100, Math.max(0, Number(carToBuy.sell) || 0));
            const priceToPay = discount > 0 ? Math.max(0, Math.floor(cost * (100 - discount) / 100)) : cost;
            const isFree = priceToPay <= 0 && discount >= 100;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∞—à–∏–Ω—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
if (message.user.transport?.car) {
    const currentCar = cars.find(c => Number(c?.id) === Number(message.user.transport.car));
    return bot(
        `‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –º–∞—à–∏–Ω–∞: ¬´${currentCar?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å'}¬ª\n` +
        `–î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "–ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É"`,
        {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            "payload": JSON.stringify({command: "–ø—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É"}),
                            "label": "üí∏ –ü—Ä–æ–¥–∞—Ç—å –º–∞—à–∏–Ω—É"
                        },
                        "color": "negative"
                    }]
                ]
            })
        }
    );
}

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–µ—Å–ª–∏ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
            if (!isFree && (Number(message.user.balance) || 0) < priceToPay) {
                return bot(
                    `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n` +
                    `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${safeFormat(message.user.balance)} ‚ÇΩ\n` +
                    `üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${safeFormat(priceToPay)} ‚ÇΩ`
                );
            }

            // –°–æ–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            message.user.transport = message.user.transport || {};
            message.user.transport.car = carToBuy.id;
            
            if (!isFree) {
                message.user.balance = (Number(message.user.balance) || 0) - priceToPay;
            }

            let purchaseMessage = `üéâ ${isFree ? '–í—ã –ø–æ–ª—É—á–∏–ª–∏' : '–í—ã –∫—É–ø–∏–ª–∏'} ¬´${carToBuy.name || '–º–∞—à–∏–Ω—É'}¬ª `;
            
            if (isFree) {
                purchaseMessage += `–ë–ï–°–ü–õ–ê–¢–ù–û! üéÅ`;
            } else {
                purchaseMessage += `–∑–∞ ${safeFormat(priceToPay)} ‚ÇΩ`;
                if (discount > 0) {
                    purchaseMessage += ` (—ç–∫–æ–Ω–æ–º–∏—è ${safeFormat(cost - priceToPay)} ‚ÇΩ)`;
                }
            }
            
            return bot(purchaseMessage);

        } catch (err) {
            console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ '–ú–∞—à–∏–Ω—ã':", err);
            return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.");
        }
    }
});


cmd.hear(/^(?:üé´ –º–∞—à–∏–Ω–∞ –≥–æ—Å–Ω–æ–º–µ—Ä|–º–∞—à–∏–Ω–∞ –≥–æ—Å–Ω–æ–º–µ—Ä)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car) return bot(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã`);

    let n_1 = utils.pick([
      "–ê",
      "–í",
      "–ï",
      "–ö",
      "–ú",
      "–ù",
      "–û",
      "–†",
      "–°",
      "–¢",
      "–£",
      "–•",
    ]);

    let n_2 = utils.random(0, 9);

    let n_3 = utils.random(0, 9);

    let n_4 = utils.random(0, 9);

    let n_5 = utils.pick([
      "–ê",
      "–í",
      "–ï",
      "–ö",
      "–ú",
      "–ù",
      "–û",
      "–†",
      "–°",
      "–¢",
      "–£",
      "–•",
    ]);

    let n_6 = utils.pick([
      "–ê",
      "–í",
      "–ï",
      "–ö",
      "–ú",
      "–ù",
      "–û",
      "–†",
      "–°",
      "–¢",
      "–£",
      "–•",
    ]);

    let n_7 = utils.pick(["777"]);

    if (message.user.balance < 30000000)
      return bot(`–≤–∞–º –Ω—É–∂–Ω–æ 30.000.000 ${val1} –¥–ª—è —Å–º–µ–Ω—ã –≥–æ—Å–Ω–æ–º–µ—Ä–∞.`);

    message.user.balance -= 30000000;

    message.user.scar.gosnomer = `${n_1}${n_2}${n_3}${n_4}${n_5}${n_6} ${n_7}`;

    let res = `${n_1}${n_2}${n_3}${n_4}${n_5}${n_6} ${n_7}`;

    return bot(
      `–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä –Ω–∞ –º–∞—à–∏–Ω—É! ‚òÉÔ∏è
üö• –ù–æ–º–µ—Ä: ¬´${res}¬ª üé´
‚ñ∂Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±–æ—à–ª–∞—Å—å –≤ ${utils.sp(30000000)} ${val1} üíµ
üöó –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –º–∞—à–∏–Ω–∞ –±—É–¥–µ—Ç –µ–∑–¥–∏—Ç—å —Å —Ç–∞–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏! üö•`,

      {
        keyboard: JSON.stringify({
          inline: true,

          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üé´ –ú–∞—à–∏–Ω–∞ –≥–æ—Å–Ω–æ–º–µ—Ä",
                },

                color: "default",
              },
            ],
          ],
        }),
      }
    );
  }
});

cmd.hear(
  /^(?:—Å–µ—Ç–Ω–æ–º–µ—Ä)\s([0-9]+)\s([–∞-—è])([0-9])([0-9])([0-9])([–∞-—è])([–∞-—è])$/i,
  async (message, bot) => {
    if (!message.isChat || message.chat.type === 1) {

      let res = `${message.args[2]}${message.args[3]}${message.args[4]}${message.args[5]}${message.args[6]}${message.args[7]} 777`;

      let text = res.toLowerCase();

      const b =
        /(–π|—Ü|–≥|—à|—â|–∑|—ä|—Ñ|—ã|–ø|–ª|–¥|–∂|—ç|—è|—á|–∏|—å|–±|—é|q|w|e|r|t|y|u|i|o|p|a|s|d|f|g|h|j|k|l|z|x|c|v|b|n|m:)/;

      if (b.test(text) === true)
        return bot(`–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä!

‚úÖ–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ —à–∞–±–ª–æ–Ω—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´A123BC¬ª, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã.
‚ûï –ü—Ä–∏–º–µ—Ä—ã: –ê777–ê–ê, –ê123–ú–†, –†777–†–† –∏ –¥—Ä.

üî§ –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –±—É–∫–≤: –ê, –í, –ï, –ö, –ú, –ù, –û, –†, –°, –¢, –£, –•`);

      let user = double.find((x) => x.uid === Number(message.args[1]));

      if (!user) return bot(`–Ω–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞! ‚ùå`);

      for (i in users) {
        if (users[i].scar.gosnomer.toLowerCase() === res.toLowerCase())
          return bot(`–Ω–æ–º–µ—Ä ¬´${res}¬ª —É–∂–µ –∑–∞–Ω—è—Ç –∏–≥—Ä–æ–∫–æ–º @id${users[i].id} (${users[i].tag}) ‚ùå



‚ñ∂Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä.`);
      }

      user.scar.gosnomer = res;

      return bot(`–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –≥–æ—Å. –Ω–æ–º–µ—Ä –Ω–∞ –º–∞—à–∏–Ω—É! ‚òÉÔ∏è
üö• –ù–æ–º–µ—Ä: ¬´${res}¬ª üé´
üöó –¢–µ–ø–µ—Ä—å —ç—Ç–∞ –º–∞—à–∏–Ω–∞ –±—É–¥–µ—Ç –µ–∑–¥–∏—Ç—å —Å —Ç–∞–∫–∏–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏! üö•`);
    }
  }
);

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
  let smileng = `‚ùÑÔ∏è`;

  if (!message.user.transport.car) return bot(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã`);

  // –£–ª—É—á—à–µ–Ω–∏—è ¬ª

  let g1 = message.user.scar.prok_1;

  let g2 = message.user.scar.prok_2;

  let g3 = message.user.scar.prok_3;

  let g4 = message.user.scar.prok_4;

  let g5 = message.user.scar.prok_5;

  let g6 = message.user.scar.prok_6;

  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ ¬ª

  let carsk = cars[message.user.transport.car - 1].carsk;

  let maxsk = cars[message.user.transport.car - 1].maxsk;

  let m_sk = eval(
    `(${g1} + ${g2} + ${g3} + ${g4} + ${g5} + ${g6}) * 3 + ${carsk}`
  );

  let max_sk = eval(
    `(${g1} + ${g2} + ${g3} + ${g4} + ${g5} + ${g6}) * 5 + ${maxsk}`
  );

  // –†–∞–∑–≥–æ–Ω –¥–æ 100–∫–º/—á ¬ª [!] –ù–µ —Å–º–æ–≥ .__.

  let razgon = cars[message.user.transport.car - 1].razgon;

    {
      if (message.chatId) {
        await vk.api.messages.send({
          chat_id: message.chatId,
          attachment: `${cars[message.user.transport.car - 1].photo}`,
          message:
            `

@id${message.user.id}(${message.user.tag}), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–π –º–∞—à–∏–Ω–µ! üöò
üöó –ù–∞–∑–≤–∞–Ω–∏–µ: ¬´${message.user.astats.car === false
              ? `${cars[message.user.transport.car - 1].name}`
              : `${message.user.astats.car}`
            }¬ª ${smileng}
üõ£Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${max_sk}
üöó –ú–æ—â–Ω–æ—Å—Ç—å: ${m_sk} –ª/—Å.
‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100–∫–º/—á–∞—Å: ${razgon} —Å–µ–∫—É–Ω–¥.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–∞: ${message.user.gon}
üé´ –ì–æ—Å–Ω–æ–º–µ—Ä: ` +
            (message.user.scar.gosnomer === "undefined"
              ? `–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç`
              : `${message.user.scar.gosnomer}`) +
            ``,

          keyboard: JSON.stringify({
            inline: true,

            buttons: [
              [
                {
                  action: {
                    type: "text",
                    payload: "{}",
                    label: "üèéÔ∏è –¢–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤",
                  },

                  color: "primary",
                },
              ],

              [
                {
                  action: { type: "text", payload: "{}", label: "üèÅ –ì–æ–Ω–∫–∞" },

                  color: "positive",
                },
              ],

              [
                {
                  action: {
                    type: "text",

                    payload: '{"button": "1"}',

                    label: "‚è´ –£–ª—É—á—à–µ–Ω–∏—è",
                  },
                  color: "secondary",
                },
              ],
            ],
          }),
          random_id: 0,
        });
      }

      if (!message.isChat) {
        await vk.api.messages.send({
          user_id: message.user.id,
          attachment: `${cars[message.user.transport.car - 1].photo}`,
          message:
            `

@id${message.user.id}(${message.user.tag
            }), –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –í–∞—à–µ–π –º–∞—à–∏–Ω–µ! üöò${smileng}

üöó –ù–∞–∑–≤–∞–Ω–∏–µ: ¬´${message.user.astats.car === false
              ? `${cars[message.user.transport.car - 1].name}`
              : `${message.user.astats.car}`
            }¬ª ${smileng}
üõ£Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${max_sk}
üöó –ú–æ—â–Ω–æ—Å—Ç—å: ${m_sk} –ª/—Å.
‚è± –†–∞–∑–≥–æ–Ω –¥–æ 100–∫–º/—á–∞—Å: ${razgon} —Å–µ–∫—É–Ω–¥.
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–∞: ${message.user.gon}
üé´ –ì–æ—Å–Ω–æ–º–µ—Ä: ` +
            (message.user.scar.gosnomer === "undefined"
              ? `–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç`
              : `${message.user.scar.gosnomer}`) +
            ``,

          keyboard: JSON.stringify({
            inline: true,

            buttons: [
              [
                {
                  action: {
                    type: "text",
                    payload: "{}",
                    label: "üèéÔ∏è –¢–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤",
                  },

                  color: "primary",
                },
              ],

              [
                {
                  action: { type: "text", payload: "{}", label: "üèÅ –ì–æ–Ω–∫–∞" },

                  color: "positive",
                },
              ],

              [
                {
                  action: {
                    type: "text",

                    payload: '{"button": "1"}',

                    label: "‚è´ –£–ª—É—á—à–µ–Ω–∏—è",
                  },
                  color: "secondary",
                },
              ],
            ],
          }),
          random_id: 0,
        });
      }
    }
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å|‚è´ –£–ª—É—á—à–µ–Ω–∏—è)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car) return bot(`—É –≤–∞—Å –Ω–µ—Ç –º–∞—à–∏–Ω—ã`);

    let g1 = message.user.scar.prok_1;

    let g2 = message.user.scar.prok_2;

    let g3 = message.user.scar.prok_3;

    let g4 = message.user.scar.prok_4;

    let g5 = message.user.scar.prok_5;

    let g6 = message.user.scar.prok_6;

    return bot(
      `—É–ª—É—á—à–µ–Ω–∏—è –∞–≤—Ç–æ:



üåë –®–∏–Ω—ã [${g1}/3]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —à–∏–Ω—ã¬ª

üîß –î–∏—Å–∫–∏ [${g2}/5]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å –¥–∏—Å–∫–∏¬ª

‚öô –î–≤–∏–≥–∞—Ç–µ–ª—å [${g3}/5]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å¬ª

üß® –¢–æ—Ä–º–æ–∑–∞ [${g4}/3]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —Ç–æ—Ä–º–æ–∑–∞¬ª

üïπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ [${g5}/5]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ¬ª

üîë –ß–∏–ø —Ç—é–Ω–∏–Ω–≥ [${g6}/1]
‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å: ¬´–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —á–∏–ø¬ª


üé´ –ì–æ—Å–Ω–æ–º–µ—Ä [` +
      (message.user.scar.gosnomer === "undefined"
        ? `–û—Ç—Å—É—Å—Ç–≤—É–µ—Ç`
        : `${message.user.scar.gosnomer}`) +
      `]

1‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: "–º–∞—à–∏–Ω–∞ –≥–æ—Å–Ω–æ–º–µ—Ä" (30.000.000 ${val1})

üí∞ ‚ûñ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${utils.sp(
        cars[message.user.transport.car - 1].upgrade
      )} ${val1}`
    );
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —à–∏–Ω—ã)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_1 > 2) return bot(`—à–∏–Ω—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω—ã. ‚öí`);

    if (cars[message.user.transport.car - 1].upgrade > message.user.balance)
      return bot(
        `–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞–º –Ω—É–∂–Ω–æ ${cars[message.user.transport.car - 1].upgrade
        } ${val1} üí∞`
      );

    message.user.balance -= cars[message.user.transport.car - 1].upgrade;

    message.user.scar.prok_1 += 1;

    return bot(`—à–∏–Ω—ã –±—ã–ª–∏ —É–ª—É—á—à–µ–Ω—ã [${message.user.scar.prok_1}/3] ‚öí`);
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å –¥–∏—Å–∫–∏)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_2 > 4) return bot(`–¥–∏—Å–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω—ã. ‚öí`);

    if (cars[message.user.transport.car - 1].upgrade > message.user.balance)
      return bot(
        `–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞–º –Ω—É–∂–Ω–æ ${cars[message.user.transport.car - 1].upgrade
        } ${val1} üí∞`
      );

    message.user.balance -= cars[message.user.transport.car - 1].upgrade;

    message.user.scar.prok_2 += 1;

    return bot(`–¥–∏—Å–∫–∏ –±—ã–ª–∏ —É–ª—É—á—à–µ–Ω—ã [${message.user.scar.prok_2}/5] ‚öí`);
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_3 > 4)
      return bot(`–¥–≤–∏–≥–∞—Ç–µ–ª—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω. ‚öí`);

    if (cars[message.user.transport.car - 1].upgrade > message.user.balance)
      return bot(
        `–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞–º –Ω—É–∂–Ω–æ ${cars[message.user.transport.car - 1].upgrade
        } ${val1} üí∞`
      );

    message.user.balance -= cars[message.user.transport.car - 1].upgrade;

    message.user.scar.prok_3 += 1;

    return bot(`–¥–≤–∏–≥–∞—Ç–µ–ª—å –±—ã–ª —É–ª—É—á—à–µ–Ω [${message.user.scar.prok_3}/5] ‚öí`);
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —Ç–æ—Ä–º–æ–∑–∞)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_4 > 2)
      return bot(`—Ç–æ—Ä–º–æ–∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω—ã. ‚öí`);

    if (cars[message.user.transport.car - 1].upgrade > message.user.balance)
      return bot(
        `–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞–º –Ω—É–∂–Ω–æ ${cars[message.user.transport.car - 1].upgrade
        } ${val1} üí∞`
      );

    message.user.balance -= cars[message.user.transport.car - 1].upgrade;

    message.user.scar.prok_4 += 1;

    return bot(`—Ç–æ—Ä–º–æ—â–∞ –±—ã–ª–∏ —É–ª—É—á—à–µ–Ω—ã [${message.user.scar.prok_4}/3] ‚öí`);
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_5 > 4)
      return bot(`—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–æ. ‚öí`);

    if (cars[message.user.transport.car - 1].upgrade > message.user.balance)
      return bot(
        `–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –í–∞–º –Ω—É–∂–Ω–æ ${cars[message.user.transport.car - 1].upgrade
        } ${val1} üí∞`
      );

    message.user.balance -= cars[message.user.transport.car - 1].upgrade;

    message.user.scar.prok_5 += 1;

    return bot(`—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É–ª—É—á—à–µ–Ω–æ [${message.user.scar.prok_5}/5] ‚öí`);
  }
});

cmd.hear(/^(?:–º–∞—à–∏–Ω–∞ —É–ª—É—á—à–∏—Ç—å —á–∏–ø)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    if (!message.user.transport.car)
      return bot(
        `—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`
      );

    if (message.user.scar.prok_6 > 0) return bot(`—á–∏–ø –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω. ‚öí`);

    return bot(`${text}`);
  }
});

function addZero(i) {
  return i < 10 ? "0" + i : i;
}

function unixStampLefta(stampa) {
  stampa = stampa / 1000;
  let s = stampa % 60;
  stampa = (stampa - s) / 60;
  let m = stampa % 60;
  let text = ``;
  if (m > 0) text += addZero(Math.floor(m)) + " –º–∏–Ω. ";
  if (s > 0) text += addZero(Math.floor(s)) + " —Å–µ–∫.";
  return text;
}
 
cmd.hear(/^(?:–≥–æ–Ω–∫–∞|üèÅ –ì–æ–Ω–∫–∞)$/i, async (message, bot) => {

  if (!message.isChat || message.chat.type === 1) {

if (!message.user.transport.car) return bot(`—É –í–∞—Å –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞! üöó‚ùå\n\n‚ñ∂Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: ¬´–ú–∞—à–∏–Ω—ã¬ª üõí`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          "payload": JSON.stringify({ command: "–ú–∞—à–∏–Ω—ã" }),
          "label": "üõí –ú–∞—à–∏–Ω—ã"
        },
        "color": "positive"
      }]
    ]
  })
})

    if (message.user.scar.gontime >= Date.now()) return bot(`–í–∞—à–∞ –º–∞—à–∏–Ω–∞ –≤ —Ä–µ–º–æ–Ω—Ç–µ! üî© üöô 
		
üèÅ –ü–æ–µ—Ö–∞—Ç—å –Ω–∞ –≥–æ–Ω–∫–∏ –í—ã —Å–º–æ–∂–µ—Ç–µ —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.scar.gontime - Date.now())} ‚ùÑÔ∏è`)



    if (typeof message.user.questracer === "number") {

      message.user.questracer++;

      if (message.user.questracer >= 15) {

        message.user.questracer = true;

        await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã 15 —Ä–∞–∑ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 1 –î–æ–Ω–∞—Ç-–∫–µ–π—Å.`);

        message.user.c3 += 1;

      }

    }

    if (message.user.now.kv1 && message.user.now.kv2 && message.user.now.kv3 && message.user.now.kv4 && message.user.now.kv5 && message.user.now.kv6 && message.user.now.kv7 && !message.user.now.kv8){

      message.user.now.kv8 = true;
      message.user.c4 += 5;
      await bot(`‚ö†Ô∏è –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ 8 –∑–∞–¥–∞–Ω–∏–µ!

–ù–∞–≥—Ä–∞–¥–∞ - 5 Starr Drop

üí° –†–µ–≥—É–ª—è—Ä–Ω–æ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –≥–æ–Ω–∫–∞—Ö –≤–µ–¥—å –≤ –Ω–∏—Ö –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–¥–∫–∏—Ö –∫–µ–π—Å–æ–≤ Starr Drop!`, {
  keyboard: JSON.stringify({
    "inline": true,
    "buttons": [
      [{
        "action": {
          "type": "text",
          payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
          "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
        },
        "color": "positive"
      }]
    ]
  })
})

    }



    if (typeof message.user.questracer2 === "number" && message.user.questallfucker == true) {

      message.user.questracer2++;

      if (message.user.questracer2 >= 1000) {

        message.user.questracer2 = true;

        await bot(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –í—ã 1.000 —Ä–∞–∑ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –≥–æ–Ω–∫–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ üì¶ 2 –î–æ–Ω–∞—Ç-–∫–µ–π—Åa.`);

        message.user.c3 += 2;

      }

    }



    let g1 = message.user.scar.prok_1;

    let g2 = message.user.scar.prok_2;

    let g3 = message.user.scar.prok_3;

    let g4 = message.user.scar.prok_4;

    let g5 = message.user.scar.prok_5;

    let g6 = message.user.scar.prok_6;

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—à–∏–Ω–µ ¬ª

    let carsk = cars[message.user.transport.car - 1].carsk;

    let mymaxsk = cars[message.user.transport.car - 1].maxsk;

    let m_sk = eval(`(${g1} + ${g2} + ${g3} + ${g4} + ${g5} + ${g6}) * 3 + ${carsk}`)

    let mymax_sk = eval(`(${g1} + ${g2} + ${g3} + ${g4} + ${g5} + ${g6}) * 5 + ${mymaxsk}`)



    let s = utils.random(1, 16);

    let skorost = utils.random(5, 63); // –ù–µ –∑–Ω–∞—é –∑–∞—á–µ–º —ç—Ç–æ.

    let max_sk = eval(`${cars[s - 1].maxsk} + ${skorost}`);

    let p_sk = eval(`${cars[s - 1].carsk} + ${skorost}`);

    let razgon = cars[s - 1].razgon;



    // –ü–æ–¥–±–æ—Ä –ù–æ–º–µ—Ä–∞ ¬ª

    let n_one = utils.pick(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•']);

    let n_two = utils.random(0, 9);

    let n_three = utils.random(0, 9);

    let n_four = utils.random(0, 9);

    let n_five = utils.pick(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•']);

    let n_six = utils.pick(['–ê', '–í', '–ï', '–ö', '–ú', '–ù', '–û', '–†', '–°', '–¢', '–£', '–•']);

    let n_seven = utils.pick(['777']);

    rgn = `${n_one}${n_two}${n_three}${n_four}${n_five}${n_six} ${n_seven}`;

    let w_km = mymax_sk - max_sk;

    let p_km = max_sk - mymax_sk;

    // –ü–æ–¥–±–æ—Ä –ù–æ–º–µ—Ä–∞ ¬´

    var cases = utils.pick([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]);



    bot(`–ù–∞—á–∞–ª—Å—è –∑–∞–µ–∑–¥ –ø—Ä–æ—Ç–∏–≤ ¬´${cars[s - 1].name}¬ª

üèé –û–∂–∏–¥–∞–µ–º –ø—Ä–∏–±—ã—Ç–∏–µ –º–∞—à–∏–Ω –∫ —Ñ–∏–Ω–∏—à—É..`, { attachment: `${cars[message.user.transport.car - 1].photo},${cars[s - 1].photo}` })

    let w_reit = utils.random(5, 9)

    message.user.scar.gontime = Date.now() + 900000;

    let p_reit = utils.random(2, 4)

    if (message.user.settings.imperator) {

      w_reit += 3;

      p_reit -= 1;

    }



    message.user.scar.gontime = true



if (!message.isChat && !message.user.settings.topdon) {
    message.user.scar.gontime = Date.now() + 900000;

    setTimeout(() => {
        if (message.isChat && !message.user.settings.topdon) {
            vk.api.messages.send({
                chat_id: message.chatId,
                random_id: 0,
                message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
            });
            message.send({ sticker_id: 110673 });
            return;
        }

        if (message.user.settings.topdon) {
            message.user.scar.gontime = Date.now() + 300000;

            setTimeout(() => {
                if (message.isChat) {
                    vk.api.messages.send({
                        chat_id: message.chatId,
                        random_id: 0,
                        message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                    });
                    message.send({ sticker_id: 108212 });
                    return;
                }

                if (!message.isChat) {
                    vk.api.messages.send({
                        user_id: message.user.id,
                        random_id: 0,
                        message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                    });
                    message.send({ sticker_id: 108212 });
                    return;
                }
            }, 300000);
        }

        if (!message.isChat && !message.user.settings.topdon) {
            vk.api.messages.send({
                user_id: message.user.id,
                random_id: 0,
                message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
            });
            message.send({ sticker_id: 52959 });
            return;
        }
    }, 900000);
} else {
    if (message.user.uid >= 0 && !message.user.settings.topdon) {
        message.user.scar.gontime = Date.now() + 600000;

        setTimeout(() => {
            if (message.isChat) {
                vk.api.messages.send({
                    chat_id: message.chatId,
                    random_id: 0,
                    message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                });
                message.send({ sticker_id: 62837 });
                return;
            }

            if (!message.isChat && !message.user.settings.topdon) {
                vk.api.messages.send({
                    user_id: message.user.id,
                    random_id: 0,
                    message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                });
                message.send({ sticker_id: 62837 });
                return;
            }
        }, 600000);
    } else {
        message.user.scar.gontime = Date.now() + 900000;

        setTimeout(() => {
            if (message.isChat && !message.user.settings.topdon) {
                vk.api.messages.send({
                    chat_id: message.chatId,
                    random_id: 0,
                    message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                });
                message.send({ sticker_id: 108206 });
                return;
            }

            if (!message.isChat) {
                vk.api.messages.send({
                    user_id: message.user.id,
                    random_id: 0,
                    message: `üèéÔ∏è @id${message.user.id} (${message.user.tag}), –ø–æ–≥–æ–Ω—è–µ—à—å –Ω–∞ —Å–≤–æ–µ–π —Ç–∞—á–∫–µ? üòé\n\n‚ñ∂Ô∏è –°–∫–æ—Ä–µ–µ –ø–∏—à–∏ ¬´–ì–æ–Ω–∫–∞¬ª –∏ –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ—Ö —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –Ω–∞ –≥–æ–Ω–∫–µ! ü§Ø`
                });
                message.send({ sticker_id: 108206 });
                return;
            }
        }, 900000);
    }
}



    let smileng = utils.pick([`üå∑`, `üå∏`, `üåπ`, `üå∫`, `üåº`, `üíê`, `‚ù§Ô∏è`, `üíì`, `üíï`]) //utils.pick([`‚òÉÔ∏è`,`üéÑ`,`‚ùÑÔ∏è`,`üéÖ`]);

    if (m_sk == p_sk) setTimeout(() => {
      return message.send(`–ù–∏—á—å—è! üòü

		

‚ñ∂Ô∏è –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ! üèÅ`, { attachment: utils.pick([`${cars[message.user.transport.car - 1].photo}, ${cars[s - 1].photo}`]) }).catch((error) => {

        console.log(` –û—à–∏–±–∫–∞.`);

      })
    }, 5000);

    if (m_sk > p_sk && cases == 1) {

      message.user.c4 += 1;

      message.user.gon += w_reit

      message.user.balance += 7500000

      message.user.oval += 5

      setTimeout(() => {
        return message.send(`üòà –í—ã–∏–≥—Ä—ã—à! –í–∞—à–∞ –º–∞—à–∏–Ω–∞ –æ–∫–∞–∑–∞–ª—Å—å –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üöó



‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω:



üöó –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ¬´${cars[message.user.transport.car - 1].name}¬ª ${smileng}

üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${mymax_sk}–∫–º/—á



üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ¬´${cars[s - 1].name}¬ª

üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${max_sk}–∫–º/—á

üé´ –ì–æ—Å–Ω–æ–º–µ—Ä: ${rgn}

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

üèÅ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: +${w_reit}

üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${utils.sp(message.user.gon)} üèÜ

üíµ –í—ã–∏–≥—Ä—ã—à: +7.500.000 ${val1} ü§ë

üíµ –í—ã–∏–≥—Ä—ã—à: +5 sealcoins ü§ë

üì¶ –ö–µ–π—Å—ã: +1 Starr Drops`, { attachment: utils.pick([`${cars[message.user.transport.car - 1].photo}`]) }).catch((error) => {

          console.log(` –û—à–∏–±–∫–∞.`);

        })
      }, 5000);

    }

    if (m_sk > p_sk && cases == 0) {

      message.user.gon += w_reit

      message.user.balance += 7500000

      message.user.oval += 2

      setTimeout(() => {
        return message.send(`üòà –í—ã–∏–≥—Ä—ã—à! –í–∞—à–∞ –º–∞—à–∏–Ω–∞ –æ–∫–∞–∑–∞–ª—Å—å –±—ã—Å—Ç—Ä–µ–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üöó

‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω:
üöó –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ¬´${cars[message.user.transport.car - 1].name}¬ª ${smileng}
üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${mymax_sk}–∫–º/—á

üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ¬´${cars[s - 1].name}¬ª
üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${max_sk}–∫–º/—á
üé´ –ì–æ—Å–Ω–æ–º–µ—Ä: ${rgn}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÅ –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥–∞: +${w_reit}
üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${utils.sp(message.user.gon)} üèÜ
üíµ –í—ã–∏–≥—Ä—ã—à: +2 sealcoins ü§ë
üíµ –í—ã–∏–≥—Ä—ã—à: +7.500.000 ${val1} ü§ë`, { attachment: utils.pick([`${cars[message.user.transport.car - 1].photo}`]) }).catch((error) => {

          console.log(` –û—à–∏–±–∫–∞.`);

        })
      }, 5000);

    }

    if (m_sk < p_sk) {

      message.user.gon -= p_reit

      message.user.oval += 1

      setTimeout(() => {
        return message.send(`üëø –ü—Ä–æ–∏–≥—Ä—ã—à! –í–∞—à–∞ –º–∞—à–∏–Ω–∞ –æ–∫–∞–∑–∞–ª—Å—å –º–µ–¥–ª–µ–Ω–µ–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞! üöó

‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–∞—à–∏–Ω:
üöó –í–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å: ¬´${cars[message.user.transport.car - 1].name}¬ª ${smileng}
üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${mymax_sk}–∫–º/—á

üöô –ê–≤—Ç–æ–º–æ–±–∏–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: ¬´${cars[s - 1].name}¬ª
üöò –°–∫–æ—Ä–æ—Å—Ç—å: ${max_sk}–∫–º/—á
üé´ –ì–æ—Å–Ω–æ–º–µ—Ä: ${rgn}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üèÅ –†–µ–π—Ç–∏–Ω–≥ –≥–æ–Ω—â–∏–∫–∞: -${p_reit} üèÜ
üíµ –ë–æ–Ω—É—Å: +1 sealcoins ü§ë
üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${message.user.gon} üèÜ

‚öô –£–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ!`, { attachment: utils.pick([`${cars[s - 1].photo}`]) }).catch((error) => {

          console.log(` –û—à–∏–±–∫–∞.`);

        })
      }, 5000);

    }


  }
});

cmd.hear(/^(?:—Ç–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤|üèéÔ∏è –¢–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {
    let top = [];

    double
      .filter((x) => x.bantop === false)
      .map((x) => {
        top.push({ gon: x.gon, tag: x.tag, id: x.id, mention: x.mention });
      });

    top.sort((a, b) => {
      return b.gon - a.gon;
    });

    let text = ``;

    const find = () => {
      let pos = 1000;

      for (let i = 0; i < top.length; i++) {
        if (top[i].id === message.senderId) return (pos = i);
      }

      return pos;
    };

    const maxTopEntries = Math.min(10, double.filter((x) => x.bantop === false).length);

    for (let i = 0; i < maxTopEntries; i++) {
      if (!top[i]) {
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
      }

      const user = top[i];

      text += `\n${i === 9 ? `üîü` : `${i + 1}‚É£`} ${user.mention ? `@id${user.id} (${user.tag})` : `${user.tag}`} ‚Äî üèÜ${utils.sp(user.gon)}`;
    }

    return bot(
      `—Ç–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤:${text}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
${utils.gi(find() + 1)} ${message.user.tag} ‚Äî üèÜ${utils.sp(message.user.gon)}`,
      {
        keyboard: JSON.stringify({
          inline: true,
          buttons: [
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üîÖ –¢–æ–ø —Ä–µ—Ñ–µ—Ä–∞–ª",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üòà –ë–æ—Å—Å —Ç–æ–ø",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üèÜ –¢–æ–ø —Ä–µ–π—Ç–∏–Ω–≥",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üë• –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üåê –¢–æ–ø –±–∏—Ç–∫–æ–∏–Ω—ã",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "„ÄΩÔ∏è –¢–æ–ø –æ–ø—ã—Ç",
                },
                color: "default",
              },
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üèéÔ∏è –¢–æ–ø –≥–æ–Ω—â–∏–∫–æ–≤",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üí∞ –¢–æ–ø –±–∞–ª–∞–Ω—Å",
                },
                color: "default",
              },
            ],
            [
              {
                action: {
                  type: "text",
                  payload: "{}",
                  label: "üíå –¢–æ–ø —Å–æ–æ–±—â–µ–Ω–∏—è",
                },
                color: "default",
              },
            ],
          ],
        }),
      }
    );
  }
});

module.exports = commands;
