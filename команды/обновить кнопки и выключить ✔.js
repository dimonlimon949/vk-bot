let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
  }, 1000);



const tokensFilePath4 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±–æ—Ç–∞.json';

function getToken4() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath4, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData4 = getToken4();

const spoler = tokenData4;



const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 

const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 


cmd.hear(/^(?:–æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏|–Ω–∞—á–∞—Ç—å|–∫–Ω–æ–ø–∫–∏ –≤–∫–ª|–æ–∫1)$/i, async (message, bot) => { 




    if (!message.isChat || message.chat.type === 1) {

        return message.send(
            `üß¨ @id${message.user.id} (${message.user.tag}), –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã!`,
            {
                keyboard: JSON.stringify({
                    one_time: false,

                    buttons: [
                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "‚ôªÔ∏è –ü–æ–º–æ—â—å",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üì¶ –ö–µ–π—Å—ã",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üìà –û–±–º–µ–Ω",
                                },

                                color: "positive",
                            },
                        ],

                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üí∞ –ë–∞–ª–∞–Ω—Å",
                                },

                                color: "secondary",
                            },

                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üîÖ –ü—Ä–æ—Ñ–∏–ª—å",
                                },

                                color: "secondary",
                            },

                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üéÅ –ë–æ–Ω—É—Å",
                                },

                                color: "secondary",
                            },
                        ],

                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "‚òÑÔ∏è –î–æ–Ω–∞—Ç",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üèÅ –ì–æ–Ω–∫–∞",
                                },

                                color: "positive",
                            },
                            {
                            action: {
                                type: "text",

                                payload: '{"button": "1"}',

                                label: "‚è≤ –§–æ—Ä—Ç—É–Ω–∞",
                            },

                            color: "positive",
                        },
                        ],
                    ],
                }),
            }
        );
    }

    if ( message.chat.type === 2)  {

        message.send('üîÑ –û–±–Ω–æ–≤–ª—è—é...',
            {
                keyboard: JSON.stringify(
                    {
                        "one_time": false, "buttons": [
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–Ω–∫" }, "color": "positive" },
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–∞–ª–∞–Ω—Å" }, "color": "positive" },
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "x2" }, "color": "primary" },
                                { "action": { "type": "text", "payload": "{}", "label": "x3" }, "color": "primary" },
                                { "action": { "type": "text", "payload": "{}", "label": "x5" }, "color": "primary" }
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "x50" }, "color": "positive" }
                            ],
                            [
                                { "action": { "type": "text", "payload": "{}", "label": "–†–µ–π—Ç–∏–Ω–≥" }, "color": "negative" },
                                { "action": { "type": "text", "payload": "{}", "label": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" }, "color": "default" },
                                { "action": { "type": "text", "payload": "{}", "label": "–ë–æ–Ω—É—Å" }, "color": "default" }
                            ]
                        ]
                    })
            })
    }

    if (!message.isChat || message.chat.type === 4) {

        return message.send(
            `üß¨ @id${message.user.id} (${message.user.tag}), –∫–Ω–æ–ø–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã!`,
            {
                keyboard: JSON.stringify({
                    one_time: false,

                    buttons: [
                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "üÖ∞ –ê—Å—Ç–∞—Ç–∞",
                                },

                                color: "negative",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "‚ú® –ù—Ä–µ–ø",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "‚ù§ —Ç–æ–ø –æ—Ç–≤–µ—Ç—ã",
                                },

                                color: "positive",
                            },
                        ],

                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "secondary",
                            },

                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "secondary",
                            },

                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "secondary",
                            },
                        ],

                        [
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "positive",
                            },
                            {
                                action: {
                                    type: "text",

                                    payload: '{"button": "1"}',

                                    label: "—Å–∫–æ—Ä–æ",
                                },

                                color: "positive",
                            },
                        ],
                    ],
                }),
            }
        );
    }


})





cmd.hear(/^–∫–Ω–æ–ø–∫–∏ (–≤—ã–∫–ª|off|–æ—Ç–∫–ª—é—á–∏—Ç—å)$/i, async (message, bot) => {
const hasPermission = Object.values(spoler).includes(String(message.user.id)); 

if (!hasPermission) return bot(`–û—Ç–∫–ª—é—á–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° –±–æ—Ç–∞ üì©`);
await bot(`–∫–Ω–æ–ø–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã üî•\n‚ñ∂Ô∏è –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ - ¬´–∫–Ω–æ–ø–∫–∏ –≤–∫–ª¬ª ‚úÖ`,
{
keyboard: JSON.stringify({ buttons: [] }),
}

);

});



module.exports = commands;
