let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 



cmd.hear(/^(?:–∫–∞–ø—á–∞)\s(.*)$/i, async (message, bot) => {
  if (!message.isChat || message.chat.type === 1) {

    if (message.user.captcha.vid == false) return bot(`—É –≤–∞—Å –Ω–µ—Ç—É –∫–∞–ø—á–∏, –Ω–æ —è –∑–∞ –≤–∞–º–∏ —Å–ª–µ–∂—É! ü§ñ`)

    if (message.args[1] == message.user.captcha.otvet) {

      message.user.captcha.vid = false

      message.user.captcha.otvet = false

      message.user.captcha.primer = false

      message.user.captcha.pred = 0

      return bot(`–≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞! ‚úÖ`)

    } else {

      if (message.user.captcha.vid == 1) return bot(`–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚ùå

–í–≤–µ–¥–∏—Ç–µ "–∫–∞–ø—á–∞ ${message.user.captcha.otvet}", —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä–æ–±–æ—Ç–∞!`)

      if (message.user.captcha.vid == 2) return bot(`–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! ‚ùå

–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä ¬´${message.user.captcha.otvet / 2} + ${message.user.captcha.otvet / 2}¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ "–∫–∞–ø—á–∞ [–æ—Ç–≤–µ—Ç]"`)

    }
  }
})

module.exports = commands;
