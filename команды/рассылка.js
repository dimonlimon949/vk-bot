const fs = require('fs');
const { VK } = require('vk-io');
let double = require('../database/users.json');
const commands = [];
let utils = require('../utils.js'); // –¥–æ–±–∞–≤–ª–µ–Ω–æ


const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() { 
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

const tokenData = getToken();
const vk = require('../vk-api.js'); 

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const MAX_RETRIES = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
const DELAY_MS = 50; // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
const BATCH_SIZE = 25; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function sendMessageWithRetries(rs, userId, messageText, attachment, retryCount = 0) {
  try {
    await rs.api.messages.send({
      user_id: userId,
      message: messageText,
      attachment: attachment,
      random_id: 0
    });
    return true; // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}):`, error);
    if (retryCount < MAX_RETRIES) {
      console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...`);
      await delay(2000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      return sendMessageWithRetries(rs, userId, messageText, attachment, retryCount + 1); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤
    } else {
      console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId} –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫.`);
      return false; // –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    }
  }
}

async function sendMessagesInBatches(rs, userIds, messageText, attachment) {
  for (let i = 0; i < userIds.length; i += BATCH_SIZE) {
    const batch = userIds.slice(i, i + BATCH_SIZE); // –ì—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–∞–∫–µ—Ç–∞

    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è execute
    const batchRequests = batch.map(userId => `API.messages.send({"user_id":${userId},"message":"${messageText}","attachment":"${attachment}","random_id":${Math.floor(Math.random() * 1e9)}})`);

    try {
      const code = `return [${batchRequests.join(',')}];`; // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–¥ –¥–ª—è execute
      const results = await rs.api.execute({ code }); // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–∞–∫–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ VK API)
      if (Array.isArray(results)) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ results - –º–∞—Å—Å–∏–≤
        results.forEach((result, index) => {
          if (result > 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message_id –≤–µ—Ä–Ω—É–ª—Å—è (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ)
            console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${batch[index]} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (message_id: ${result})`);
          } else {
            console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${batch[index]}: ${JSON.stringify(result)}`);
          }
        });
      } else {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API Execute:", results);
      }


      if (DELAY_MS > 0) {
        await delay(DELAY_MS); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞–∫–µ—Ç–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞)
    }
  }
}



cmd.hear(/^(?:rass)\s([0-9]+)\s([^]+)/i, async (message, bot) => {
  try {
    const groupInfo = await vk.api.call('groups.getById', {
      access_token: tokenData.token,
      v: '5.131',
    });

    if (!groupInfo || groupInfo.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
    }

    const groupId = groupInfo[0].id;
    const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

    if (!admins.items.some(admin => admin.id === message.senderId)) {
      return;
    }

    const count = Math.min(Number(message.args[1]) || 0, double.length); //–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    const messageText = message.args[2];
    const attachment = `wall-${groupId}_${message.args[1]}`;
    const rs = new VK({ token: tokenData.token });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –≤ double
    if (!Array.isArray(double) || double.length === 0 || !double.every(user => user.id)) {
      console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ users.json. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.");
      return message.send("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
    }

    const filteredUsers = double.filter(user => user.notifications === true && !user.bans.ban);
    const userIdsToSend = filteredUsers.slice(0, count).map(user => user.id); // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    await sendMessagesInBatches(rs, userIdsToSend, messageText, attachment);


    return message.send(` üë§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${userIdsToSend.length} –ª—é–¥–µ–π `);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", error);
    return message.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.");
  }
});






















const sendMessagesInBatches2 = async (vkInstance, userIds, messageText, attachment) => {
  const batchSize = 100;
  for (let i = 0; i < userIds.length; i += batchSize) {
      const batch = userIds.slice(i, i + batchSize);
      try {
          await Promise.all(batch.map(userId => {
              if (userId < 2000000000) { // –§–∏–ª—å—Ç—Ä—É–µ–º ID –±–µ—Å–µ–¥
                  return vkInstance.api.messages.send({
                      user_id: userId,
                      random_id: 0,
                      message: messageText,
                      attachment: attachment
                  });
              }
              return Promise.resolve(); // –ï—Å–ª–∏ —ç—Ç–æ –±–µ—Å–µ–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
          }));
      } catch (batchError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞:", batchError);
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      }
  }
};


cmd.hear(/^(?:rass2)\s([0-9]+)\s([^]+)/i, async (message, bot) => {
  try {
      const groupInfo = await vk.api.call('groups.getById', {
          access_token: tokenData.token,
          v: '5.131',
      });

      if (!groupInfo || groupInfo.length === 0) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ.');
      }

      const groupId = groupInfo[0].id;
      const admins = await vk.api.groups.getMembers({ group_id: groupId, filter: 'managers' });

      if (!admins.items.some(admin => admin.id === message.senderId)) {
          return message.send('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      }

      const count = Math.min(Number(message.args[1]) || 0);
      const messageText = message.args[2];
      const attachment = `wall-${groupId}_${message.args[1]}`;
      const rs = new VK({ token: tokenData.token });

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
      let allConversations = [];
      let offset = 0;
      const conversationsCount = 200;

      do {
          const conversations = await vk.api.messages.getConversations({
              offset: offset,
              count: conversationsCount,
              access_token: tokenData.token,
              v: '5.131',
              peer_id: 2000000000 + groupId // peer_id –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
          });

          if (!conversations || !conversations.items || conversations.items.length === 0) {
              break;
          }

          allConversations = allConversations.concat(conversations.items);
          offset += conversationsCount;
      } while (offset < 10000 && allConversations.length < (count === 0 ? 10000 : count)); // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º, –∫–æ–≥–¥–∞ –¥–æ—à–ª–∏ –¥–æ count

      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
      const userIdsToSend = allConversations.map(conversation => {
          const peerId = conversation.conversation.peer.id;
          return peerId;
      });
    //  console.log("user to send: ", userIdsToSend); //–î–æ–±–∞–≤—å—Ç–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
      await sendMessagesInBatches2(rs, userIdsToSend, messageText, attachment);

      return message.send(`üë§ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${userIdsToSend.length} –ª—é–¥–µ–π.`);
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ:", error);
      return message.send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ.");
  }
});



module.exports = commands;