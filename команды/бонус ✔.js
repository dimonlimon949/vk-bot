let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
  hear: (pattern, action) => {
    commands.push([pattern, action]);
  }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
  try {
    const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
    return tokens;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    return null;
  }
}

function saveTokens(token, spoler, chatlogi) {
  const tokens = {
    token: token,
    spoler: spoler,
    chatlogi: chatlogi
  };

  try {
    fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
    console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
  }
}

const tokenData = getToken();

const chatlogi = tokenData.chatlogi;
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
}

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

function addZero(num) {
  return num < 10 ? '0' + num : num;
}

function unixStampLefta(stampa) {
  stampa = stampa / 1000;
  let s = Math.floor(stampa % 60);
  stampa = Math.floor(stampa / 60);

  let m = Math.floor(stampa % 60);
  stampa = Math.floor(stampa / 60);

  let h = Math.floor(stampa % 24);
  let d = Math.floor(stampa / 24);
  let y = Math.floor(d / 365);
  d = d % 365;

  let text = '';
  if (y > 0) text += `${y} –≥. `;
  if (d > 0) text += `${d} –¥. `;
  if (h > 0) text += `${addZero(h)} —á. `;
  text += `${addZero(m)} –º–∏–Ω. ${addZero(s)} —Å–µ–∫.`;

  return text.trim();
}

// –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–æ–Ω—É—Å–∞
cmd.hear(/^(?:–±–æ–Ω—É—Å|üéÅ –ë–æ–Ω—É—Å)$/i, async (message, bot) => {
  try {
    if (message.user.bans.bonus) {
      return bot(`üö´ –í–∞–º –æ—Ç–∫–ª—é—á–µ–Ω –±–æ–Ω—É—Å. üö´`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤
    if (message.isChat && message.chat.type === 2) {
      if (message.user.reshim == 1) {
        return await handleGroupBonus(message, bot);
      } else if (message.user.reshim == 2) {
        return await handleGroupBonus2(message, bot);
      }
    }

    // –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const availableBonuses = {
      '–û–±—ã—á–Ω—ã–π': { 
        command: '–æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å', 
        emoji: 'üéÅ',
        available: true,
        handler: handlePrivateBonus,
        timerField: 'bonus',
        cooldown: 3600000 // 1 —á–∞—Å
      },
      'VIP': { 
        command: '–≤–∏–ø –±–æ–Ω—É—Å', 
        emoji: 'üíé',
        available: message.user.settings.vip,
        handler: handleVipBonus,
        timerField: 'vipbonus',
        cooldown: 86400000 // 24 —á–∞—Å–∞
      },
      'PREMIUM': { 
        command: '–ø—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å', 
        emoji: 'üåü',
        available: message.user.settings.premium,
        handler: handlePremiumBonus,
        timerField: 'prembonus',
        cooldown: 86400000 // 24 —á–∞—Å–∞
      },
      'TITAN': { 
        command: '—Ç–∏—Ç–∞–Ω –±–æ–Ω—É—Å', 
        emoji: 'üî•',
        available: message.user.settings.titan,
        handler: handleTitanBonus,
        timerField: 'titanbonus',
        cooldown: 86400000 // 24 —á–∞—Å–∞
      },
      'IMPERATOR': { 
        command: '–∏–º–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–Ω—É—Å', 
        emoji: 'üëë',
        available: message.user.settings.imperator,
        handler: handleImperatorBonus,
        timerField: 'imperatorbonus',
        cooldown: 86400000 // 24 —á–∞—Å–∞
      }
    };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    let buttons = [];
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∫–Ω–æ–ø–∫–∏
    const getButtonColor = (bonusType) => {
      const bonus = availableBonuses[bonusType];
      if (!bonus.available) return "negative"; // –°–µ—Ä—ã–π, –µ—Å–ª–∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞
      
      const timerValue = message.user.timers[bonus.timerField] || 0;
      const isReady = timerValue <= Date.now();
      return isReady ? "positive" : "secondary"; // –ó–µ–ª–µ–Ω—ã–π –µ—Å–ª–∏ –≥–æ—Ç–æ–≤, —Å–∏–Ω–∏–π –µ—Å–ª–∏ –≤ cooldown
    };
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    const getButtonLabel = (bonusType) => {
      const bonus = availableBonuses[bonusType];
      if (!bonus.available) return `${bonus.emoji} ${bonusType} (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)`;
      
      const timerValue = message.user.timers[bonus.timerField] || 0;
      const isReady = timerValue <= Date.now();
      
      if (isReady) return `${bonus.emoji} ${bonusType} (–≥–æ—Ç–æ–≤–æ)`;
      
      return `${bonus.emoji} ${bonusType}`;
    };

    // –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
    buttons.push([{
      action: {
        type: "text",
        payload: JSON.stringify({ command: availableBonuses['–û–±—ã—á–Ω—ã–π'].command }),
        label: getButtonLabel('–û–±—ã—á–Ω—ã–π')
      },
      color: getButtonColor('–û–±—ã—á–Ω—ã–π')
    }]);

    // –í—Ç–æ—Ä–æ–π —Ä—è–¥ - VIP –∏ PREMIUM (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    let premiumButtons = [];
    
    if (availableBonuses['VIP'].available) {
      premiumButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: availableBonuses['VIP'].command }),
          label: getButtonLabel('VIP')
        },
        color: getButtonColor('VIP')
      });
    }
    
    if (availableBonuses['PREMIUM'].available) {
      premiumButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: availableBonuses['PREMIUM'].command }),
          label: getButtonLabel('PREMIUM')
        },
        color: getButtonColor('PREMIUM')
      });
    }
    
    if (premiumButtons.length > 0) {
      buttons.push(premiumButtons);
    }

    // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - TITAN –∏ IMPERATOR (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    let eliteButtons = [];
    
    if (availableBonuses['TITAN'].available) {
      eliteButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: availableBonuses['TITAN'].command }),
          label: getButtonLabel('TITAN')
        },
        color: getButtonColor('TITAN')
      });
    }
    
    if (availableBonuses['IMPERATOR'].available) {
      eliteButtons.push({
        action: {
          type: "text",
          payload: JSON.stringify({ command: availableBonuses['IMPERATOR'].command }),
          label: getButtonLabel('IMPERATOR')
        },
        color: getButtonColor('IMPERATOR')
      });
    }
    
    if (eliteButtons.length > 0) {
      buttons.push(eliteButtons);
    }

    // –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å - —Å—Ä–∞–∑—É –≤—ã–¥–∞–µ–º –µ–≥–æ
    if (buttons.length === 1 && buttons[0].length === 1) {
      return await handlePrivateBonus(message, bot);
    }

    return bot("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–Ω—É—Å–∞:", {
      keyboard: JSON.stringify({
        inline: true,
        buttons: buttons
      })
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –±–æ–Ω—É—Å:", error);
    await bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
async function handlePrivateBonus(message, bot) {
  if (message.user.timers.bonus >= Date.now()) {
    return bot(`‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.timers.bonus - Date.now())} ‚è≥`);
  }

  const randbal = utils.random(5000000, 50000000);
  const randrating = utils.random(5, 20);
  const randbank = utils.random(1000000, 5000000);
  const randbtc = utils.random(10, 100);
  const randbil = utils.random(1, 3);
  const randgb = utils.random(100, 1000);

  message.user.timers.bonus = Date.now() + 3600000; 
  const prize = utils.random(1, 6);

  if (!message.user.now.kv1 && message.user.now.kv) { 
    message.user.now.kv1 = true;
    message.user.bilet += 10;
    await bot(`‚úÖ –¢—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª 1 –∑–∞–¥–∞–Ω–∏–µ! 
  –ù–∞–≥—Ä–∞–¥–∞ - 10 –±–∏–ª–µ—Ç–æ–≤ üéüÔ∏è. 
  
  üí° –ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –∫–∞–∂–¥—ã–π —á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–±–∏—Ä–∞—Ç—å –±–æ–Ω—É—Å –∏ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–∑—ã!`, {
      keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
          [{
            "action": {
              "type": "text",
              payload: JSON.stringify({ command: `–ø—É—Ç—å –Ω–æ–≤–∏—á–∫–∞` }),
              "label": `üëÄ –ü—É—Ç—å –Ω–æ–≤–∏—á–∫–∞`
            },
            "color": "positive"
          }]
        ]
      })
    });
  }

  switch (prize) {
    case 1:
      message.user.balance += randbal;
      return bot(`üí∞ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randbal)} ${val1}! üí∞`);
    case 2:
      message.user.rating += randrating;
      return bot(`üëë –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randrating)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë\nüèÜ –†–µ–π—Ç–∏–Ω–≥: ${utils.sp(message.user.rating)}`);
    case 3:
      message.user.bank += randbank;
      return bot(`üè¶ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randbank)}$ –Ω–∞ —Å–≤–æ–π –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á—ë—Ç! üè¶\nüí≥ –°—á—ë—Ç –≤ –±–∞–Ω–∫–µ: ${utils.sp(message.user.bank)} ${val1}`);
    case 4:
      message.user.btc += randbtc;
      return bot(`‚Çø –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randbtc)} –±–∏—Ç–∫–æ–∏–Ω–æ–≤! ‚Çø\nüåê –ë–∏—Ç–∫–æ–∏–Ω–æ–≤: ${utils.sp(message.user.btc)}‚Çø`);
    case 5:
      message.user.bilet += randbil;
      return bot(`üéüÔ∏è –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randbil)} –±–∏–ª–µ—Ç–æ–≤! üéüÔ∏è`);
    case 6:
        message.user.balance2 += randgb;
        return bot(`üéüÔ∏è –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(randgb)} ${val4}! üéüÔ∏è`);
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–∏–∑:", prize);
      return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ VIP –±–æ–Ω—É—Å–∞
async function handleVipBonus(message, bot) {
  if (!message.user.settings.vip) {
    return bot("üö´ VIP –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å VIP —Å—Ç–∞—Ç—É—Å–æ–º!");
  }

  if (message.user.timers.vipbonus > Date.now()) {
    return bot(`‚è≥ VIP –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.timers.vipbonus - Date.now())} ‚è≥`);
  }

  const vipbonus = utils.random(1, 4);
  message.user.timers.vipbonus = Date.now() + 86400000;

  let bonusMessage, attachment;

  switch (vipbonus) {
    case 1:
      const bonuscash = utils.random(30000000, 300000000);
      message.user.balance += bonuscash;
      bonusMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonuscash)} ${val1}! üí∞`;
      attachment = `photo-219408161_457239349`;
      break;
    case 2:
      const bonusbtc = utils.random(5, 1150);
      message.user.btc += bonusbtc;
      bonusMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbtc)}‚Çø! üíé`;
      attachment = `photo-219408161_457239350`;
      break;
    case 3:
      const bonusrating = utils.random(10, 100);
      message.user.rating += bonusrating;
      bonusMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusrating)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`;
      attachment = `photo-219408161_457239351`;
      break;
    case 4:
      const bonusopit = utils.random(100, 1000);
      message.user.opit += bonusopit;
      bonusMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusopit)} –æ–ø—ã—Ç–∞! üèÜ`;
      attachment = `photo-219408161_457239352`;
      break;
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π VIP –±–æ–Ω—É—Å:", vipbonus);
      return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ VIP –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }

  return bot(bonusMessage, { attachment });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ PREMIUM –±–æ–Ω—É—Å–∞
async function handlePremiumBonus(message, bot) {
  if (!message.user.settings.premium) {
    return bot("üö´ PREMIUM –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å PREMIUM —Å—Ç–∞—Ç—É—Å–æ–º!");
  }

  if (message.user.timers.prembonus > Date.now()) {
    return bot(`‚è≥ PREMIUM –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.timers.prembonus - Date.now())} ‚è≥`);
  }

  const premiumbonus = utils.random(1, 5);
  message.user.timers.prembonus = Date.now() + 86400000;

  switch (premiumbonus) {
    case 1:
      const bonuscash = utils.random(5000000, 50000000);
      message.user.balance += bonuscash;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonuscash)} ${val1}! üí∞`);
    case 2:
      const bonusbtc = utils.random(10, 500);
      message.user.btc += bonusbtc;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbtc)} ‚Çø! üíé`);
    case 3:
      const bonusrating = utils.random(30, 300);
      message.user.rating += bonusrating;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusrating)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`);
    case 4:
      const bonusopit = utils.random(300, 3000);
      message.user.opit += bonusopit;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusopit)} –æ–ø—ã—Ç–∞! üèÜ`);
    case 5:
      const bonusbilet = utils.random(1, 4);
      message.user.bilet += bonusbilet;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbilet)} –±–∏–ª–µ—Ç–æ–≤! üé´`);
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π PREMIUM –±–æ–Ω—É—Å:", premiumbonus);
      return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ PREMIUM –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ TITAN –±–æ–Ω—É—Å–∞
async function handleTitanBonus(message, bot) {
  if (!message.user.settings.titan) {
    return bot("üö´ TITAN –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å TITAN —Å—Ç–∞—Ç—É—Å–æ–º!");
  }

  if (message.user.timers.titanbonus > Date.now()) {
    return bot(`‚è≥ TITAN –±–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.timers.titanbonus - Date.now())} ‚è≥`);
  }

  const titanbonus1 = utils.random(1, 5);
  message.user.timers.titanbonus = Date.now() + 86400000;

  switch (titanbonus1) {
    case 1:
      const bonuscash = utils.random(0, 0);
      message.user.balance += bonuscash;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonuscash)} ${val1}! üí∞`);
    case 2:
      const bonusbtc = utils.random(100, 500);
      message.user.btc += bonusbtc;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbtc)} ‚Çø! üíé`);
    case 3:
      const bonusrating = utils.random(30, 40);
      message.user.rating += bonusrating;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusrating)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`);
    case 4:
      const bonusopit = utils.random(300, 3000);
      message.user.opit += bonusopit;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusopit)} –æ–ø—ã—Ç–∞! üèÜ`);
    case 5:
      const bonusbilet = utils.random(1, 4);
      message.user.bilet += bonusbilet;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbilet)} –±–∏–ª–µ—Ç–æ–≤! üé´`);
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π TITAN –±–æ–Ω—É—Å:", titanbonus1);
      return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ TITAN –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ IMPERATOR –±–æ–Ω—É—Å–∞
async function handleImperatorBonus(message, bot) {
  if (!message.user.settings.imperator) {
    return bot("üö´ IMPERATOR –±–æ–Ω—É—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å IMPERATOR —Å—Ç–∞—Ç—É—Å–æ–º!");
  }

  if (message.user.timers.imperatorbonus >= Date.now()) {
    return bot(`üëë IMPERATOR –±–æ–Ω—É—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${unixStampLefta(message.user.timers.imperatorbonus - Date.now())}. üëë`);
  }

  const imperatorbonus1 = utils.random(1, 6);
  message.user.timers.imperatorbonus = Date.now() + 86400000;

  switch (imperatorbonus1) {
    case 1:
      const bonuscash = utils.random(10000000, 100000000);
      message.user.balance += bonuscash;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonuscash)} ${val1}! üéâ`);
    case 2:
      const bonusbtc = utils.random(1000, 5000);
      message.user.btc += bonusbtc;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusbtc)} ‚Çø! üéâ`);
    case 3:
      const bonusrating = utils.random(10, 65);
      message.user.rating += bonusrating;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusrating)} —Ä–µ–π—Ç–∏–Ω–≥–∞! üëë`);
    case 4:
      const bonusopit = utils.random(3000, 5000);
      message.user.opit += bonusopit;
      return bot(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${utils.sp(bonusopit)} –æ–ø—ã—Ç–∞! üèÜ`);
    case 5:
      message.user.c3 += 1;
      message.send({ sticker_id: 108235 });
      return bot(`üéâ –£–•-–¢–´! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ–Ω–∞—Ç-–∫–µ–π—Å–æ! üéÅ`);
    case 6:
      message.user.c5 += 2;
      message.send({ sticker_id: 108225 });
      return bot(`üéâ –í–û–¢ –≠–¢–û –£–î–ê–ß–ê! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 2 —Å—É–ø–µ—Ä –∫–µ–π—Å–∞! üéÅ`);
    default:
      console.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π IMPERATOR –±–æ–Ω—É—Å:", imperatorbonus1);
      return bot("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ IMPERATOR –±–æ–Ω—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤
async function handleGroupBonus(message, bot) {
  if (message.user.balance2 > 999999) {
    return bot("üö´ –ë–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω, —É –≤–∞—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å. üö´");
  }

  if (message.user.timers.bonus2 > Date.now()) {
    let timeLeft = unixStampLefta(message.user.timers.bonus2 - Date.now());
    return bot(`‚è≥ –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: ${timeLeft} ‚è≥`);
  }

  const bonusConfigs = [
    { condition: () => message.user.settings.vip, bonus: 1000, name: 'VIP –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.premium, bonus: 1500, name: 'PREMIUM –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.topdon, bonus: 5000, name: 'TOP DONATOR –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.adm > 0, bonus: 2500, name: 'ADMIN –±–æ–Ω—É—Å' },
    { condition: () => true, bonus: 500, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å' }
  ];

  let totalBonus = 0;
  let bestBonus = {bonus: 0, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å'};

  for (const config of bonusConfigs) {
    if (config.condition()) {
      totalBonus += config.bonus;
      if (config.bonus > bestBonus.bonus) {
        bestBonus = config;
      }
    }
  }

  message.user.balance2 += totalBonus;
  message.user.timers.bonus2 = Date.now() + 1200000;
  message.user.bonusCounter = (message.user.bonusCounter || 0) + 1;

  const formattedBonus = utils.sp(totalBonus).replace(/,/g, '.');
  await bot(`üéâ ${bestBonus.name}: +${formattedBonus} ${val4}! üíµ`);
}

async function handleGroupBonus2(message, bot) {
  if (message.user.balance > 1000000000) {
    return bot("üö´ –ë–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω, —É –≤–∞—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –±–∞–ª–∞–Ω—Å. üö´");
  }

  if (message.user.timers.bonus2 > Date.now()) {
    let timeLeft = unixStampLefta(message.user.timers.bonus2 - Date.now());
    return bot(`‚è≥ –î–æ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞: ${timeLeft} ‚è≥`);
  }

  const bonusConfigs = [
    { condition: () => message.user.settings.vip, bonus: 1000000, name: 'VIP –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.premium, bonus: 5000000, name: 'PREMIUM –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.topdon, bonus: 50000000, name: 'TOP DONATOR –±–æ–Ω—É—Å' },
    { condition: () => message.user.settings.adm > 0, bonus: 25000000, name: 'ADMIN –±–æ–Ω—É—Å' },
    { condition: () => true, bonus: 500000, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å' }
  ];

  let totalBonus = 0;
  let bestBonus = {bonus: 0, name: '–û–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å'};

  for (const config of bonusConfigs) {
    if (config.condition()) {
      totalBonus += config.bonus;
      if (config.bonus > bestBonus.bonus) {
        bestBonus = config;
      }
    }
  }

  message.user.balance += totalBonus;
  message.user.timers.bonus2 = Date.now() + 1200000;
  message.user.bonusCounter = (message.user.bonusCounter || 0) + 1;

  const formattedBonus = utils.sp(totalBonus).replace(/,/g, '.');
  await bot(`üéâ ${bestBonus.name}: +${formattedBonus} ${val1}! üíµ`);
}

setInterval(() => {
  let tokensCache = getToken3(); 
  if (tokensCache) {
      val1 = tokensCache.val1; 
      val2 = tokensCache.val2; 
      val3 = tokensCache.val3; 
      val4 = tokensCache.val4; 
  }
}, 1000);

cmd.hear(/^(?:–æ–±—ã—á–Ω—ã–π –±–æ–Ω—É—Å)$/i, async (message, bot) => {
  await handlePrivateBonus(message, bot);
});

cmd.hear(/^(?:–≤–∏–ø –±–æ–Ω—É—Å)$/i, async (message, bot) => {
  await handleVipBonus(message, bot);
});

cmd.hear(/^(?:–ø—Ä–µ–º–∏—É–º –±–æ–Ω—É—Å)$/i, async (message, bot) => {
  await handlePremiumBonus(message, bot);
});

cmd.hear(/^(?:—Ç–∏—Ç–∞–Ω –±–æ–Ω—É—Å)$/i, async (message, bot) => {
  await handleTitanBonus(message, bot);
});

cmd.hear(/^(?:–∏–º–ø–µ—Ä–∞—Ç–æ—Ä –±–æ–Ω—É—Å)$/i, async (message, bot) => {
  await handleImperatorBonus(message, bot);
});

module.exports = commands;