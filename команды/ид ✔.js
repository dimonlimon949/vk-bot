let utils = require('../utils.js')

const commands = [];

const fs = require('fs');

let double = require('../database/users.json')

const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö
function saveTokens(token, spoler, chatlogi) {
    const tokens = {
        token: token,
        spoler: spoler,
        chatlogi: chatlogi
    };

    try {
        fs.writeFileSync(tokensFilePath, JSON.stringify(tokens, null, 2), 'utf8');
        console.log('–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
    }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const tokenData = getToken();

const chatlogi = tokenData.chatlogi; // —á–∞—Ç –¥–ª—è –ª–æ–≥–æ–≤ 
const spoler = tokenData.spoler;
const { VK } = require('vk-io');
const vk = require('../vk-api.js'); 



cmd.hear(/^–∏–¥(\s+([^]+)?)?$/i, async (message, bot) => {
    let user;
    let vkId; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è VK ID, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑ —Å—Å—ã–ª–∫–∏
    const args = message.text.split(/\s+/).slice(1);

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —á–∏—Å–ª–æ)
    if (args[0]) {
        const arg = args[0];

        if (!isNaN(Number(arg))) {
            // 1.1. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —á–∏—Å–ª–æ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ VK ID
            vkId = Number(arg);
        } else {
            // 1.2. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç - —Å—Å—ã–ª–∫–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º VK ID
            if (!arg.match(/\|/i)) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–∏–º–≤–æ–ª–∞ "|" (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ü–µ–ª–µ–π)
                const screenName = arg.replace(
                    /((http|https):\/\/(vk.com|m.vk.com)\/|(vk.com)\/)/gi,
                    ""
                );

                try {
                    const resolveResponse = await vk.api.utils.resolveScreenName({ screen_name: screenName });
                    if (resolveResponse && resolveResponse.type === 'user') {
                        vkId = resolveResponse.object_id;
                    } else {
                        return bot("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Å—ã–ª–∫–µ.");
                    }
                } catch (error) {
                    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ resolveScreenName:", error);
                    return bot("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–Ω–∞—è.");
                }
            } else {
                // 1.3. –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç "|", –∏–∑–≤–ª–µ–∫–∞–µ–º VK ID (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏)
                const extractedId = arg.replace(/((\|[^]*)|(\[id))/gi, "");
                vkId = Number(extractedId);
            }
        }

        // 2. –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è VK ID, –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ double –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é VK ID –∏ user.id
        user = double.find(x => x.id === vkId);

        // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ uid
        if (user) {
             if (user.astats && user.astats.fakeid) {
                 return message.reply(`üí§ID: ${user.astats.fakeid}`);
              } else {
                  return message.reply(`üí§ID: ${user.uid}`);
              }
        } else {
            return bot(`üí§ID: ${message.user.uid}`);
        }
    }
    // 4. –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–µ—Å—ã–ª–∫–∞/–æ—Ç–≤–µ—Ç)
    else if (message.hasForwards || message.replyMessage) {
        const senderId = message.hasForwards ? message.forwards[0].senderId : message.replyMessage.senderId;
        // 4.1. –ò—â–µ–º –ø–æ senderId, —Å—á–∏—Ç–∞—è –µ–≥–æ VK ID (user.id)
        user = double.find(x => x.id === senderId);

        if (user) {
            if (user.astats && user.astats.fakeid) {
                return message.reply(`üí§ID: ${user.astats.fakeid}`);
              } else {
                  return message.reply(`üí§ID: ${user.uid}`);
              }
        } else {
            return bot("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –ø–æ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.");
        }
    }
    // 5. –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –Ω–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏/–æ—Ç–≤–µ—Ç–∞
    else {
        return bot(`üí§ID: ${message.user.uid}`);
    }
});




module.exports = commands;
