const axios = require('axios');
const fs = require('fs');

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData = getToken();

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js'); 

const confic = require('../database/settings.json'); 

const commands = [];
const cmd = {
    hear: (pattern, action) => {
         commands.push([pattern, action]);

    }
};

const async = require('async');


cmd.hear(/^(?:–ø–∞—Å—Å –±–æ—Ç–∞|‚≠êPass Cold‚≠ê)\s?/i, async (message, bot) => {

      if (message.user.settings.titan !== true) return bot(`–¥–æ—Å—Ç—É–ø–µ–Ω topdon –∏–≥—Ä–æ–∫–∞–º`)

  try {
    await message.send(`‚âΩ‹´‚âº‚ôõ‚ôõ‚ôõ‚âΩ‹´‚âº`, {
      keyboard: JSON.stringify({
        "inline": true,
        "buttons": [
          [
            {
              "action": {
                "type": "text",
                payload: JSON.stringify({ command: `–ø–∞—Å—Å 1` }),
                "label": `üç≠ –ü—É—Ç—å –ø–∞—Å—Å–∞`
              },
              "color": "positive"
            },
            {
              "action": {
                "type": "text",
                payload: JSON.stringify({ command: `–ø–∞—Å—Å 2` }),
                "label": `üíé –ö—É–ø–∏—Ç—å –†—É–±–∏–Ω–æ–≤—ã–π –ø–∞—Å—Å`
              },
              "color": "positive"
            }
          ],
          [
            {
              "action": {
                "type": "text",
                payload: JSON.stringify({ command: `–ø–∞—Å—Å 3` }),
                "label": `üéÅ –°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥`
              },
              "color": "positive"
            },
            {
              "action": {
                "type": "text",
                payload: JSON.stringify({ command: `–ø–∞—Å—Å 4` }),
                "label": `‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ`
              },
              "color": "positive"
            }
          ]
        ]
      })
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
  }
});

cmd.hear(/^(?:–ø–∞—Å—Å 1|–ø—É—Ç—å –ø–∞—Å—Å–∞)\s?/i, async (message, bot) => {
      if (message.user.settings.titan !== true) return bot(`–¥–æ—Å—Ç—É–ø–µ–Ω topdon –∏–≥—Ä–æ–∫–∞–º`)

});

cmd.hear(/^(?:–ø–∞—Å—Å 2|–ö—É–ø–∏—Ç—å –†—É–±–∏–Ω–æ–≤—ã–π –ø–∞—Å—Å)\s?/i, async (message, bot) => {
      if (message.user.settings.titan !== true) return bot(`–¥–æ—Å—Ç—É–ø–µ–Ω topdon –∏–≥—Ä–æ–∫–∞–º`)

});


cmd.hear(/^(?:–ø–∞—Å—Å 3|—Å–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥)\s?/i, async (message, bot) => {
      if (message.user.settings.titan !== true) return bot(`–¥–æ—Å—Ç—É–ø–µ–Ω topdon –∏–≥—Ä–æ–∫–∞–º`)

});


cmd.hear(/^(?:–ø–∞—Å—Å 4|–æ —Å–µ–∑–æ–Ω–µ)\s?/i, async (message, bot) => {
      if (message.user.settings.titan !== true) return bot(`–¥–æ—Å—Ç—É–ø–µ–Ω topdon –∏–≥—Ä–æ–∫–∞–º`)

});



module.exports = commands;