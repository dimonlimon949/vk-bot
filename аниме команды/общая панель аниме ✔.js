const axios = require('axios');
const fs = require('fs');
const puppeteer = require('puppeteer');
let chats = require('../database/chats.json');

const tokensFilePath = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/—Ç–æ–∫–µ–Ω—ã.json';

function getToken() {
    try {
        const tokens = JSON.parse(fs.readFileSync(tokensFilePath, 'utf8'));
        return tokens;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        return null;
    }
}

const tokenData = getToken();

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js'); 

const commands = [];
const cmd = {
    hear: (pattern, action) => {
         commands.push([pattern, action]);

    }
};

const tokensFilePath3 = './–Ω–∞—Å—Ç—Ä–æ–π–∫–∏/–≤–∞–ª—é—Ç—ã.json';

function getToken3() {
    try {
      const tokens = JSON.parse(fs.readFileSync(tokensFilePath3, 'utf8'));
      return tokens;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
      return null;
    }
  }

const tokenData3 = getToken3(); 

let val1 = tokenData3.val1
let val2 = tokenData3.val2
let val3 = tokenData3.val3
let val4 = tokenData3.val4
let val5 = tokenData3.val5

setInterval(() => {
    tokensCache = getToken3(); 
    if (tokensCache) {
        val1 = tokensCache.val1; 
        val2 = tokensCache.val2; 
        val3 = tokensCache.val3; 
        val4 = tokensCache.val4; 
    }
  }, 1000);

const async = require('async');

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-–∞–Ω–∏–º–µ
cmd.hear(/^(?:—Ç–æ–ø–∏–∫)\s?/i, async (message, bot) => {
    return bot(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,{
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `321`}),
                        "label": `üç≠ –õ–æ–ª–∏-–∞–Ω–∏–º–µ`
                    },
                    "color": "positive"
                },
                {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `123`}),
                        "label": `‚ú® –ê–Ω–∏–º–µ —Ö–µ–Ω—Ç–∞–π`
                    },
                    "color": "positive"
                }]
            ]
        })
    })
});

   
cmd.hear(/^(?:–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ)\s?/i, async (message, bot) => {
    return bot(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,{
        keyboard: JSON.stringify({
            "inline": true,
            "buttons": [
                [{
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–±–∏–∑–Ω–µ—Å—ã`}),
                        "label": `üç≠ –±–∏–∑–Ω–µ—Å—ã`
                    },
                    "color": "positive"
                }],
                [
                {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–≤–µ—Ä–Ω—É—Ç—å –≥–±`}),
                        "label": `‚ú®${val4} `
                    },
                    "color": "positive"
                },
                            {
                    "action": {
                        "type": "text",
                        payload: JSON.stringify({command: `–≤–µ—Ä–Ω—É—Ç—å —Ä—É–±–ª–∏`}),
                        "label": `‚ú®${val1}`
                    },
                    "color": "positive"
                }]
            ]
        })
    })
});


// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
const hasActiveBets = (userId, chats) => {
    for (const chat of chats) {
        if (chat.games && chat.games.length > 0) {
            const lastGame = chat.games[chat.games.length - 1];
            if (lastGame.stavki && lastGame.stavki.some(stavka => stavka.id === userId)) {
                return true;
            }
        }
    }
    return false;
};

cmd.hear(/^(?:–≤–µ—Ä–Ω—É—Ç—å —Ä—É–±–ª–∏)\s?/i, async (message, bot) => {
    if (message.user.reshim == 2) {
        return bot(`–≤—ã –∏—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º`, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({command: `–≤–µ—Ä–Ω—É—Ç—å –≥–±`}),
                            "label": `üç≠ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º`
                        },
                        "color": "positive"
                    }],
                ]
            })
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    if (hasActiveBets(message.user.id, chats)) {
        return bot(`‚ùå –ù–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞.`);
    }

    message.user.reshim = 2;
    return bot(`‚úÖ –ì–æ—Ç–æ–≤–æ, —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É–±–ª–∏`);
});

cmd.hear(/^(?:–≤–µ—Ä–Ω—É—Ç—å –≥–±)\s?/i, async (message, bot) => {
    if (message.user.reshim == 1) {
        return bot(`–≤—ã –∏—Ç–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º`, {
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({command: `–≤–µ—Ä–Ω—É—Ç—å —Ä—É–±–ª–∏`}),
                            "label": `üç≠ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º`
                        },
                        "color": "positive"
                    }],
                ]
            })
        });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
    if (hasActiveBets(message.user.id, chats)) {
        return bot(`‚ùå –ù–µ–ª—å–∑—è —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞–≤–∫–∏! –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—É–Ω–¥–∞.`);
    }

    message.user.reshim = 1;
    return bot(`‚úÖ –ì–æ—Ç–æ–≤–æ, —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ GB`);
});

module.exports = commands;