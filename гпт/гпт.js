const commands = [];
const cmd = {
    hear: (pattern, action) => {
        commands.push([pattern, action]);
    }
};

const {
    VK
} = require('vk-io');
const vk = require('../vk-api.js');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Cloudflare AI
const AI_CONFIG = {
    ACCOUNT_ID: '8d4f01716f0126f43447b62df1ed5104',
    API_TOKEN: 'yfGoOqaszPvsn518likFh7H7FEzzXr_asvUy1mGP',
    MODEL: '@cf/openai/gpt-oss-120b',
    IMAGE_MODEL: '@cf/black-forest-labs/flux-1-schnell'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
const chatHistory = new Map();

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function cleanResponse(text) {
    return text
        .replace(/\*\*(.*?)\*\*/g, '$1')
        .replace(/\*(.*?)\*/g, '$1')
        .replace(/`(.*?)`/g, '$1')
        .replace(/<!--.*?-->/g, '')
        .replace(/\[.*?\]\(.*?\)/g, '')
        .trim();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π
function generateAttachmentLinks(attachments) {
    return attachments.map(attach => {
        if (attach.type === 'photo') {
            // –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
            const photo = attach.sizes.find(size => size.type === 'z') || 
                         attach.sizes.find(size => size.type === 'y') ||
                         attach.sizes[attach.sizes.length - 1];
            return photo.url;
        }
        return `https://vk.com/${attach.type}${attach.ownerId}_${attach.id}`;
    }).filter(url => url); // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ URL
}

// –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
function buildPrompt(userId, question, attachments = []) {
    const history = chatHistory.get(userId) || [];
    let prompt = "–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–∞–≤–∏–ª–∞:\n" +
                "1. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)\n" +
                "2. –°–æ—Ö—Ä–∞–Ω—è–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω\n" +
                "3. –£—á–∏—Ç—ã–≤–∞–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ [IMG:URL]\n" +
                "4. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω ‚Äî —É—Ç–æ—á–Ω–∏\n\n";
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if (history.length > 0) {
        prompt += "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:\n";
        history.slice(-4).forEach(msg => {
            prompt += `${msg.role === 'user' ? 'üë§' : 'ü§ñ'}: ${msg.content}\n`;
        });
    }
    
    prompt += `\nüë§: ${question}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è
    const attachmentLinks = generateAttachmentLinks(attachments);
    if (attachmentLinks.length > 0) {
        prompt += `\n[–ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n${attachmentLinks.map(url => `[IMG:${url}]`).join('\n')}]`;
    }
    
    prompt += `\nü§ñ:`;
    return prompt;
}

async function queryCloudflareAI(userId, question, attachments = []) {
    try {
        const input = buildPrompt(userId, question, attachments);
        
        const response = await fetch(
            `https://api.cloudflare.com/client/v4/accounts/${AI_CONFIG.ACCOUNT_ID}/ai/run/${AI_CONFIG.MODEL}`,
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${AI_CONFIG.API_TOKEN}`,
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    input: input,
                    max_tokens: 1024
                })
            }
        );

        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.errors?.map(e => e.message).join(', ') || "API Error");
        }

        const rawResponse = data.result?.output?.find(item => 
            item.type === 'message' && 
            item.role === 'assistant'
        )?.content?.[0]?.text;

        let cleanAnswer = cleanResponse(rawResponse || "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç");

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        const history = chatHistory.get(userId) || [];
        history.push({ 
            role: 'user', 
            content: question,
            attachments: attachments 
        });
        history.push({ 
            role: 'assistant', 
            content: cleanAnswer 
        });
        chatHistory.set(userId, history.slice(-5));

        return cleanAnswer;

    } catch (error) {
        console.error('API Request Failed:', error);
        throw error;
    }
}

// –ö–æ–º–∞–Ω–¥–∞ "–Ω–µ–π—Ä–æ" —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–∏–π
cmd.hear(/^–Ω–µ–π—Ä–æ\s+(.+)/i, async (message, bot) => {
    try {
        const userId = message.senderId;
        const question = message.args[1]?.trim();
        
        if (!question || question.length > 500) {
            return bot("‚ùå –í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤");
        }

        if (/(18\+|–Ω–∞—Å–∏–ª|–Ω–∞—Ä–∫–æ|–∫—Ä–∏–º–∏–Ω–∞–ª)/i.test(question)) {
            return bot("üö´ –Ø –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —ç—Ç—É —Ç–µ–º—É");
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ)
        const attachments = (message.attachments || [])
            .filter(attach => attach.type === 'photo');
        
        const aiResponse = await queryCloudflareAI(userId, question, attachments);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
        let finalResponse = aiResponse;
        if (attachments.length > 0) {
            const photoLinks = generateAttachmentLinks(attachments);
            finalResponse += `\n\nüîó –°—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n${photoLinks.join('\n')}`;
        }
        
        bot(finalResponse);

    } catch (error) {
        console.error('Command Error:', error);
        bot("üí• –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ");
    }
});

// –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
cmd.hear(/^–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é$/i, (message, bot) => {
    chatHistory.delete(message.senderId);
    bot("üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞");
});

const axios = require('axios');

const fs = require('fs');








cmd.hear(/^–Ω–∞—Ä–∏—Å—É–π\s+(.+)/i, async (message, bot) => {
    const userId = message.senderId;
    const prompt = message.args[1].trim();
    console.log(`[–ù–µ–π—Ä–æ—Ä–∏—Å—É–Ω–æ–∫] –ó–∞–ø—Ä–æ—Å –æ—Ç ${userId}: ${prompt}`);

    try {
        // 1. –ó–∞–ø—Ä–æ—Å –∫ Cloudflare AI
        const cfResponse = await axios.post(
            `https://api.cloudflare.com/client/v4/accounts/${AI_CONFIG.ACCOUNT_ID}/ai/run/@cf/black-forest-labs/flux-1-schnell`,
            {
                prompt: prompt,
                steps: 6,
                seed: Math.floor(Math.random() * 1000)
            },
            {
                headers: {
                    'Authorization': `Bearer ${AI_CONFIG.API_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageBuffer = Buffer.from(cfResponse.data.result.image, 'base64');

        // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤ VK
        let uploadResult;
        try {
            uploadResult = await vk.upload.messagePhoto({
                source: {
                    value: imageBuffer,
                    filename: 'image.jpg'
                }
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç:', error);
            uploadResult = await vk.upload.messageDocument({
                peer_id: message.peerId,
                source: {
                    value: imageBuffer,
                    filename: 'image.jpg'
                }
            });
        }

        // 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ attachment
        const attachment = uploadResult.type === 'photo' 
            ? `photo${uploadResult.ownerId}_${uploadResult.id}` 
            : `doc${uploadResult.ownerId}_${uploadResult.id}`;

        // 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
        await message.send({
            attachment: attachment,
            keyboard: JSON.stringify({
                "inline": true,
                "buttons": [
                    [{
                        "action": {
                            "type": "text",
                            payload: JSON.stringify({
                                command: `–Ω–∞—Ä–∏—Å—É–π ${prompt}`
                            }),
                            "label": `üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞`
                        },
                        "color": "positive"
                    }]
                ]
            })
        });

    } catch (error) {
        console.error('[–ù–µ–π—Ä–æ—Ä–∏—Å—É–Ω–æ–∫] –û—à–∏–±–∫–∞:', error);
        await message.send({
            message: 'üí• –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å'
        });
    }
});






module.exports = commands;